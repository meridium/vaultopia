<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Meridium.Lib</name>
    </assembly>
    <members>
        <member name="T:Meridium.Lib.Xml.Serialization.XmlTextWriterReferenceObjectComparer">
            <summary>
            Compares two objects if they are XmlTextWriters and checks if they are based on the same base writer
            </summary>
            <remarks>
            2010-09-28 dan: Created
            </remarks>
        </member>
        <member name="T:Meridium.Lib.IReferenceObjectComparer">
            <summary>
            Defines an comparer that takes two instances and determines if they are based on the same object.
            </summary>
            <remarks>
            This is useful for classes that wraps other classes and we want to compare the original instance with the
            wrapped instance.
            </remarks>
        </member>
        <member name="M:Meridium.Lib.IReferenceObjectComparer.AreSameReferenceObject(System.Object,System.Object)">
            <summary>
            Compares two objects and compares if they are based on the same reference object.
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>True if they originates from the same instance, false otherwize.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlTextWriterReferenceObjectComparer.AreSameReferenceObject(System.Object,System.Object)">
            <summary>
            Compares two objects and compares if they are based on the same reference object.
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>True if they originates from the same instance, false otherwize.</returns>
        </member>
        <member name="T:Meridium.Lib.Xml.Serialization.XmlSerializerCache">
            <summary>
            Summary description for XmlSerializerCache.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerCache.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates an instance of the XmlSerializerCache class.
            </summary>
            <param name="startItem">The object that started the serialization</param>
            <param name="forSerialization">If the cache is for serialization or deserialization.</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerCache.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before 
            the <b>XmlSerializerCache</b> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerCache.EnsureInCache(System.Object,System.Int32@)">
            <summary>
            Ensures that the supplied item is contained in the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to check/add.</param>
            <param name="id">The id that the object has in the cache.</param>
            <returns>True if the object already existed in the cache, false if it was added.</returns>
            <exception cref="T:System.ApplicationException">If the cache is created for serialization</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerCache.GetId(System.Object)">
            <summary>
            Gets the associated id of the object
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to get the id for</param>
            <returns>The found id</returns>
            <exception cref="T:System.ApplicationException">If the cache is created for deserialization</exception>
            <exception cref="T:System.ApplicationException">If the object wasn't found in the cache</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerCache.Add(System.Object)">
            <summary>
            Adds an object to the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to add</param>
            <returns>The id of the object that was added.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerCache.GetObject(System.Int32)">
            <summary>
            Gets an object from the cache with the supplied id.
            </summary>
            <param name="id">The id of the object</param>
            <returns>The found object</returns>
            <exception cref="T:System.ApplicationException">If the cache is created for serialization</exception>
            <exception cref="T:System.ApplicationException">If the object wasn't found in the cache</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerCache.IsInCache(System.Object)">
            <summary>
            Checks if an object exists in the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to check.</param>
            <returns>True if it exists, false otherwize</returns>
            <exception cref="T:System.ApplicationException">If the cache is created for deserialization</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerCache.Dispose">
            <summary>
            Releases all resources used by the object.
            </summary>
            <remarks>
            Calling Dispose allows the resources used by the object to be reallocated for 
            other purposes. For more information about Dispose, see Cleaning Up Unmanaged Resources.
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerCache.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.</param>
            <remarks>
            This method is called by the public Dispose() method and the Finalize method. 
            Dispose() invokes the protected Dispose(Boolean) method with the disposing parameter set 
            to true. Finalize invokes Dispose with disposing set to false.
            When the disposing parameter is true, this method releases all resources held by any managed 
            objects that this object references. This method invokes the Dispose() method of each 
            referenced object.
            		Notes to Inheritors:   Dispose can be called multiple times by other objects. 
            When overriding Dispose(Boolean), be careful not to reference objects that have 
            been previously disposed of in an earlier call to Dispose. For more information 
            about how to implement Dispose(Boolean), see Implementing a Dispose Method.
            For more information about Dispose and Finalize, see Cleaning Up Unmanaged Resources 
            and Overriding the Finalize Method.
            </remarks>
        </member>
        <member name="P:Meridium.Lib.Xml.Serialization.XmlSerializerCache.StartItem">
            <summary>
            Gets the StartItem of the XmlSerializerCache
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Xml.Serialization.XmlSerializerCache.Disposed">
            <summary>
            Returns true if the property is disposed or not
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Text.TokenizerToken">
            <summary>
            Summary description for TokenizerToken.
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerToken.GroupingToken">
            <summary>
            Contains the Grouping Token for the token
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerToken.IsStartToken">
            <summary>
            Is true if the token is a starttoken
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerToken.m_source">
            <summary>
            Get/Sets the m_source of the <see cref="T:Meridium.Lib.Text.TokenizerToken"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerToken.m_length">
            <summary>
            Get/Sets the m_length of the <see cref="T:Meridium.Lib.Text.TokenizerToken"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerToken.m_index">
            <summary>
            Get/Sets the index of the Start position for this token or the group if a related token is encountered.
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerToken.m_value">
            <summary>
            Get/Sets the m_value of the <see cref="T:Meridium.Lib.Text.TokenizerToken"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerToken.m_valueChanged">
            <summary>
            Get/Sets the m_valueChanged of the <see cref="T:Meridium.Lib.Text.TokenizerToken"/>
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerToken.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerToken.#ctor(System.Int32,System.Int32,System.String,System.Text.RegularExpressions.GroupCollection)">
            <summary>
            Creates an instance of the TokenizerToken class.
            </summary>
            <param name="index">The start index of this token</param>
            <param name="length">The length of the token</param>
            <param name="source">The source <see cref="T:System.String"/> where the token is found.</param>
            <param name="matchGroups">The <see cref="T:System.Text.RegularExpressions.GroupCollection"/> 
            that was identified when the token was found.</param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerToken.ToString">
            <summary>
            Returns the value of the Token
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerToken.Clone(Meridium.Lib.Text.GroupTokenList)">
            <summary>
            Clones the TokenizerToken
            </summary>
            <param name="groupTokens">The list of cloned groupTokens</param>
            <returns>The cloned Token</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerToken.CopyFieldsToClone(Meridium.Lib.Text.TokenizerToken,Meridium.Lib.Text.GroupTokenList)">
            <summary>
            Copies the fields of the TokenizerToken to the clone
            </summary>
            <param name="clone">The clone to populate</param>
            <param name="groupTokens">The list of cloned groupTokens</param>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerToken.Source">
            <summary>
            Gets the source of the Token
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerToken.Length">
            <summary>
            Gets the length of the Token
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerToken.Index">
            <summary>
            The index of the Start position for this token or the group if a related token is encountered.
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerToken.EndIndex">
            <summary>
            The index of the Stop position for this token or the group if a related token is encountered.
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerToken.Value">
            <summary>
            Gets the value of the Token
            </summary>
            <remarks>The value includes any start and end tokens</remarks>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerToken.InnerValue">
            <summary>
            The inner value represents the value between the start and end tokens.
            </summary>
            <remarks>For TokenizerTokens this is the same as Value since they lack start and end tokens</remarks>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerToken.MatchGroups">
            <summary>
            Gets the MatchGroups of the TokenizerGroupToken
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerToken.EmptyGroupCollection">
            <summary>
            Gets the EmptyGroupCollection of the TokenizerToken
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Text.StringTokenizerFactory">
            <summary>
            Summary description for StringTokenizerFactory.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:Meridium.Lib.Text.StringTokenizerFactory.Delimiters">
            <summary>
            Get/Sets the Delimiters of the <see cref="T:Meridium.Lib.Text.StringTokenizerFactory"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.StringTokenizerFactory.DelimiterOptions">
            <summary>
            Get/Sets the DelimiterOptions of the <see cref="T:Meridium.Lib.Text.StringTokenizerFactory"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.StringTokenizerFactory.GroupTokens">
            <summary>
            Get/Sets the GroupTokens of the <see cref="T:Meridium.Lib.Text.StringTokenizerFactory"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.StringTokenizerFactory.GroupOptions">
            <summary>
            Get/Sets the GroupOptions of the <see cref="T:Meridium.Lib.Text.StringTokenizerFactory"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.StringTokenizerFactory.IncludeWhitespaceInDelimiters">
            <summary>
            Get/Sets the IncludeWhitespaceInDelimiters of the <see cref="T:Meridium.Lib.Text.StringTokenizerFactory"/>
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizerFactory.#ctor">
            <summary>
            Creates an instance of the StringTokenizerFactory class.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizerFactory.#ctor(System.String[],System.Text.RegularExpressions.RegexOptions,Meridium.Lib.Text.GroupTokenList,System.Text.RegularExpressions.RegexOptions,System.Boolean)">
            <summary>
            Creates an instance of the StringTokenizerFactory class.
            </summary>
            <param name="delimiters">an array of delimiters</param>
            <param name="delimiterOptions">If any special options should be used for matching the delimiters (like case insensitive)</param>
            <param name="groupTokens">if we should ignore delimiters inside groups, this array contains List of groupTokens Example "{","}","(",")","[","]"</param>
            <param name="groupOptions">If any special options should be used for matching the grouping delimiters (like case insensitive)</param>
            <param name="includeWhitespaceInDelimiters">If whitespaces should be included in delimiters</param>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizerFactory.SetDelimiters(System.String[])">
            <summary>
            Sets the delimiters of the factory
            </summary>
            <param name="delimiters"></param>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizerFactory.Tokenize(System.String)">
            <summary>
            Gets a StringTokenizer of the supplied string
            </summary>
            <param name="source">The string to tokenize</param>
            <returns>The StringTokenizer</returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizerFactory.Tokenize(System.String,System.String[])">
            <summary>
            Gets a StringTokenizer
            </summary>
            <param name="source">The string to tokenize</param>
            <param name="delimiters">The delimiters to tokenize by</param>
            <returns>The StringTokenizer</returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizerFactory.CreateGenericStringTokenizerFactory">
            <summary>
            Creates a GenericStringTokenizerFactory that ignores cases and groups by GroupTokenList.DefaultGroupTokens
            and includes whitespace in delimiters
            </summary>
            <returns>The StringTokenizerFactory</returns>
        </member>
        <member name="T:Meridium.Lib.Text.IMatch">
            <summary>
            Summary description for IMatch.
            </summary>
            <remarks>
            2007-11-22 dan: Created
            </remarks>
        </member>
        <member name="T:Meridium.Lib.Text.IMatchItem">
            <summary>
            The IMatchGroup interface 
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.IMatchItem.Index">
            <summary>
            Gets the Index of the IMatch
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.IMatchItem.Length">
            <summary>
            Gets the Length of the IMatch
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.IMatchItem.Name">
            <summary>
            Gets the Name of the IMatch
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.IMatchItem.Value">
            <summary>
            Gets the Value of the IMatch
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.IMatch.Groups">
            <summary>
            Gets the Groups of the IMatch
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Text.MatchItem">
            <summary>
            Defines an item that is a match.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:Meridium.Lib.Text.MatchItem.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <b>MatchItem</b> class.
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="name"></param>
        </member>
        <member name="P:Meridium.Lib.Text.MatchItem.Index">
            <summary>
            Gets the Index of the IMatch
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.MatchItem.Length">
            <summary>
            Gets the Length of the IMatch
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.MatchItem.Name">
            <summary>
            Gets the Name of the IMatch
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.MatchItem.Value">
            <summary>
            Gets the Value of the MatchItem
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Text.IMatchItemCollection">
            <summary>
            The IMatchItemCollection interface 
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.IMatchItemCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Meridium.Lib.Text.IMatchItem"/> item identified by the given arguments of the MatchItemCollection
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Text.MatchItemCollection">
            <summary>
            
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:Meridium.Lib.Text.MatchItemCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Meridium.Lib.Text.IMatchItem"/> item identified by the given arguments of the MatchItemCollection
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Reflection.ResourceUtil">
            <summary>
            Summary description for ResourceUtil.
            </summary>
            <remarks>
            2011-03-21 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Reflection.ResourceUtil.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <b>ResourceUtil</b> class.
            </summary>
            <param name="baseType"></param>
        </member>
        <member name="M:Meridium.Lib.Reflection.ResourceUtil.GetEmbeddedBinaryData(System.String)">
            <summary>
            Retrieves the embedded resource as a byte array
            </summary>
            <param name="resourceName">The case-sensitive name of the manifest resource being requested. </param>
            <returns>The retrieved <see cref="T:System.Byte"/> array </returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ResourceUtil.GetEmbeddedBinaryData(System.Type,System.String)">
            <summary>
            Retrieves the embedded resource as a byte array
            </summary>
            <param name="baseType">The <see cref="T:System.Type"/> whose namespace is used to scope the manifest resource name.</param>
            <param name="resourceName">The case-sensitive name of the manifest resource being requested. </param>
            <returns>The retrieved <see cref="T:System.Byte"/> array </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="baseType"/> is null
             or if <paramref name="resourceName"/> is null.</exception>
            <exception cref="T:System.ApplicationException">If resource stream couldn't be opened</exception>
        </member>
        <member name="M:Meridium.Lib.Reflection.ResourceUtil.GetManifestResourceStream(System.Type,System.String)">
            <summary>
            Gets a manifest resource stream
            </summary>
            <param name="baseType">The <see cref="T:System.Type"/> whos assembly and namespace that should be used as base.</param>
            <param name="resourceName">The name of the resource (omitting the basetypes namespace)</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing the manifest resource; null if no resources were specified during compilation or if the resource is not visible to the caller.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="baseType"/> is null
             or if <paramref name="resourceName"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Reflection.ResourceUtil.GetResourceNames(System.Type)">
            <summary>
            Gets the resourcenames from the same folder as the supplied baseType
            </summary>
            <param name="baseType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="baseType"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Reflection.ResourceUtil.GetManifestResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the stream for the embedded resource
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> where the resource exists</param>
            <param name="resourceName">The name of the resource</param>
            <returns>The found <see cref="T:System.IO.Stream"/> </returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ResourceUtil.SaveEmbeddedFile(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Saves an embedded resource as a file
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> that contains the resource</param>
            <param name="resourceName">The name of the resource</param>
            <param name="filename">The output filename to write the resource to.</param>
        </member>
        <member name="P:Meridium.Lib.Reflection.ResourceUtil.BaseType">
            <summary>
            Get/Sets the BaseType of the ResourceUtil
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Collections.ReferenceEqualsHashtable">
            <summary>
            This hashtable compares the keys depending on their reference values
            </summary>
            <remarks>
            2008-05-30 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Collections.ReferenceEqualsHashtable.#ctor">
            <summary>
            Initializes a new instance of the <b>ReferenceEqualsHashtable</b> class.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Collections.ReferenceEqualsHashtable.ReferenceEqualsEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">x and y are of different types and neither one can handle comparisons with the other.</exception>
        </member>
        <member name="M:Meridium.Lib.Collections.ReferenceEqualsHashtable.ReferenceEqualsEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>
            A hash code for the specified object.
            </returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:Meridium.Lib.Collections.Generic.OrderedDictionary`2">
            <summary>
            Defines a dictionary where every key also has an index.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:Meridium.Lib.Collections.Generic.OrderedDictionary`2.DefaultCapacity">
            <summary>
            Gets the DEFAULT_CAPACITY of the <see cref="T:Meridium.Lib.Collections.Generic.OrderedDictionary`2"/>
            </summary>
            <remarks>This capacity is set whenever the default constructor is called</remarks>
        </member>
        <member name="F:Meridium.Lib.Collections.Generic.OrderedDictionary`2.DefaultNullValue">
            <summary>
            Get/Sets the DefaultNullValue of the <see cref="T:Meridium.Lib.Collections.Generic.OrderedDictionary`2"/>
            </summary>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <b>OrderedDictionary&lt;TKey, TValue&gt;</b> class.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>OrderedDictionary</b> class.
            </summary>
            <param name="capacity">The initial number of elements that the OrderedDictionary can contain</param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <b>OrderedDictionary&lt;TKey, TValue&gt;</b> class.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.IDictionary"/> to use for startdata</param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Initialize(System.Int32)">
            <summary>
            Initializes the collection to the supplied number of items
            </summary>
            <param name="capacity">The initial number of elements that the OrderedDictionary can contain</param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds the key/value pair to the dictionary
            </summary>
            <param name="key">The key to add</param>
            <param name="value">The value of the key to add</param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Add(`0)">
            <summary>
            Adds the supplied key and sets the value to the default null value
            </summary>
            <param name="key">The key to add</param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.AddIfMissing(`0)">
            <summary>
            Adds the key if it is missing.
            </summary>
            <param name="key">The key to add</param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Set(`0,`1)">
            <summary>
            Sets the key/value pair even if it's not set before
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to associate with the key</param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Returns a value indicating whether the specified <paramref name="key"/>
             is contained in the <see cref="T:Meridium.Lib.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <param name="key">The key to locate in the 
            <see cref="T:Meridium.Lib.Collections.Generic.OrderedDictionary`2"/>.</param>
            <returns><b>true</b> if the <i>TKey</i> parameter is a member 
            of the <see cref="T:Meridium.Lib.Collections.Generic.OrderedDictionary`2"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get a value from the Dictionary.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns a value indicating whether the specified <paramref name="item"/>
             is contained in the <see cref="T:Meridium.Lib.Collections.Generic.OrderedDictionary`2"/>.
            </summary>
            <param name="item">The item to locate in the 
            <see cref="T:Meridium.Lib.Collections.Generic.OrderedDictionary`2"/>.</param>
            <returns><b>true</b> if the <i>KeyValuePair</i> parameter is a member 
            of the <see cref="T:Meridium.Lib.Collections.Generic.OrderedDictionary`2"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.OrderedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Count">
            <summary>
            Gets the Count of the OrderedDictionary
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Collections.Generic.OrderedDictionary`2.IsReadOnly">
            <summary>
            Gets the IsReadOnly of the OrderedDictionary
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key. 
            </summary>
            <value>The value associated with the specified key. If the specified key is not found, 
            a get operation throws a KeyNotFoundException, and a set operation creates a new element 
            with the specified key. </value>
        </member>
        <member name="P:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Keys">
            <summary>
            Gets the Keys of the OrderedDictionary
            </summary>
            <value>The order of the keys is the same as the order that they where added</value>
        </member>
        <member name="P:Meridium.Lib.Collections.Generic.OrderedDictionary`2.Values">
            <summary>
            Gets the Values of the OrderedDictionary
            </summary>
            <value>The order of the values is the same as the order that they where added</value>
        </member>
        <member name="T:Meridium.Lib.Threading.ThreadUtil">
            <summary>
            Summary description for ThreadUtil.
            </summary>
            <remarks>
            2011-05-13 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Threading.ThreadUtil.StartThread(System.Threading.ThreadStart,System.Action{System.Exception})">
            <summary>
            Creates and starts a thread 
            </summary>
            <param name="threadStart">The <see cref="T:System.Threading.ThreadStart"/> to use</param>
            <param name="exceptionHandler">An <see cref="T:System.Action`1"/> handling an exception for the threadStart</param>
            <returns>The running <see cref="T:System.Threading.Thread"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="threadStart"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Threading.ThreadUtil.AbortThreadIfRunning(System.Threading.Thread)">
            <summary>
            Aborts the supplied thread if it is running
            </summary>
            <param name="thread">The <see cref="T:System.Threading.Thread"/> to abort</param>
            <returns>True if the thread is stopped, false if abort failed after timeout</returns>
        </member>
        <member name="T:Meridium.Lib.Collections.Generic.UniqueList`1">
            <summary>
            This is a list containing unique items.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="capacity">The number of items the list initially can store</param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="capacity"></param>
            <param name="quiet"></param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.#ctor(System.Func{`0,`0,System.Boolean},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="comparer"></param>
            <param name="quiet"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="comparer"></param>
            <param name="quiet"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.Contains(`0)">
            <summary>
            Returns a value indicating whether the specified <paramref name="item"/>
             is contained in the <see cref="T:Meridium.Lib.Collections.Generic.UniqueList`1"/>.
            </summary>
            <param name="item">The item to locate in the 
            <see cref="T:Meridium.Lib.Collections.Generic.UniqueList`1"/>.</param>
            <returns><b>true</b> if the <i>T</i> parameter is a member 
            of the <see cref="T:Meridium.Lib.Collections.Generic.UniqueList`1"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.IndexOf(`0)">
            <summary>
            Searches for the item and returns the zero-based index of the first occurance of the item
            </summary>
            <param name="item">The item to search for</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item in the list
            </summary>
            <param name="index">The zero-based index at which the item should be inserted</param>
            <param name="item">The item to insert</param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index">The index of the item to remove</param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.Add(`0)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the list
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.Clear">
            <summary>
            Clears the items from the list
            </summary>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list to a typed array
            </summary>
            <param name="array">The array to copy to</param>
            <param name="arrayIndex">The zero-based index in array where the copy starts</param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.Remove(`0)">
            <summary>
            Removes an item from the list
            </summary>
            <param name="item">The <typeparamref name="T"/> item to remove</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the UniqueList&lt;T&gt;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.UniqueList`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Meridium.Lib.Collections.Generic.UniqueList`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Meridium.Lib.Collections.Generic.UniqueList`1"/>.</returns>
        </member>
        <member name="P:Meridium.Lib.Collections.Generic.UniqueList`1.InnerList">
            <summary>
            Get/Sets the InnerList of the UniqueList
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Collections.Generic.UniqueList`1.Quiet">
            <summary>
            Get/Sets the Quiet of the UniqueList
            </summary>
            <value>If set to true, this will not throw any exception on duplicate inserts, only ignore the insert.</value>
        </member>
        <member name="P:Meridium.Lib.Collections.Generic.UniqueList`1.Item(System.Int32)">
            <summary>
            Get/Sets the  item identified by the given arguments of the UniqueList
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Collections.Generic.UniqueList`1.Count">
            <summary>
            Gets the Count of the UniqueList
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Collections.Generic.UniqueList`1.IsReadOnly">
            <summary>
            Gets the IsReadOnly of the UniqueList
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Collections.Generic.UniqueList`1.Comparer">
            <summary>
            Get/Sets the Comparer of the UniqueList
            </summary>
            <value></value>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.EqualEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <b>EqualEqualityComparer&lt;T&gt;</b> class.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.EqualEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.EqualEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>
            A hash code for the specified object.
            </returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Meridium.Lib.Xml.ElementInsertPosition">
            <summary>
            Defines the possible values for when a element is inserted and the position of the following
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementInsertPosition.NotParsed">
            <summary>
            The position is not parsed
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementInsertPosition.First">
            <summary>
            The element will be inserted as first child of its parent
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementInsertPosition.Last">
            <summary>
            The element will be inserted as last child of its parent
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementInsertPosition.Default">
            <summary>
            The element will be inserted as default setting (last, added at the end)
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementInsertPosition.AfterSibling">
            <summary>
            The element will be placed directly after the previously matched sibling
            </summary>
        </member>
        <member name="T:Meridium.Lib.Text.GroupTokenEnumerator">
            <summary>
            Defines a filtering enumerator that only iterates a  <see cref="T:Meridium.Lib.Text.TokenizerGroupTokenList"/> where 
            each <see cref="T:Meridium.Lib.Text.TokenizerGroupToken"/> has a specific groupingToken
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.GroupTokenEnumerator._list">
            <summary>
            The list to iterate
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.GroupTokenEnumerator._groupingToken">
            <summary>
            The GroupToken to filter out
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.GroupTokenEnumerator._pos">
            <summary>
            The current position in the list
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenEnumerator.#ctor(Meridium.Lib.Text.TokenizerGroupTokenList,Meridium.Lib.Text.GroupToken)">
            <summary>
            Creates the GroupTokenEnumerator
            </summary>
            <param name="list">The list to iterate</param>
            <param name="groupingToken">The groupingToken to filter out</param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenEnumerator.GetEnumerator">
            <summary>
            Gets the enumerator of the IEnumerable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenEnumerator.Reset">
            <summary>
            Resets the enumerator
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenEnumerator.MoveNext">
            <summary>
            Advances to the next <see cref="T:Meridium.Lib.Text.TokenizerGroupToken"/> that fulfills the filter
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.GroupTokenEnumerator.Current">
            <summary>
            Gets the current <see cref="T:Meridium.Lib.Text.TokenizerGroupToken"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridium.Lib.Xml.Serialization.XmlSerializerUtil">
            <summary>
            The XmlSerializerUtil provides utility methods for serializing and deserializing
            objects. It also caches created Serializers for faster access.
            </summary>
            <summary>
            Summary description for XmlSerializerUtil.
            </summary>
            <remarks>
            2010-09-28 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.#ctor">
            <summary>
            Creates an instance of the XmlSerializerUtil class.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.GetSerializer(System.Type)">
            <summary>
            Gets the serializer for the supplied type 
            </summary>
            <param name="type">The type to get the serializer for</param>
            <returns>The Types serializer</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.GetSerializer(System.Type,System.Type)">
            <summary>
            Gets the XmlSerializer for the specified type
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the XmlSerializer for</param>
            <param name="extraType">An extra <see cref="T:System.Type"/> that the XmlSerializer can handle.</param>
            <returns>The <see cref="T:System.Xml.Serialization.XmlSerializer"/> </returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.SerializeObject(System.Object)">
            <summary>
            Serializes the object 
            </summary>
            <param name="obj">The object to serialize</param>
            <returns>The Serialized object</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.SerializeSimpleObjectsToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the supplied object.
            </summary>
            <param name="obj"></param>
            <returns>A <see cref="T:System.String"/> that represents the supplied object or null if the supplied object couldn't be serialized in a simple way.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.SerializeObject(System.Xml.XmlWriter,System.Object)">
            <summary>
            Serializes the supplied object to the writer.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to serialize the object to</param>
            <param name="o">The <see cref="T:System.Object"/>  to serialize.</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.SerializeObject(System.Xml.XmlWriter,System.Object,System.Type)">
            <summary>
            Serializes the supplied object to the writer.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to serialize the object to</param>
            <param name="obj">The <see cref="T:System.Object"/>  to serialize.</param>
            <param name="baseType">The base <see cref="T:System.Type"/> to serialize</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeObject(System.Type,System.String)">
            <summary>
            Deserializes an object from a string to the object value 
            </summary>
            <param name="type">The type to deserialize to</param>
            <param name="data">The data used for deserialization</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeObject(System.Type,System.Xml.XmlReader)">
            <summary>
            Deserializes an object of the specific type by reading data from the supplied reader.
            </summary>
            <remarks>Uses the <see cref="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeObject(System.Type,System.Xml.XmlReader,System.Boolean)"/> where expectWrapperElement is set to true.</remarks>
            <param name="type">The <see cref="T:System.Type"/> to deserialize to</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to use as an input for the deserialization</param>
            <returns>The deserialized obejct</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeObject(System.Type,System.Xml.XmlReader,System.Boolean)">
            <summary>
            Deserializes an object of the specific type by reading data from the supplied reader.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to deserialize to</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to use as an input for the deserialization</param>
            <param name="expectWrapperElement">True if the object to be serialized is inside the current reader node, false if the reader node
            is positioined on the start element of the item</param>
            <returns>The deserialized obejct</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null
             or if <paramref name="reader"/> is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">If error in Deserialization data. Can't assign null to a ValueType.(.</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.FindTypeByXsiType(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="xsiType"></param>
            <param name="baseType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="xsiType"/> is null.</exception>
            <exception cref="T:System.Exception">If cannot find type by xsiType. Multiple types matches the xsiType .</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.ReadToNextElement(System.Xml.XmlReader)">
            <summary>
            Moves the reader to the next element.(or end element)
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from.</param>
            <returns>True if we was able to reach the next element, false otherwize. </returns>
            <remarks>If the reader already is placed on an end element, no advancement is done and false is returned.</remarks>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.RetrieveItem(System.Xml.XmlReader,System.Type,System.String)">
            <summary>
            Reads an item from the supplied xml reader of the supplied type and name
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from</param>
            <param name="type">The <see cref="T:System.Type"/> of object to read.</param>
            <param name="name">The name of the element to read, if null comparison will not occur (any name is ok)</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.RetrieveItem(System.Xml.XmlReader,Meridium.Lib.Xml.Serialization.IXmlSerializerMemberInfo)">
            <summary>
            Reads an item from the supplied xml reader of the supplied type and name
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from</param>
            <param name="member">The <see cref="T:Meridium.Lib.Xml.Serialization.IXmlSerializerMemberInfo"/> defining the property
            that should recieve the item.</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.WriteItem(System.Xml.XmlWriter,System.Object,System.String)">
            <summary>
            Writes an item to the supplied writer
            </summary>
            <param name="writer">The <see cref="T:System.Object"/> to write to</param>
            <param name="o">The <see cref="T:System.Xml.XmlWriter"/> to write</param>
            <param name="name">The name of the element</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.WriteItem(System.Xml.XmlWriter,System.Object,Meridium.Lib.Xml.Serialization.IXmlSerializerMemberInfo)">
            <summary>
            Writes an item to the supplied writer
            </summary>
            <param name="writer">The <see cref="T:System.Object"/> to write to</param>
            <param name="o">The <see cref="T:System.Xml.XmlWriter"/> to write</param>
            <param name="member">The <see cref="T:Meridium.Lib.Xml.Serialization.IXmlSerializerMemberInfo"/> containing information
            on how to write the data.</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.WriteItem(System.Xml.XmlWriter,System.Object,System.String,System.Type)">
            <summary>
            Writes an item to the supplied writer
            </summary>
            <param name="writer">The <see cref="T:System.Object"/> to write to</param>
            <param name="o">The <see cref="T:System.Xml.XmlWriter"/> to write</param>
            <param name="name">The name of the element</param>
            <param name="baseType">The type of object that is the base type</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.WriteItem(System.Xml.XmlWriter,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes an item to the supplied writer
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write to</param>
            <param name="o">The <see cref="T:System.Object"/> to write</param>
            <param name="name">The name of the element</param>
            <param name="attributes">The attributes to write to the element.</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.WriteItem(System.Xml.XmlWriter,System.Object,System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes an item to the supplied writer
            </summary>
            <param name="writer">The <see cref="T:System.Object"/> to write to</param>
            <param name="o">The <see cref="T:System.Xml.XmlWriter"/> to write</param>
            <param name="name">The name of the element</param>
            <param name="baseType">The type of object that is the base type</param>
            <param name="attributes">The attributes to write to the element.</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.WriteAttribute(System.Xml.XmlWriter,System.Object,System.String)">
            <summary>
            Writes the supplied value as an attribute
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write to</param>
            <param name="value">The value to write</param>
            <param name="name">The name of the attribute to write</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is null
             or if <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.ReadAttribute``1(System.Xml.XmlReader,System.String)">
            <summary>
            Reads an attribute from the current XmlReader
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from </param>
            <param name="name">The name of the attribute to read</param>
            <typeparam name="T">The type of value to read</typeparam>
            <returns>The read attribute value</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="reader"/> is null.</exception>
            <exception cref="T:System.Xml.XmlException">If no attribute with the supplied name was found .</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXml(System.Object)">
            <summary>
            Serializes an object to Xml
            </summary>
            <param name="obj">The object to serialize</param>
            <returns>The serialized xml</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXml(System.Object,System.Xml.Serialization.XmlSerializer)">
            <summary>
            Serializes an object to Xml
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="xser">The <see cref="T:System.Xml.Serialization.XmlSerializer"/> to use or null if the default should be used</param>
            <returns>The serialized xml</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXml(System.Object,System.Xml.Serialization.XmlSerializer,System.Text.Encoding)">
            <summary>
            Serializes an object to Xml
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="xser">The <see cref="T:System.Xml.Serialization.XmlSerializer"/> to use or null if the default should be used</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use for the xml serialized string</param>
            <returns>The serialized xml</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXml(System.Object,System.Text.Encoding)">
            <summary>
            Serializes an object to Xml
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use for the xml serialized string</param>
            <returns>The serialized xml</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeFromXml``1(System.String)">
            <summary>
            Deserializes an xml text to an object.
            </summary>
            <param name="xml">The xml to deserialize</param>
            <typeparam name="T">The type to serialize the xml to</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeFromXml``1(System.String,System.Xml.Serialization.XmlSerializer)">
            <summary>
            Deserializes an xml text to an object.
            </summary>
            <param name="xml">The xml to deserialize</param>
            <param name="xser">The <see cref="T:System.Xml.Serialization.XmlSerializer"/> to use or null if the default serializer for the type should be used</param>
            <typeparam name="T">The type to serialize the xml to</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXmlFile(System.Object,System.String)">
            <summary>
            Serializes an object to Xml and stores it in a file
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="path">The path to the file to write to. If it exists, it will be overwritten.</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXmlFile(System.Object,System.String,System.Text.Encoding)">
            <summary>
            Serializes an object to Xml and stores it in a file
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="path">The path to the file to write to. If it exists, it will be overwritten.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeFromXmlFile``1(System.String)">
            <summary>
             Deserializes a file (xml) to an object.
            </summary>
            <param name="path">The path to the file to deserialize.</param>
            <returns>The deserialized <typeparamref name="T"/></returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.WriteTypeInfo(System.Object,System.Xml.XmlWriter)">
            <summary>
            Writes the type info on the current node (as an argument
            </summary>
            <param name="obj">The object to write the type for</param>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <exception cref="T:System.ArgumentNullException">If obj is null</exception>
            <exception cref="T:System.ArgumentNullException">If writer is null</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.ReadTypeInfo(System.Xml.XmlReader)">
            <summary>
            Reads the type information from the reader.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from</param>
            <returns>The found type</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">If the type attribute was not found.</exception>
            <exception cref="T:System.TypeLoadException">If the type was not found.</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.Clone``1(``0)">
            <summary>
            Clones the supplied item by serializing it to xml and back.
            </summary>
            <param name="obj"></param>
            <typeparam name="T"></typeparam>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.AddItemReference(System.Object,System.Object)">
            <summary>
            Adds the supplied object to the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to add.</param>
            <param name="cacheReference">The reference object that is used to create the cache</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.GetItemReference(System.Xml.XmlReader)">
            <summary>
            Gets the referred object of the current element.
            </summary>
            <param name="reader"></param>
            <returns>The referred object or null if there isn't any refered object.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.StoreItemReference(System.Object,System.Xml.XmlWriter)">
            <summary>
            Writes the reference id to the current node and ensures that the supplied object is 
            contained in the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to check/add.</param>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> used for serialization</param>
            <returns>True if the object has already been added to the cache, false otherwize.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.ItemReferenceDone(System.Object)">
            <summary>
            Removes the cache if the supplied object is the same as the one that initialized the cache.
            </summary>
            <param name="o">The object to check.</param>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.GetCache(System.Object,System.Boolean,System.Object)">
            <summary>
            Gets the Cache from the thread storage
            </summary>
            <param name="o">The current object to add to the cache, will not be added but in case
            the cache is not existent, we need a reference object for calculating where the cache should 
            be ended.</param>
            <param name="forSerialization">If the cache is for serialization or deserialization.</param>
            <param name="cacheReference">The reference object that is used to create the cache</param>
            <returns>The <see cref="T:Meridium.Lib.Xml.Serialization.XmlSerializerCache"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="o"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.CreateCache(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates an assigns the Cache for the Util
            </summary>
            <param name="forSerialization">If the cache is for serialization or deserialization.</param>
            <param name="cacheReference">The reference object that is used to create the cache</param>
            <param name="o">The base object for the cache (can be null)</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="cacheReference"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.DeleteCache">
            <summary>
            Deletes the current cache
            </summary>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.GetItemByReference(System.Int32)">
            <summary>
            Gets a cached object by its reference id
            </summary>
            <param name="id">The cache id of the object</param>
            <returns>The cached <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.EnsureInCache(System.Object,System.Int32@,System.Object)">
            <summary>
            Ensures that the supplied item is contained in the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to check/add.</param>
            <param name="id">The id that the object has in the cache.</param>
            <param name="cacheReference">The reference object that is used to create the cache</param>
            <returns>True if the object already existed in the cache, false if it was added.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.InitCacheForReading(System.Object)">
            <summary>
            Initiates a XmlSerializerCache for a deserialize operation.
            </summary>
            <param name="refObject"></param>
            <exception cref="T:System.ApplicationException">If a XmlSerializerCache already exists in the thread.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="refObject"/> is null.</exception>
            <remarks>When the deserialize operation is completed, don't forget to do a <see cref="M:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.DeleteCache"/> call to enable
            other serialize/deserialize methods to work.</remarks>
        </member>
        <member name="P:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.DecimalNumberFormatInfo">
            <summary>
            Gets the DecimalNumberFormatInfo of the XmlSerializerUtil
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.SerializerCache">
            <summary>
            Gets the serializer cache for the ViewState
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Xml.Serialization.XmlSerializerUtil.ReferenceComparer">
            <summary>
            The reference comparer compares the two reference
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Configuration.CommandLine.CommandLineParametersBase">
            <summary>
            The CommandLineParametersBase is a baseclass for creating a application specific command line parameters class.
            </summary>
            <remarks>
            2009-06-23 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.CommandLineParametersBase.#ctor">
            <summary>
            Initializes a new instance of the <b>CommandLineParameters</b> class.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.CommandLineParametersBase.AskYesNo(System.String)">
            <summary>
            Displays a question and waits for the user to enter y or n
            </summary>
            <param name="question">The question to display</param>
            <returns>True if y was pressed, false if n was pressed</returns>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.CommandLineParametersBase.ShowHelp">
            <summary>
            
            </summary>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.CommandLineParametersBase.Execute">
            <summary>
            Executes the commandLine
            </summary>
            <returns>The return code of the operation where 0 means success and anything else is an error. (should be returned to the console and will be 
            visible as the %ERRORLEVEL% environment variable.</returns>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.CommandLineParametersBase.DisplayHelp">
            <summary>
            Get/Sets the DisplayHelp of the CommandLineParameters
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.CommandLineParametersBase.AnswerYes">
            <summary>
            Get/Sets the AnswerYes of the CommandLineParameters
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.CommandLineParametersBase.Errors">
            <summary>
            Gets the Errors of the BaseOperation
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.CommandLineParametersBase.HelpMessage">
            <summary>
            Get/Sets the HelpMessage of the CommandLineParametersBase
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Xml.XmlUtil">
            <summary>
            Summary description for XmlUtil.
            </summary>
            <summary>
            Summary description for XmlUtil.MergeNodeHelper.
            </summary>
            <remarks>
            2012-10-15 dan: Created
            </remarks>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.True">
            <summary>
            Defines the true value constant
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.False">
            <summary>
            Defines the false value constant
            </summary>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.AttributeExists(System.Xml.XmlNode,System.String)">
            <summary>
            Returns true if a specified attribute exists 
            </summary>
            <param name="node">XmlNode node</param>
            <param name="name">string name</param>
            <returns>Returns true if a specified attribute exists , else false</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.GetAttibute(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the value of the specified attribute on the passed node
            </summary>
            <param name="node">the node to look for the attribute in</param>
            <param name="name">the name of the attribute</param>
            <returns>The attribute node, if the attribute not exists null is returned</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the string value of an XmlNode attribute.
            </summary>
            <param name="node">the node to look for the attribute in</param>
            <param name="name">the name of the attribute</param>
            <returns>The string value of the attribute</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.GetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Gets the string value of an XmlNode attribute.
            </summary>
            <param name="node">the node to look for the attribute in</param>
            <param name="name">the name of the attribute</param>
            <param name="defaultValue">If the attribute doesn't exists, this value is returned instead</param>
            <returns>The string value of the attribute</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.GetAttributeValueAsInt(System.Xml.XmlNode,System.String)">
            <summary>
            
            </summary>
            <param name="node">the node to look for the attribute in</param>
            <param name="name">the name of the attribute</param>
            <returns>If the string isn't a number, an exception is thrown.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.GetAttributeValueAsInt(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Gets the int value of an XmlNode attribute. If the attribute is not set (or set as an empty string), the default value 
            is returned instead.
            </summary>
            <param name="node">the node to look for the attribute in</param>
            <param name="name">the name of the attribute</param>
            <param name="defaultValue">The value returned if the value isn't set or is set to an non integer value.</param>
            <returns>The integer value or the default value. If a value is set but can't be converted, the default value is returned.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.GetAttributeValueAsDateTime(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the DateTime value of an XmlNode attribute
            </summary>
            <param name="node">the node to look for the attribute in</param>
            <param name="name">the name of the attribute</param>
            <returns>If the string isn't a date, an exception is thrown.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.GetAttributeValueAsDateTime(System.Xml.XmlNode,System.String,System.DateTime)">
            <summary>
            Gets the DateTime value of an XmlNode attribute
            </summary>
            <param name="node">the node to look for the attribute in</param>
            <param name="name">the name of the attribute</param>
            <param name="defaultValue">The default value to use if no value could be found</param>
            <returns>If the string isn't a date, the default value is returned</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.GetAttributeValueAsBool(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the Boolean value of an XmlNode attribute
            </summary>
            <param name="node">the node to look for the attribute in</param>
            <param name="name">the name of the attribute</param>
            <returns>If the string can't be parsed as a bool, an exception is thrown.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.SetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Sets an attribute value in the the supplied node
            </summary>
            <param name="node">The node to create the attribute in</param>
            <param name="attrName">The name of the attribute</param>
            <param name="attrValue">The value of the attribute. If null, the attribute is removed</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="node"/> is null
             or if <paramref name="attrName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.RemoveAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            Removes an attribute with the given name from the node
            </summary>
            <param name="node">The node to remove the attribute from</param>
            <param name="name">The name of the attribute</param>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.CreateElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Creates an element at the supplied path. If the parent elements doesn't exists, they are created aswell.
            If the element already exists, it will be returned.
            </summary>
            <remarks>Not all types of xpath expressions are supported. 
            The xpath must specify one target.
            When an element is missing in the document the element (with attributes) is created.
            For instance 
            <pre><![CDATA[/configuration/item[@att='val']/subItem[@att='val2']]]></pre>
            will create the item with "att" attribute set to value "val" if it is not found
            and the subItem with "att" attribute set to value "val2" if it is missing.
            You can also create items with multiple attributes using and condtions like
            <pre><![CDATA[/configuration/item[@att1='val1' and @att2='val2']]]></pre>
            besides from that support for creating nodes is limited.
            </remarks>
            <param name="doc">The document that the element should be created in</param>
            <param name="elementPath">The absolute path to the element</param>
            <returns>The created (or found) node</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.AddChildNode(System.Xml.XmlNode,System.String)">
            <summary>
            Adds an XmlNode with the supplied name to the end of the childlist of the parent.
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <returns>The newly created and added node</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.CloneNode(System.Xml.XmlNode,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Clone one node from one document to another.
            The node will be added to the supplied Parent node after cloning
            </summary>
            <param name="parentNode">The node to add the cloned node to</param>
            <param name="node">The node to clone</param>
            <param name="deepCopy">Should we clone children aswell?</param>
            <returns>The newly cloned node</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.CloneNode(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.Boolean,System.String[],Meridium.Lib.Xml.ElementInsertPosition)">
            <summary>
            Clone one node from one document to another.
            The node will be added to the supplied Parent node after cloning
            </summary>
            <param name="parentNode">The node to add the cloned node to</param>
            <param name="node">The node to clone</param>
            <param name="lastSibling"></param>
            <param name="deepCopy">Should we clone children aswell?</param>
            <param name="ignoreAttributeNames">A list of attributes that will be stripped from the cloned node (and children)</param>
            <param name="elementInsertPosition">The position where the new node should be inserted</param>
            <returns>The newly cloned node</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.GetXmlNode(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Searches the parent for a node with the same name and attributevalues as the target.
            Will return the first matching node.
            </summary>
            <param name="parent">The parent node to search for a matching element</param>
            <param name="target">The target node for matching information</param>
            <returns>The matching childNode, null if node is not found</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.GetXmlNode(System.Xml.XmlNode,System.Xml.XmlNode,System.String[])">
            <summary>
            Searches the parent for a node with the same name and attributevalues as the target.
            Will return the first matching node.
            </summary>
            <param name="parent">The parent node to search for a matching element</param>
            <param name="target">The target node for matching information</param>
            <param name="ignoreAttributeNames">A list of attribute names that will not be compared for a successfull match</param>
            <returns>The matching childNode, null if node is not found</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.IsMatch(System.Xml.XmlNode,System.Xml.XmlNode,System.Collections.Generic.IList{System.String})">
            <summary>
            Checks if the nodes matches eachother in attributes 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="ignoreAttributeNames">A list of attribute names that will not be compared for a successfull match</param>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.SelectMatchingNodes(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Returns a XmlNodeList that contains all nodes in the parent that matches the supplied target Node (in name and namespace).
            </summary>
            <param name="parent">The parent node to search in.</param>
            <param name="target">The node to use for comparing the nodes</param>
            <returns>a XmlNodeList</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.MergeXml(System.String,System.String)">
            <summary>
            Merges the source xml into the destination xml code. <see cref="M:Meridium.Lib.Xml.XmlUtil.MergeXml(System.Xml.XmlNode,System.Xml.XmlNode)"/> for more information.
            </summary>
            <param name="destXml">The destination xml</param>
            <param name="srcXml">The source xml</param>
            <returns>The resulting xml</returns>
            <exception cref="T:System.ApplicationException">If merge failed.</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.MergeXml(System.Xml.XmlNode,System.Xml.XmlNode)">
             <summary>
             Merges all children from the src parameter to the dest node (if they doesn't exist).
             Supports only distinct xml nodes, duplicates are not supported (will be replaced).
             </summary>
             
             <remarks>
             <h3>_valueAttributes</h3>
             if the _valueAttributes attribute is specified on a node that is to be merged, 
             the csv value list the names of the attributes that will be treated as values when
             comparing equalness. That means they will be ignored on match and replaced on merge.
             
             Ex.
             The following src node will match any node with the attributes verb and path set to that combination, 
             but will ignore and replace changes in the type attribute.
             <code><![CDATA[
            		&lt;add verb=&quote;*&quote; path=&quote;Embed.aspx&quote; type=&quote;Meridium.Web.EmbeddedHandler, EmailEncoder.Core&quote;  
            			_valueAttributes=&quote;type&quote;/&gt;
             ]]></code>
             So the following node will be a true match
             <code><![CDATA[
            		&lt;add verb=&quote;*&quote; path=&quote;Embed.aspx&quote; type=&quote;Meridium.Web.EmbeddedHandler, Meridium&quote;/&gt;
             ]]></code>
             And will be replaced by the following node
             <code>
            		<![CDATA[&lt;add verb=&quote;*&quote; path=&quote;Embed.aspx&quote; type=&quote;Meridium.Web.EmbeddedHandler, EmailEncoder.Core&quote;/&gt;]]>
             </code>
             
             <h3>_elementInsertPosition</h3>
             <p>if the _elementInsertPosition attribute is specified on a node that is to be merged, 
             the value defines where the merged element should be inserted if it doesn't already exists in the list.
             </p>
             <p>
             Ex.
             <code>
             	<![CDATA[&lt;configSections _elementInsertPosition=&quote;first&quote;/&gt;]]>
             </code>
             will insert the configSection element first in the childlist.
             If the attribute is not defined, the element will be appended to the existing childlist.
             </p>
             <p>You can also specify afterSibling as insert position, then the element will be inserted directly after the previously 
             matched sibling element</p>
             <p>Ex.
             <code>
             <![CDATA[&lt;httpHandlers&gt;
            &lt;clear _elementInsertPosition="first"/&gt;
            &lt;add name="myHandler" path="myhandler.aspx" verb="*" type="myass.mytype,myass" _elementInsertPosition="afterSibling"/&gt;
            &lt;/httpHandlers&gt;]]>
             </code>
             </p>
             
             <h3>_doNotOverwriteAttribute</h3>
             if the _doNotOverwriteAttribute attribute is specified on a node that is to be merged, 
             the csv value list the names of the attributes that not will be replaced on a merge.
             The attributes are autmatically treated as value attributes (see _valueAttributes)
             
             Ex.
             <code>
             	<![CDATA[&lt;add key=&quote;StripNotFilteredMailto&quote; value=&quote;True&quote; _doNotOverwriteAttribute=&quote;value&quote;/&gt;]]>
             </code>
             will, if the following element exist
             <code>
             	<![CDATA[&lt;add key=&quote;StripNotFilteredMailto&quote; value=&quote;False&quote;/&gt;]]>
             </code>
             not change it. If the element doesn't exist the following element will be added.
             <code>
             	<![CDATA[&lt;add key=&quote;StripNotFilteredMailto&quote; value=&quote;True&quote;/&gt;]]>
             </code>
             
             <h3>_uniqueElementInParent</h3>
             If this attribute is set, it can only exist one element of that name in the parent node.
             Ex.
             <code><![CDATA[
             	&lt;dependentAssembly&gt;
             		&lt;assemblyIdentity name=&quote;EPiServer&quote; publicKeyToken=&quote;8fe83dea738b45b7&quote; culture=&quote;neutral&quote; _uniqueElementInParent=&quote;&quote;/&gt;
             		&lt;bindingRedirect oldVersion=&quote;4.0.0.0-4.65535.65535.65535&quote; newVersion=&quote;4.31.0.0&quote; /&gt;
            		&lt;/dependentAssembly&gt;
             ]]>
             </code>
             Will make sure that there only exists one asseblyIdentity per dependentAssembly
             <h3>_elementAction</h3>
             Marks the action that effects the element when merging. Default action is <see cref="F:Meridium.Lib.Xml.ElementAction.CloneIfMissing"/>.
             <p>
             If set to <see cref="F:Meridium.Lib.Xml.ElementAction.DoNotAddIfMissing"/> the element is not added if it is missing. Only used as a marker.
             Ex.
             <code><![CDATA[ 
            		<handlers>
            			<clear _elementAction="doNotAddIfMissing"/>
            			<add name="ImageVaultFile" path="ImageVaultFiles/*" verb="*" type="ImageStoreNET.Classes.Handlers.ImageVaultFileHandler, ImageStoreNET"
            				_valueAttributes="type" _elementInsertPosition="afterSibling,first"/>
            		</handlers>
             ]]>
             </code>
             Will add the add element after the clear element if it exists. If the clear element doesn't exist, it will ignore it 
             and place it first instead (see the _elementInsertPosition).
             </p>
             <p>
             If set to <see cref="F:Meridium.Lib.Xml.ElementAction.RemoveParent"/> it will locate the parent of the element and remove it.
             Ex.
             <code><![CDATA[
             <dependentAssembly>
                 <assemblyIdentity name="ImageVault.Core" _uniqueElementInParent="" _elementAction="removeParent"/>
             </dependentAssembly>
             ]]></code>
             Will remove the dependentAssembly element that contains the assemblyIdentity with @name set to ImageVault.Core
             </p>
             <p>If set to <see cref="F:Meridium.Lib.Xml.ElementAction.RemoveChildren"/> it will remove any existing children in the destination and remove them.
             Ex.
             <code><![CDATA[
             <lookupProvider address="lookup" _elementAction="RemoveChildren"/>
             ]]></code>
             </p>
             <h3>_if and _unless</h3>
             <p>Can be set to a value to enable/disable the merge/copy of the specific node.
             Values false,no,0,'' (empty) (any casing) is interpreted as false, any other value is true.
             If _if is specified and value is false then the node is skipped.
             If _unless is specifiec and value is false then the node is skipped.
             If both _if and _unless is specified the node is skipped unless if is true and unless is false.
             
             Ex.
             <code><![CDATA[
             <root>
            		<elem _if="true"/><!--Node will be copied-->
            		<elem _if="false"/><!--node will not be copied-->
            		<elem _unless="true"/><!--node will not be copied-->
            		<elem _uness="false"/><!--Node will be copied-->
            		<elem _if="true" _uness="false"/><!--Node will be copied-->
             ]]></code>
             </p>
             <h3>_removeAttributes</h3>
             <p> Marks the supplied attributes as value attributes (not used to identify a match) and removes them from the merge destination.
             </p>
             </remarks>
             <param name="dest">The node to merge to</param>
             <param name="src">The node to merge from</param>
             <returns>true if merge went ok, false if an error occurred, then it is better to clone than merging.</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.InnerMergeXml(Meridium.Lib.Xml.XmlUtil.MergeNodeHelper,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="srcHelper"></param>
            <param name="dest">Xml which should be updated</param>
            <returns></returns>
            <exception cref="T:System.Xml.XmlException">If child has NodeType Text but is no XmlText.</exception>
            <exception cref="T:System.NotImplementedException">If cannot merge text into destination with more than one item.</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ApplicationException">If lastSibling.ParentNode is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.UpdateAttributeValues(Meridium.Lib.Xml.XmlUtil.MergeNodeHelper,System.Xml.XmlNode)">
            <summary>
            Updates the attributes on the dest node
            </summary>
            <param name="srcHelper">The <see cref="T:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper"/> for the node</param>
            <param name="dest">The destination <see cref="T:System.Xml.XmlNode"/>
            </param>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.AddMissingCommentsBeforeElement(System.Collections.Generic.List{System.Xml.XmlComment},System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Adds a list of comments before the node if the comments don't already exists
            </summary>
            <param name="commentsToAdd">The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Xml.XmlComment"/> to add</param>
            <param name="node">The <see cref="T:System.Xml.XmlNode"/> to add them before or null if the comments should be added last</param>
            <param name="parent">The parent <see cref="T:System.Xml.XmlNode"/> where the comments should be added as a child.</param>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.AddMissingCommentsAfterElement(System.Collections.Generic.List{System.Xml.XmlComment},System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Adds missing comments after a specific node
            </summary>
            <param name="commentsToAdd">The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Xml.XmlComment"/> to add</param>
            <param name="node">The <see cref="T:System.Xml.XmlNode"/> to add them after or null if they should be appended to the end of the parent.</param>
            <param name="parent">The parent <see cref="T:System.Xml.XmlNode"/> where the comments should be added as a child.</param>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.AddXmlAttributes(System.Xml.XmlNode,System.Xml.XmlAttributeCollection)">
            <summary>
            Adds the xml attribute list to the supplied xmlelement.
            If the attribute exists, it will be overwritten.
            </summary>
            <param name="element">The XmlNode to add the element to</param>
            <param name="attributes">The Attribute collection to add</param>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.AddXmlAttributes(System.Xml.XmlNode,System.Xml.XmlAttributeCollection,System.Boolean)">
            <summary>
            Adds the xml attribute list to the supplied xmlelement
            </summary>
            <param name="element">The XmlNode to add the element to</param>
            <param name="attributes">The Attribute collection to add</param>
            <param name="overwrite">If we shoud overwrite existing attributes</param>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.AddXmlAttributes(System.Xml.XmlNode,System.Xml.XmlAttributeCollection,System.Boolean,System.String[])">
            <summary>
            Adds the xml attribute list to the supplied xmlelement
            </summary>
            <param name="element">The XmlNode to add the element to</param>
            <param name="attributes">The Attribute collection to add</param>
            <param name="overwrite">If we shoud overwrite existing attributes</param>
            <param name="ignoreAttributeNames">Contains a list of all attribute names that not should be copied</param>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.BooleanToString(System.Boolean)">
            <summary>
            Convert a bool value to string
            </summary>
            <param name="val">the boolean to convert to string</param>
            <returns>.</returns>
        </member>
        <member name="T:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper">
            <summary>
            This class provides help functions when merging xml nodes.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.XmlAttributeValueAttributes">
            <summary>
            Used by MergeXml method
            Set this attribute to a csv list of all attributes that should be treated as value attributes.
            These will be ignored when matching a xmlnode
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.XmlAttributeElementInsertPosition">
            <summary>
            Used by MergeXml method
            Set this attribute to a value that describes the position of the inserted element
            relative to its siblings.
            Possible values
            first Will be added to the top of children
            last Will be added to the end
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.XmlAttributeDoNotOverwriteAttributes">
            <summary>
            Used by MergeXml method
            Set this attribute to a value that describes the attribute names of value
            attributes that should not be overwritten by a merge.
            These attributes will automatically be added to the _valueAttribute list
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.XmlAttributeUniqueElementInParentAttribute">
            <summary>
            Used by MergeXml method
            Set this attribute to a element that should exists as the unique element (of that name)
            in the parent.
            These attributes will automatically be added to the _valueAttribute list
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.XmlAttributeElementAction">
            <summary>
            Used by MergeXml method
            Set this attribute to a element to specify the elementAction
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.XmlAttributeAppendToAttribute">
            <summary>
            Used by MergeXml method
            Set this attribute to the name of the attribute that the string shopuld be appenden to
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.XmlAttributeAppendToAttributeDelimiter">
            <summary>
            Used by MergeXml method in combination with XmlAttributeAppendToAttribute
            Set the value that should be used as delimeted when appending
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.XmlAttributeIf">
            <summary>
            Gets the XmlAttributeIf of the <see cref="T:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.XmlAttributeUnless">
            <summary>
            Gets the XmlAttributeUnless of the <see cref="T:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper._falseSwitchValues">
            <summary>
            Gets the _falseSwitchValues of the <see cref="T:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper._doNotOverwriteAttributes">
            <summary>
            The list of attribute names that we shouldn't overwrite
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper._appendAttributes">
            <summary>
            List of append attributes
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.AppendAttributeDelimiter">
            <summary>
            Get/Sets the string that should be used when appending
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.SystemAttributeNames">
            <summary>
            Contains a list of all system attributes.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.#ctor(System.Xml.XmlNode)">
            <summary>
            Creates the MergeNodeHelper 
            </summary>
            <param name="node">The xmlNode to act as helper for</param>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.ParseCsvString(System.String)">
            <summary>
            Parse the supplied comma separated string and returns an array of the parsed items...
            </summary>
            <param name="csv"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.ShouldOverwriteAttribute(System.String)">
            <summary>
            Checks if an attribute should be overwritten or not.
            </summary>
            <param name="attributeName">The name of the attribute</param>
            <returns>True if it is ok to overwrite the attribute, false otherwize</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.ShouldAppendAttribute(System.String)">
            <summary>
            Check if the attribute should be appended
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.ContainsChildWithAction(Meridium.Lib.Xml.ElementAction)">
            <summary>
            Returns a value indicating whether the specified <see cref="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.ElementAction"/>
             is contained in the <see cref="T:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper"/>.
            </summary>
            <param name="action">The <see cref="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.ElementAction"/> to locate in the 
            <see cref="T:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper"/>.</param>
            <returns><b>true</b> if the <i>ElementAction</i> parameter is a member 
            of the <see cref="T:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.Node">
            <summary>
            The node to act as hepler for
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.ValueAttributes">
            <summary>
            The list of csv
            </summary>
        </member>
        <member name="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.ElementInsertPosition">
            <summary>
            Gets the ElementInsertPosition of the node
            </summary>
        </member>
        <member name="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.ElementAction">
            <summary>
            Gets the ElementAction of the MergeNodeHelper
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.Unless">
            <summary>
            Gets the Unless of the MergeNodeHelper
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.If">
            <summary>
            Gets the If of the MergeNodeHelper
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.DoMerge">
            <summary>
            Gets the DoMerge of the MergeNodeHelper
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.IgnoreAttributeNames">
            <summary>
            Gets the list of attributenames that should be ignored when matching an element node
            </summary>
        </member>
        <member name="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.ShouldUpdateValues">
            <summary>
            Should we update any of the attributes of the node if we merge it?
            </summary>
        </member>
        <member name="P:Meridium.Lib.Xml.XmlUtil.MergeNodeHelper.IsUniqueElementInParent">
            <summary>
            True if the element should be the only existing element in the parent of it's type
            </summary>
        </member>
        <member name="T:Meridium.Lib.Xml.MergeResult">
            <summary>
            
            </summary>
        </member>
        <member name="P:Meridium.Lib.Xml.MergeResult.Success">
            <summary>
            Get/Sets the Success of the MergeResult
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Xml.MergeResult.RemoveParent">
            <summary>
            Get/Sets the RemoveParent of the MergeResult
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Xml.Serialization.IXmlSerializerMemberInfo">
            <summary>
            The IXmlSerializerMemberInfo interface 
            </summary>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.IXmlSerializerMemberInfo.GetValue(System.Object)">
            <summary>
            Gets the value from the member
            </summary>
            <param name="obj">The object to get the value from.</param>
            <returns>The value retrieved from the object</returns>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.IXmlSerializerMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the member
            </summary>
            <param name="obj">The object to set the value on </param>
            <param name="value">The value to set</param>
        </member>
        <member name="P:Meridium.Lib.Xml.Serialization.IXmlSerializerMemberInfo.Name">
            <summary>
            Gets the Name of the IXmlSerializerMemberInfo
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Xml.Serialization.IXmlSerializerMemberInfo.Type">
            <summary>
            Gets the Type of the IXmlSerializerMemberInfo
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Text.TokenizerGroupTokenList">
            <summary>
            Contains a collection of <see cref="T:Meridium.Lib.Text.TokenizerGroupToken"/> objects
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:Meridium.Lib.Text.TokenizerTokenList">
            <summary>
            Contains a collection of <see cref="T:Meridium.Lib.Text.TokenizerToken"/> objects
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerTokenList.AllowOverlappingGroups">
            <summary>
            If we should allow overlapping groups in the list.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.#ctor">
            <summary>
            Creates an instance of the TokenizerTokenList
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.#ctor(System.Boolean)">
            <summary>
            Creates a TokenizerTokenList
            </summary>
            <param name="allowOverlappingGroups">If we should allow overlapping groups in the list.</param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.Add(Meridium.Lib.Text.TokenizerToken)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="tokenizerToken"></param>
            <returns>The index where the token was inserted</returns>
            <remarks>The token will be inserted on the correct place in the list to make sure that the list 
            is kept in the right order.</remarks>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.AddRange(Meridium.Lib.Text.TokenizerTokenList)">
            <summary>
            Adds a range of TokenizerTokens
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.Remove(Meridium.Lib.Text.TokenizerToken)">
            <summary>
            Removes the segment from the collection
            </summary>
            <param name="tokenizerToken"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.GetIndex(Meridium.Lib.Text.TokenizerToken)">
            <summary>
            Gets the index where the supplied object exists
            </summary>
            <param name="tokenizerToken"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.Insert(System.Int32,Meridium.Lib.Text.TokenizerToken)">
            <summary>
            Inserts a TokenizerToken in the list at the given index.
            </summary>
            <param name="index"></param>
            <param name="tokenizerToken"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.GetInsertIndex(System.Int32,System.Int32)">
            <summary>
            Gets the index where a TokenizerToken should be inserted within the given parameters
            </summary>
            <param name="tokenStartIndex">the startindex of the inserted token</param>
            <param name="tokenEndIndex">the endindex of the inserted token</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.GetTokenAt(System.Int32)">
            <summary>
            Gets the token at the supplied index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.Sort">
            <summary>
            Sorts the TokenizerTokenList
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.Clone(Meridium.Lib.Text.GroupTokenList)">
            <summary>
            Creates a Clone of the list
            </summary>
            <param name="groupTokens">Contains a list of already cloned GroupTokens</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.GetEnumeratorForGroupingToken(Meridium.Lib.Text.GroupToken)">
            <summary>
            Creates an enumerator that enumerates all TokenizerTokens that has a specific GroupingToken
            </summary>
            <param name="groupingToken">The grouping Token to look for</param>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.GetEnumeratorForGroupingToken(Meridium.Lib.Text.GroupToken,System.Boolean)">
            <summary>
            Creates an enumerator that enumerates all TokenizerTokens that has a specific GroupingToken
            </summary>
            <param name="groupingToken">The grouping Token to look for</param>
            <param name="backwards">If we should iterate from the end of the list</param>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.GetLastTokenByGroupingToken(Meridium.Lib.Text.GroupToken)">
            <summary>
            Gets the last TokenizerToken that has the supplied grouping token.
            </summary>
            <param name="groupingToken">The grouping Token to look for</param>
            <returns>The last Token in the list that has the supplied groupingToken or null if no
            Token has the supplied GroupToken</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.GetFirstTokenByGroupingToken(Meridium.Lib.Text.GroupToken)">
            <summary>
            Gets the first TokenizerToken that has the supplied grouping token.
            </summary>
            <param name="groupingToken">The grouping Token to look for</param>
            <returns>The first Token in the list that has the supplied groupingToken or null if no
            Token has the supplied GroupToken</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.OnInsert(System.Int32,System.Object)">
            <summary>
            Fires when an item is added to the collection
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.OnRemove(System.Int32,System.Object)">
            <summary>
            Fires when an item is removed from the collection
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Fires when an item is set in the collection
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenList.OnValidate(System.Object)">
            <summary>
            Fires when an item in the collection is validated
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerTokenList.Item(System.Int32)">
            <summary>
            Indexes the items in the collection
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerGroupTokenList._parent">
            <summary>
            Defines the parent owner
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.#ctor(Meridium.Lib.Text.TokenizerGroupToken)">
            <summary>
            Creates an instance of the TokenizerGroupTokenList
            </summary>
            <param name="parent">the parent TokenizerGroupToken</param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.#ctor">
            <summary>
            Creates an instance of the TokenizerGroupTokenList
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.CreateEmptyTokenAt(System.Int32,Meridium.Lib.Text.GroupToken)">
            <summary>
            Creates an empty token at the supplied index.
            </summary>
            <param name="index">The index of the token insertion in the string.</param>
            <param name="groupingToken">The grouping token of the new TokenizerGroupToken</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.Add(Meridium.Lib.Text.TokenizerGroupToken)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="tokenizerGroupToken"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.Remove(Meridium.Lib.Text.TokenizerGroupToken)">
            <summary>
            Removes the segment from the collection
            </summary>
            <param name="tokenizerGroupToken"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.GetIndex(Meridium.Lib.Text.TokenizerGroupToken)">
            <summary>
            Gets the index where the supplied object exists
            </summary>
            <param name="tokenizerGroupToken"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.Insert(System.Int32,Meridium.Lib.Text.TokenizerGroupToken)">
            <summary>
            Inserts a TokenizerGroupToken in the list at the given index.
            </summary>
            <param name="index"></param>
            <param name="tokenizerGroupToken"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.GetGroupTokenAt(System.Int32)">
            <summary>
            Gets the innermost token at the supplied index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.IsInGroup(System.Int32)">
            <summary>
            Returns true if the index is inside a group relation
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.IsInGroup(Meridium.Lib.Text.TokenizerToken)">
            <summary>
            Returns true if the token intersects a group relation
            </summary>
            <param name="token">The token to check</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.IsInGroup(System.Int32,System.Int32)">
            <summary>
            Returns true if the supplied range intersects a group relation
            </summary>
            <param name="startIndex">the startindex of the range</param>
            <param name="stopIndex">the stopindex (first not included index in range) of the range</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.IsInGroupContents(System.Int32)">
            <summary>
            Returns true if the index is inside a group relation. GroupTokens are not included.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.IsInGroupContents(Meridium.Lib.Text.TokenizerToken)">
            <summary>
            Returns true if the token intersects inside a group relation. GroupTokens are not included.
            </summary>
            <param name="token">The token to check</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.IsInGroupContents(System.Int32,System.Int32)">
            <summary>
            Returns true if the supplied range intersects inside a group relation. GroupTokens are not included.
            </summary>
            <param name="startIndex">the startindex of the range</param>
            <param name="stopIndex">the stopindex (first not included index in range) of the range</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.IndexOf(Meridium.Lib.Text.TokenizerGroupToken)">
            <summary>
            Gets the index of the supplied token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.NextSibling(Meridium.Lib.Text.TokenizerGroupToken)">
            <summary>
            Gets the NextSibling of the supplied token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.PreviousSibling(Meridium.Lib.Text.TokenizerGroupToken)">
            <summary>
            Gets the previous sibling of the supplied token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.Clone(Meridium.Lib.Text.GroupTokenList)">
            <summary>
            Clones the TokenizerGroupTokenList
            </summary>
            <param name="groupTokens">a list of already cloned groupTokens</param>
            <returns>The cloned TokenizerGroupTokenList</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.Clone(Meridium.Lib.Text.TokenizerGroupToken,Meridium.Lib.Text.GroupTokenList)">
            <summary>
            Clones the TokenizerGroupTokenList
            </summary>
            <param name="parent">the parent TokenizerGroupToken</param>
            <param name="groupTokens">a list of already cloned groupTokens</param>
            <returns>The cloned TokenizerGroupTokenList</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.OnInsert(System.Int32,System.Object)">
            <summary>
            Fires when an item is added to the collection
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.OnRemove(System.Int32,System.Object)">
            <summary>
            Fires when an item is removed from the collection
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Fires when an item is set in the collection
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.OnValidate(System.Object)">
            <summary>
            Fires when an item in the collection is validated
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.OnClearComplete">
            <summary>
            Updates the _parentList of the contained items when a clear is done
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Updates the _parentList of the contained items when an insert is done
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Updates the _parentList of the contained items when a remove is done
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupTokenList.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Updates the _parentList of the contained items when the item is set
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupTokenList.Item(System.Int32)">
            <summary>
            Indexes the items in the collection
            </summary>
        </member>
        <member name="T:Meridium.Lib.Text.StringTokenizerEnumerator">
            <summary>
            Summary description for StringTokenizerEnumerator.
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.StringTokenizerEnumerator._tokenizer">
            <summary>
            Refers to the tokenizer that is beeing iterated
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.StringTokenizerEnumerator._groupPosition">
            <summary>
            Keeps track of the current position in the group list
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.StringTokenizerEnumerator._tokenPosition">
            <summary>
            Keeps track of the crurrent position in the token list
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.StringTokenizerEnumerator._lastEndIndex">
            <summary>
            Keeps track of the last returned end string index
            </summary>
            <remarks>Is 0 if no value has been returned yet</remarks>
        </member>
        <member name="F:Meridium.Lib.Text.StringTokenizerEnumerator._mode">
            <summary>
            Defines how the iteration is made
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizerEnumerator.#ctor(Meridium.Lib.Text.StringTokenizer)">
            <summary>
            Creates a Enumerator that enumerates the tokenizer with mode set to DefaultText
            </summary>
            <param name="tokenizer"></param>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizerEnumerator.#ctor(Meridium.Lib.Text.StringTokenizer,Meridium.Lib.Text.TokenizerEnumerationModes)">
            <summary>
            Creates an instance of the StringTokenizerEnumerator class.
            </summary>
            <param name="tokenizer">The tokenizer to iterate</param>
            <param name="mode">the iteration mode</param>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizerEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizerEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizerEnumerator.GetEnumerator">
            <summary>
            Gets the enumerator of the enumerable
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.StringTokenizerEnumerator.NextTokenIndex">
            <summary>
            Gets the index for the next Token (delimiter). If no more tokens are found -1 is returned
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.StringTokenizerEnumerator.NextGroupIndex">
            <summary>
            Gets the index for the next group. If no more groups are found -1 is returned
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.StringTokenizerEnumerator.ReturnText">
            <summary>
            Is true if we should return text, false if we should return tokens
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.StringTokenizerEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns></returns>
            <remarks>After an enumerator is created or after a Reset, MoveNext 
            must be called to advance the enumerator to the first element of 
            the collection before reading the value of Current; otherwise, 
            Current is undefined.
            Current also throws an exception if the last call to MoveNext 
            returned false, which indicates the end of the collection.
            Current does not move the position of the enumerator and 
            consecutive calls to Current return the same object until either 
            MoveNext or Reset is called.
            An enumerator remains valid as long as the collection remains 
            unchanged. If changes are made to the collection, such as adding, 
            modifying or deleting elements, the enumerator is irrecoverably 
            invalidated and the next call to MoveNext or Reset throws an 
            InvalidOperationException. If the collection is modified between 
            MoveNext and Current, Current will return the element that it is set 
            to, even if the enumerator is already invalidated.</remarks>
            <exception cref="T:System.InvalidOperationException">The enumerator is 
            positioned before the first element of the collection or after the 
            last element.</exception>
        </member>
        <member name="T:Meridium.Lib.IO.IOUtil">
            <summary>
            Summary description for IOUtil.
            </summary>
            <remarks>
            2011-04-04 dan: Created
            </remarks>
        </member>
        <member name="F:Meridium.Lib.IO.IOUtil.AllowedFilenameChars">
            <summary>
            Contains the allowed characters in a filename
            </summary>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies data from one stream to another
            </summary>
            <param name="inStream">The <see cref="T:System.IO.Stream"/> to read from</param>
            <param name="outStream">The <see cref="T:System.IO.Stream"/> to write to</param>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.ReadStream(System.IO.Stream)">
            <summary>
            Reads a stream and returns the data
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.GetNewUniqueFileInfo(System.String,System.Int32,System.String)">
            <summary>
            Returns a FileInfo to a file in the supplied directory that doesn't exists. The filename is randomized 
            and is <code>nrOfCharacters</code> long with the same extension that the supplied one.
            </summary>
            <param name="path">The path of the target folder</param>
            <param name="nrOfCharacters">length of the filename (excluding extension)</param>
            <param name="extension">extension of the file</param>
            <returns>An unique FileInfo</returns>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.GetNewUniqueFileInfo(System.IO.DirectoryInfo,System.Int32,System.String)">
            <summary>
            Returns a FileInfo to a file in the supplied directory that doesn't exists. The filename is randomized 
            and is <code>nrOfCharacters</code> long with the same extension that the supplied one.
            </summary>
            <param name="dir">The target folder</param>
            <param name="nrOfCharacters">length of the filename (excluding extension)</param>
            <param name="extension">extension of the file, or null if extension should be omitted</param>
            <returns>An unique FileInfo</returns>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.GetNewUniqueDirectoryInfo(System.IO.DirectoryInfo,System.Int32)">
            <summary>
            Creates a new DirectoryInfo in the supplied parent folder
            </summary>
            <param name="parent"></param>
            <param name="nrOfCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.RandomizeFileName(System.Int32)">
            <summary>
            Returns a randomized filename of the number of characters that is supplied.
            </summary>
            <param name="nrOfCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.GetRandomFileCharacter">
            <summary>
            Returns a random coosen filename character
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.EmptyDirectory(System.String,System.Boolean)">
            <summary>
            Empties the supplied directory of files and subdirectories (if recursive)
            </summary>
            <param name="dir">The directory to empty</param>
            <param name="recursive">If subdirs should be removed as well as the files..</param>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.EmptyDirectory(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Empties the supplied directory of files and subdirectories (if recursive)
            </summary>
            <param name="dir">The <see cref="T:System.IO.DirectoryInfo"/> to empty</param>
            <param name="recursive">If subdirs should be removed as well as the files..</param>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.EmptyDirectory(System.String,System.Boolean,System.Boolean)">
            <summary>
            Empties the supplied directory of files and subdirectories (if recursive)
            </summary>
            <param name="dir">The directory to empty</param>
            <param name="recursive">If subdirs should be removed as well as the files..</param>
            <param name="ignoreAttributes">If all items attribute should be set to <see cref="F:System.IO.FileAttributes.Normal"/> before deleting.</param>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.EmptyDirectory(System.IO.DirectoryInfo,System.Boolean,System.Boolean)">
            <summary>
            Empties the supplied directory of files and subdirectories (if recursive)
            </summary>
            <param name="dir">The <see cref="T:System.IO.DirectoryInfo"/> to empty</param>
            <param name="recursive">If subdirs should be removed as well as the files..</param>
            <param name="ignoreAttributes">If all items attribute should be set to <see cref="F:System.IO.FileAttributes.Normal"/> before deleting.</param>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.FindDirectoryByName(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Returns a DirectoryInfo to a file in the supplied directory that doesn't exists. The filename is randomized 
            and is <code>nrOfCharacters</code> long with the same extension that the supplied one.
            </summary>
            <param name="dir">The root folder to start searching in</param>
            <param name="directoryName">The directoryName to search for</param>
            <param name="recursive">If subdirs should be searched</param>
            <returns>A DirectoryInfo if there is at match, null otherwise</returns>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.RemoveIllegalFileNameCharacters(System.String)">
            <summary>
            Parses the given string and removes all characters that is not allowed in filenames.
            Even the dot (.) is stripped.
            </summary>
            <param name="name">The name to parse</param>
            <returns>The parsed string</returns>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.GetTextFileEncoding(System.String)">
            <summary>
            Calculates the encoding of the text file based on the byte order mark (bom) found in the beginning of the file.
            </summary>
            <param name="filePath">The path to the file to examine.</param>
            <returns>The found encoding</returns>
        </member>
        <member name="M:Meridium.Lib.IO.IOUtil.ValidateUtf8Bytes(System.Byte[])">
            <summary>
            Validates the buffer and checks if it is a valid utf-8 encoding or not.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
            <remarks>See http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8 for spec.
            </remarks>
        </member>
        <member name="T:Meridium.Lib.Configuration.CommandLine.Parser">
            <summary>Implementation of a command-line parsing class.  Is capable of
            having switches registered with it directly or can examine a registered
            class for any properties with the appropriate attributes appended to
            them.</summary>
            <remarks>Author: Ray Hayes, http://www.codeproject.com/KB/recipes/commandlineparser.aspx</remarks>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.ExtractApplicationName">
            <summary>
            Extracts the application name from the commandline
            </summary>
            <exception cref="T:System.ApplicationException">If unable to parse commandline to extract application name .</exception>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.AddSwitch(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.AddSwitch(System.String[],System.String)">
            <summary>
            
            </summary>
            <param name="names"></param>
            <param name="description"></param>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.Parse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.InternalValue(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>Parser</b> class.
            </summary>
            <param name="commandLine"></param>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <b>Parser</b> class.
            </summary>
            <param name="commandLine"></param>
            <param name="classForAutoAttributes"></param>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Meridium.Lib.Configuration.CommandLine.Parser"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Meridium.Lib.Configuration.CommandLine.Parser"/>.</returns>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.ApplicationName">
            <summary>
            Gets the ApplicationName of the Parser
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.Parameters">
            <summary>
            Gets the Parameters of the Parser
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.Switches">
            <summary>
            Gets the Switches of the Parser
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> item identified by the given arguments of the Parser
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.UnhandledSwitches">
            <summary>This function returns a list of the unhandled switches
            that the parser has seen, but not processed.</summary>
            <value></value>
            <remark>The unhandled switches are not removed from the remainder
            of the command-line.</remark>
        </member>
        <member name="T:Meridium.Lib.Configuration.CommandLine.Parser.SwitchInfo">
            <summary>A simple internal class for passing back to the caller
            some information about the switch.  The internals/implementation
            of this class has privillaged access to the contents of the
            SwitchRecord class.</summary>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.SwitchInfo.#ctor(System.Object)">
            <summary>
            Constructor for the SwitchInfo class.  Note, in order to hide to the outside world
            information not necessary to know, the constructor takes a System.Object (aka
            object) as it's registering type.  If the type isn't of the correct type, an exception
            is thrown.
            </summary>
            <param name="rec">The SwitchRecord for which this class store information.</param>
            <exception cref="T:System.ArgumentException">Thrown if the rec parameter is not of
            the type SwitchRecord.</exception>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchInfo.Name">
            <summary>
            Gets the Name of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchInfo.Description">
            <summary>
            Gets the Description of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchInfo.Aliases">
            <summary>
            Gets the Aliases of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchInfo.Type">
            <summary>
            Gets the Type of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchInfo.Value">
            <summary>
            Gets the Value of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchInfo.InternalValue">
            <summary>
            Gets the InternalValue of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchInfo.IsEnum">
            <summary>
            Gets the IsEnum of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchInfo.Enumerations">
            <summary>
            Gets the Enumerations of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord">
            <summary>
            The SwitchRecord is stored within the parser's collection of registered
            switches.  This class is private to the outside world.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>SwitchRecord</b> class.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <b>SwitchRecord</b> class.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="type"></param>
            <exception cref="T:System.ArgumentException">If currently only Ints, Bool and Strings are supported.</exception>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.Initialize(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.BuildPattern">
            <summary>
            
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.AddAlias(System.String)">
            <summary>
            
            </summary>
            <param name="alias"></param>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.Notify(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.Value">
            <summary>
            Gets the Value of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.InternalValue">
            <summary>
            Gets the InternalValue of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.Name">
            <summary>
            Get/Sets the Name of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.Description">
            <summary>
            Get/Sets the Description of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.Type">
            <summary>
            Gets the Type of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.Aliases">
            <summary>
            Gets the Aliases of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.Pattern">
            <summary>
            Gets the Pattern of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.SetMethod">
            <summary>
            Sets the SetMethod of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.GetMethod">
            <summary>
            Sets the GetMethod of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.PropertyOwner">
            <summary>
            Sets the PropertyOwner of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.ReadValue">
            <summary>
            Gets the ReadValue of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.Parser.SwitchRecord.Enumerations">
            <summary>
            Gets the Enumerations of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Text.TokenizerEnumerationModes">
            <summary>
            The TokenizerEnumerationModes enumerator describes how the enumerator will behave
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerEnumerationModes.ReturnText">
            <summary>
            Tells the enumerator to return the text in the token
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerEnumerationModes.ReturnTokens">
            <summary>
            Tells the enumerator to return the token
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerEnumerationModes.IncludeTokens">
            <summary>
            Includes the normal tokens in the iteration
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerEnumerationModes.IncludeDelimiters">
            <summary>
            Includes the delimiter tokens in the iteration
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerEnumerationModes.IncludeGroups">
            <summary>
            Includes the group tokens in the iteration
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerEnumerationModes.DefaultText">
            <summary>
            Default text will return all normal tokens as text (compare to a split)
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerEnumerationModes.DefaultTokens">
            <summary>
            Default tokens will iterate tokens, delimiters and groups and return their tokens
            </summary>
        </member>
        <member name="T:Meridium.Lib.Configuration.ConfigurationSectionWithAppSettingsBase">
            <summary>
            Summary description for ConfigurationSectionWithAppSettingsBase.
            </summary>
            <remarks>
            2011-08-10 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.IsReadOnly">
            <summary>
            
            </summary>
            <returns>True if read is only, otherwise false.</returns>
        </member>
        <member name="M:Meridium.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>ConfigurationSectionWithAppSettingsBase</b> class.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:Meridium.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.GetAppSettingsAsUri(System.String)">
            <summary>
            Gets the app settings value as an Uri
            </summary>
            <param name="key">The key of the appsettings to get</param>
            <returns>The found uri or null if no uri was entered.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">if unable to parse url .</exception>
        </member>
        <member name="M:Meridium.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.GetXPathForAppSettingsValue(System.String)">
            <summary>
            Gets the XPath expression for a specific app settings value
            </summary>
            <param name="key">The name(key) of the app setting</param>
            <returns>The xpath epression pointing to the value of the specific app setting</returns>
        </member>
        <member name="M:Meridium.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.ReadFromConfiguration``1">
            <summary>
            Reads the configuration section from the current configuration or returns a newed up instance if it is missing
            </summary>
            <typeparam name="T">The type of configuration section to read</typeparam>
            <returns>The read or newed up instance.</returns>
        </member>
        <member name="P:Meridium.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.ApplicationSettings">
            <summary>
            Get/Sets the ApplicationSettings of the CoreConfigurationSection
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.AppSettings">
            <summary>
            Gets the AppSettings of the CoreConfigurationSection
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.SectionName">
            <summary>
            Get/Sets the SectionName of the ConfigurationSectionWithAppSettingsBase
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Reflection.ReflectionUtil">
            <summary>
            Summary description for ReflectionUtil2.
            </summary>
            <remarks>
            2011-02-16 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.FindAllConcreteImplementations(System.Reflection.Assembly,System.Type)">
            <summary>
            Iterates all types in the assembly and returns a dictionary containing of all interfaces and concrete implementations inheriting from the baseInterface
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to search in</param>
            <param name="baseInterface">The <see cref="T:System.Type"/> of the interface</param>
            <remarks>Will only find interfaces that implements the <paramref name="baseInterface"/> and their concrete implementations</remarks>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetShortTypeAndAssemblyName(System.Type)">
            <summary>
            Gets the short type and assemblyname of the specified type
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.InvokeMethod(System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Invokes the method of the type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the method</param>
            <param name="name">The name of the method to invoke</param>
            <param name="instance">The instance to invoke the method on</param>
            <param name="parameters">The parameters to pass to the method</param>
            <returns>The returnvalue from the method call</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetProperty(System.Type,System.String,System.Object)">
            <summary>
            Gets the property from the instance
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the property</param>
            <param name="name">The name of the property</param>
            <param name="instance">The instance to get the value from</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.SetProperty(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Sets the property in the instance
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the property</param>
            <param name="name">The name of the property</param>
            <param name="instance">The instance to set the value to</param>
            <param name="value">The value to set</param>
            <returns>null</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetField(System.Type,System.String,System.Object)">
            <summary>
            Gets the field from the instance
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the field</param>
            <param name="name">The name of the field</param>
            <param name="instance">The instance to get the value from</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.SetField(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Sets the field in the instance
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the field</param>
            <param name="name">The name of the field</param>
            <param name="instance">The instance to set the value to</param>
            <param name="value">The value to set</param>
            <returns>null</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invokes the static method of the type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the method</param>
            <param name="name">The name of the method to invoke</param>
            <param name="parameters">The parameters to pass to the method</param>
            <returns>The returnvalue from the method call</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.InvokeMember(System.Type,System.String,System.Object,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Invokes the member
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the member</param>
            <param name="name">The name of the member</param>
            <param name="instance">The instance to invoke on</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to use</param>
            <param name="parameters">The <see cref="T:System.Object"/> array to pass as parameters</param>
            <returns>The returnvalue</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the attribute from the supplied memberinfo that is of the supplied attribute type.
            </summary>
            <remarks>This will only search the supplied memberInfo, not inherited ones.</remarks>
            <exception cref="T:Meridium.Lib.Reflection.MemberReflectionException">If the member has more than one instance of the attribute.</exception>
            <param name="memberInfo">The memberinfo to get the attribute from</param>
            <param name="attributeType">The type of attribute to get, if null type of attribute is irrelevant.</param>
            <returns>The first attribute of the matching type</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets the attribute from the supplied memberinfo that is of the supplied attribute type.
            </summary>
            <exception cref="T:Meridium.Lib.Reflection.MemberReflectionException">If the member has more than one instance of the attribute.</exception>
            <param name="memberInfo">The memberinfo to get the attribute from</param>
            <param name="attributeType">The type of attribute to get, if null type of attribute is irrelevant.</param>
            <param name="inherit">If the types inheritance chain should be searched for attributes</param>
            <returns>The first attribute of the matching type</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the attribute from the supplied memberinfo that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attribute from</param>
            <returns>The first attribute of the matching type</returns>
            <typeparam name="TAttribute">The type of attribute to get</typeparam>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attribute from the supplied memberinfo that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attribute from</param>
            <param name="inherit">If the types inheritance chain should be searched for attributes</param>
            <returns>The first attribute of the matching type</returns>
            <typeparam name="TAttribute">The type of attribute to get</typeparam>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetAttributes(System.Reflection.MemberInfo)">
            <summary>
            Gets the attributes from the supplied type that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attributes from</param>
            <returns>An array of attributes</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attributes from the supplied type that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attributes from</param>
            <param name="inherit">If the types inheritance chain should be searched for attributes</param>
            <returns>An array of attributes</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the attributes from the supplied type that is of the supplied attribute type.
            </summary>
            <remarks>This will only search the supplied memberInfo, not inherited ones.</remarks>
            <param name="memberInfo">The memberinfo to get the attributes from</param>
            <param name="attributeType">The type of attribute to get, if null type of attribute is irrelevant.</param>
            <returns>An array of attributes</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets the attributes from the supplied type that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attributes from</param>
            <param name="attributeType">The type of attribute to get, if null type of attribute is irrelevant.</param>
            <param name="inherit">If the types inheritance chain should be searched for attributes</param>
            <returns>An array of attributes</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attributes from the supplied type that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attributes from</param>
            <param name="inherit">If the types inheritance chain should be searched for attributes</param>
            <returns>An array of attributes</returns>
            <typeparam name="TAttribute">The type of attribute to get</typeparam>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetNullableValueType(System.Type)">
            <summary>
            Gets the nullable type if the supplied type is a nullable
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check for nullable</param>
            <returns>The underlying type if the supplied type is a <see cref="T:System.Nullable`1"/>;
            otherwize the supplied type is returned.</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.IsNullable(System.Type)">
            <summary>
            Checks if the supplied type is a <see cref="T:System.Nullable`1"/>
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check</param>
            <returns>True if it is <see cref="T:System.Nullable`1"/>, otherwise false.</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.ConvertValueFromNullable(System.Object)">
            <summary>
            Converts a value from a <see cref="T:System.Nullable`1"/> value
            </summary>
            <param name="value">The value to convert</param>
            <returns>The converted value or if the value is not a <see cref="T:System.Nullable`1"/>, the original value.</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetMethodFullName">
            <summary>
            Gets the full name of the calling method.
            for instance, 
            
            string Meridium.Reflection.ReflectionUtil.GetMethodFullName()
            </summary>
            <returns>The methods full name on the format <c>returnType methodName(parameters)</c></returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetMethodFullName(System.Reflection.MethodBase)">
            <summary>
            Gets the full name of the method
            for instance, 
            
            string Meridium.Reflection.ReflectionUtil.GetMethodFullName()
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/> to get the full name for</param>
            <returns>The methods full name on the format <c>returnType methodName(parameters)</c></returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetCalleeTypeMethodFullName">
            <summary>
            Gets the full name of the callee types method
            </summary>
            <returns>The methods full name on the format <c>returnType methodName(parameters)</c></returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetCalleeStackTrace(System.Boolean)">
            <summary>
            Gets the full stacktrace to the calle types method call.
            </summary>
            <param name="fNeedFileInfo">true to capture the file name, line number, and column number; otherwise, false.</param>
            <returns>The <see cref="T:System.Diagnostics.StackTrace"/> for the callee</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetCalleeType">
            <summary>
            Gets the type of the class that called the method that calls this method. :)
            </summary>
            <returns>The type of the method that called the method that we call the GetCalleType method from.
            Or null if the calling type is the first one.</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetCalleeTypeFrame">
            <summary>
            Gets the stack frame of the closest callee type. (the frame that called the method that calls this method)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetCalleeTypeFrameIndex(System.Diagnostics.StackTrace)">
            <summary>
            Finds the closest stackframe that belongs to the type that called the
            current code and is different from the current type.
            </summary>
            <param name="trace"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetCalleeAssembly">
            <summary>
            Gets the assembly of the class that called the assembly of the method that calls 
            this method. :)
            </summary>
            <returns>The <see cref="T:System.Reflection.Assembly"/> of the method that called the assembly of the
            method that we call this method fromor null if the call started from the calling assembly</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetDerivedTypes(System.Type)">
            <summary>
            Gets all types that is directly or indirectly derived from the supplied baseType in the basetypes assembly.
            </summary>
            <param name="baseType">the baseType to use as a reference</param>
            <returns>An array of derived types in the assembly</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetDerivedTypes(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets all types from the assembly that is directly or indirectly derived from the supplied baseType
            </summary>
            <param name="assembly">The assembly to search</param>
            <param name="baseType">the baseType to use as a reference</param>
            <returns>An array of derived types in the assembly</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetTypes(System.Reflection.Assembly)">
            <summary>
            Gets the loadable types from the assembly
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to load the types from.</param>
            <returns>An <see cref="T:System.Type"/> array of the loadable types in the assembly.</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetDefaultValue(System.Type)">
            <summary>
            Gets the default uninitialized value of the specific type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the value for</param>
            <returns>The default value of the specified type</returns>
            <remarks>The default value is for reference types null, and for value types it's the same as the call to the
            default constructor.</remarks>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.IsNonPrimitiveStruct(System.Type)">
            <summary>
            Checks if the supplied type is a Struct (primitives are ignored)
            </summary>
            <param name="type">The type to check</param>
            <returns>True if it is struct, otherwise false. Primitives (Int32, Single etc) are not passed.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetMemberInfoType(System.Reflection.MemberInfo)">
            <summary>
            Finds the Type of the supplied <see cref="T:System.Reflection.MemberInfo"/>
            </summary>
            <param name="info">The <see cref="T:System.Reflection.MemberInfo"/> to get the type for (can be a <see cref="T:System.Reflection.FieldInfo"/> or a <see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns>The found <see cref="T:System.Type"/> </returns>
            <exception cref="T:System.Exception">If cannot get the Type from the supplied memberInfo.</exception>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> that matches the name in the type
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to search for the property in</param>
            <param name="name">The name of the property</param>
            <returns>The found <see cref="T:System.Reflection.PropertyInfo"/> or null if no match was found.</returns>
            <remarks>If we find multiple properties with the same name in the object (inherited and declared with new), 
            we will get the topmost PropertyInfo in the inheritance chain</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null
             or if <paramref name="name"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.LookupType(System.String,System.Type)">
            <summary>
            Looks up the typename and finds a corresponding type
            </summary>
            <param name="typeName">The name of the type to find</param>
            <param name="baseType">The <see cref="T:System.Type"/> that the type inherits from</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of types that matches</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.ReflectionUtil.LookupType(System.String,System.Type,System.Reflection.Assembly)">
            <summary>
            Looks up the typename and finds a corresponding type
            </summary>
            <param name="typeName">The name of the type to find</param>
            <param name="baseType">The <see cref="T:System.Type"/> that the type inherits from</param>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to search in</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of types that matches</returns>
        </member>
        <member name="T:Meridium.Lib.Reflection.MemberInfoExtensions">
            <summary>
            Summary description for MemberInfoExtensions.
            </summary>
            <remarks>
            2011-09-16 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Reflection.MemberInfoExtensions.GetFullName(System.Reflection.MemberInfo)">
            <summary>
            Gets the full name on the current member info
            </summary>
            <param name="info">The <see cref="T:System.Reflection.MemberInfo"/> to get the full name for</param>
            <returns>The full name including declaring type</returns>
        </member>
        <member name="T:Meridium.Lib.ReferenceObjectComparer">
            <summary>
            A object comparer that compares two objects and sees if they are based on the same reference.
            </summary>
            <remarks>
            This is useful for classes that wraps other classes and we want to compare the original instance with the
            wrapped instance.
            2010-09-28 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.ReferenceObjectComparer.AreSameReferenceObject(System.Object,System.Object)">
            <summary>
            Compares two objects and compares if they are based on the same reference object.
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>True if they originates from the same instance, false otherwize.</returns>
        </member>
        <member name="T:Meridium.Lib.IO.PartialStream">
            <summary>
            </summary>
        </member>
        <member name="M:Meridium.Lib.IO.PartialStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <b>PartialStream</b> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to wrap</param>
            <param name="start">The start position of the partial stream</param>
            <param name="length">The length of the partial stream</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="start"/> is out of range
             or if <paramref name="length"/> is out of range.</exception>
        </member>
        <member name="M:Meridium.Lib.IO.PartialStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Meridium.Lib.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the new position in the stream.
            </summary>
            <param name="offset">
            A byte offset relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.
            </param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.ApplicationException">If unable to handle SeekOrigin.</exception>
        </member>
        <member name="M:Meridium.Lib.IO.PartialStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the partial stream
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.IO.PartialStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. 
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <exception cref="T:System.IO.IOException">If unable to write to stream, would write past end of partial stream.</exception>
        </member>
        <member name="M:Meridium.Lib.IO.PartialStream.SetLength(System.Int64)">
            <summary>
            Attempts to set a new length, but since the length of the partial stream was locked when the stream was
            constructed, this method will throw a <see cref="T:System.NotSupportedException"/> exception.
            </summary>
            <param name="value">
            The new length of the stream. This parameter is ignored.
            </param>
            <exception cref="T:System.NotSupportedException">
            	<para>Thrown in all cases because the length is fixed.</para>
            </exception>
        </member>
        <member name="M:Meridium.Lib.IO.PartialStream.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <b>PartialStream</b>.
            </summary>
            <param name="disposing">Set to <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Meridium.Lib.IO.PartialStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Meridium.Lib.IO.PartialStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Meridium.Lib.IO.PartialStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Meridium.Lib.IO.PartialStream.Length">
            <summary>
            Gets the length of the stream.
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.IO.PartialStream.Position">
            <summary>
            Gets or sets the current position of the stream.
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Xml.XmlAttributeExtensions">
            <summary>
            Summary description for XmlAttributeExtensions.
            </summary>
            <remarks>
            2011-10-07 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Xml.XmlAttributeExtensions.IsNamespaceDeclaration(System.Xml.XmlAttribute)">
            <summary>
            Checks the XmlAttribute if it is a xmlns declaration or not.
            </summary>
            <param name="att"></param>
            <returns>True if namespace is declaration, otherwise false.</returns>
        </member>
        <member name="T:Meridium.Lib.Reflection.MemberReflectionException">
            <summary>
            Summary description for MemberReflectionException.
            </summary>
        </member>
        <member name="T:Meridium.Lib.BaseException">
            <summary>
            Summary description for BaseException.
            </summary>
        </member>
        <member name="M:Meridium.Lib.BaseException.#ctor(System.String)">
            <summary>
            Creates an instance of the BaseException class.
            </summary>
            <param name="message">Message for the exception</param>
        </member>
        <member name="M:Meridium.Lib.BaseException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the BaseException class.
            </summary>
            <param name="message">Message for the exception</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Meridium.Lib.BaseException.#ctor">
            <summary>
            Creates an instance of the BaseException class.
            </summary>
        </member>
        <member name="M:Meridium.Lib.BaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>BaseException</b> class.
            </summary>
            <param name="info">The object that holds the serialized object data. </param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Meridium.Lib.BaseException.ToString">
            <summary>
            Converts the exception to a descriptive text
            </summary>
            <returns>A descriptive text</returns>
        </member>
        <member name="M:Meridium.Lib.BaseException.ToString(System.String)">
            <summary>
            Converts the exception to a descriptive text
            </summary>
            <param name="innerMessage">An inner message to be prepended to the description</param>
            <returns>A descriptive text</returns>
        </member>
        <member name="M:Meridium.Lib.BaseException.ExceptionToString(System.Exception)">
            <summary>
            Creates a string of the exception that is a combination of all inner exceptions found, 
            plus the stacktrace
            </summary>
            <param name="ex">The exception to read from </param>
            <returns>A descriptive text</returns>
        </member>
        <member name="M:Meridium.Lib.BaseException.ExceptionToString(System.Exception,System.String)">
            <summary>
            Creates a string of the exception that is a combination of all inner exceptions found, 
            plus the stacktrace
            </summary>
            <param name="ex">The exception to read from </param>
            <param name="innerMessage">An inner message to be prepended to the list of messages</param>
            <returns>A descriptive text</returns>
        </member>
        <member name="F:Meridium.Lib.Reflection.MemberReflectionException.Member">
            <summary>
            Get/Sets the Member of the <see cref="T:Meridium.Lib.Reflection.MemberReflectionException"/>
            The member defines the 
            </summary>
        </member>
        <member name="M:Meridium.Lib.Reflection.MemberReflectionException.#ctor(System.Reflection.MemberInfo,System.String)">
            <summary>
            Creates an instance of the MemberReflectionException class.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Reflection.MemberReflectionException.#ctor(System.Reflection.MemberInfo,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <b>MemberReflectionException</b> class.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that the exception refers to.</param>
            <param name="message">The message of the exception</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> </param>
        </member>
        <member name="M:Meridium.Lib.Reflection.MemberReflectionException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Meridium.Lib.Reflection.MemberReflectionException"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Meridium.Lib.Reflection.MemberReflectionException"/>.</returns>
        </member>
        <member name="T:Meridium.Lib.Context`1">
            <summary>
            A generic context class for allowing nested contexts.
            </summary>
            <remarks>
            2008-05-14 Administrator: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Context`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <b>Context</b> class.
            </summary>
            <param name="instance">The instance to populate the context with</param>
        </member>
        <member name="M:Meridium.Lib.Context`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Meridium.Lib.Context`1.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <b>Context&lt;T&gt;</b>.
            </summary>
            <param name="disposing">Set to <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Meridium.Lib.Context`1.CurrentInstanceOrDefault(`0)">
            <summary>
            Gets the current instance (if any exists) or the default one if no context exists.
            </summary>
            <param name="defaultInstance">The instance to return if no current context exists.</param>
            <returns>The <see cref="P:Meridium.Lib.Context`1.CurrentInstance"/> if a <see cref="P:Meridium.Lib.Context`1.CurrentContext"/> exists; otherwize the <paramref name="defaultInstance"/> is returned</returns>
        </member>
        <member name="M:Meridium.Lib.Context`1.Clear">
            <summary>
            Clears all present contexts 
            </summary>
        </member>
        <member name="M:Meridium.Lib.Context`1.Add(`0)">
            <summary>
            Adds a instance to the context
            </summary>
            <remarks>Equivalent to creating a new Context&lt;T&gt;(item)</remarks>
            <param name="item">The item to add</param>
            <returns>The created <see cref="T:Meridium.Lib.Context`1"/> </returns>
        </member>
        <member name="P:Meridium.Lib.Context`1.CurrentContext">
            <summary>
            Gets the CurrentContext of the Context
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Context`1.CurrentInstance">
            <summary>
            Gets the CurrentInstance of the Context
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentException">If no CurrentContext exist.</exception>
        </member>
        <member name="P:Meridium.Lib.Context`1.Instance">
            <summary>
            Gets the Instance of the Context
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.StringUtil">
            <summary>
            Summary description for StringUtil.
            </summary>
            <remarks>
            2011-10-06 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.StringUtil.FilterCharactersFromString(System.String,System.String)">
            <summary>
            Parses the given string and removes all characters that are present in the characters string
            </summary>
            <param name="name">The name to parse</param>
            <param name="characters">The characters to remove</param>
            <returns>The filtered string</returns>
        </member>
        <member name="M:Meridium.Lib.StringUtil.FilterCharactersFromString(System.String,System.String,System.Boolean)">
            <summary>
            Parses the given string and filters it according to the parameter settings
            </summary>
            <param name="name">The name to parse</param>
            <param name="characters">The character filter</param>
            <param name="remove">If true, all characters found in the characters string will be removed, all others
            will be kept. If false all characters found in the characters string will be kept, 
            all others will be removed.</param>
            <returns>The filtered string</returns>
        </member>
        <member name="M:Meridium.Lib.StringUtil.FixNewLine(System.String)">
            <summary>
            Analyses the input string and checks for any NewLine markers and converts the 
            present NewLine markers with the one in Environment.NewLine
            </summary>
            <param name="data">The string to fix</param>
            <returns>The fixed string</returns>
        </member>
        <member name="M:Meridium.Lib.StringUtil.IsNewlineCharacter(System.Char)">
            <summary>
            Checks if the supplied character is a newline character
            </summary>
            <param name="c"></param>
            <returns><b>true</b> if the char is a newline character, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Meridium.Lib.StringUtil.FindText(System.String,System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Finds the the text between the two delimiters.
            </summary>
            <param name="source">The source text to search in</param>
            <param name="startDelimiter">the string that marks the start delimiter</param>
            <param name="endDelimiter">the string that marks the end delimiter</param>
            <param name="startAfterNewline">If true, the delimiters are ended with a linefeed. text is parsed after that.</param>
            <param name="foundText">The text that was found between the delimiters or an empty string if no text or delimiters where found</param>
            <returns>The source text without found text and delimiters</returns>
        </member>
        <member name="T:Meridium.Lib.Configuration.ConnectionStringUtil">
            <summary>
            Provides utility methods for connection strings
            </summary>
            <remarks>
            2011-03-08 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Configuration.ConnectionStringUtil.FindConnectionNameForContextAndHost(System.String)">
            <summary>
            Finds a matching connection in the config file for the supplied dataname and host
            </summary>
            <param name="contextName">The full name of the context class</param>
            <returns></returns>
        </member>
        <member name="T:Meridium.Lib.Collections.NameValueCollectionExtensions">
            <summary>
            Summary description for NameValueCollectionExtensions.
            </summary>
            <remarks>
            2011-08-10 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Collections.NameValueCollectionExtensions.GetBool(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            
            </summary>
            <param name="col"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Meridium.Lib.RandomUtil">
            <summary>
            Summary description for RandomUtil.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:Meridium.Lib.RandomUtil.DefaultStringLength">
            <summary>
            Gets the DefaultStringLength of the <see cref="T:Meridium.Lib.RandomUtil"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.RandomUtil.DefaultStringLengthVariation">
            <summary>
            Gets the DefaultStringLengthVariation of the <see cref="T:Meridium.Lib.RandomUtil"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.RandomUtil.DefaultArrayLength">
            <summary>
            Gets the DefaultArrayLength of the <see cref="T:Meridium.Lib.RandomUtil"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.RandomUtil.DefaultPercentageNullableNullOccurrance">
            <summary>
            Gets the DefaultPercentageNullableNullOccurrance of the <see cref="T:Meridium.Lib.RandomUtil"/>
            </summary>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomBoolean">
            <summary>
            Gets a random boolean value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomNullableBoolean">
            <summary>
            Gets a random nullable boolean
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomString">
            <summary>
            Gets a randomized string of default length
            </summary>
            <returns>The randomized length</returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomString(System.Int32)">
            <summary>
            Gets a randomized string of the approximate length
            </summary>
            <param name="length">The approximate length of the string</param>
            <returns>The randomized string</returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomString(System.Int32,System.Int32)">
            <summary>
            Gets a randomized string of the approximate length
            </summary>
            <param name="length">The approximate length of the string</param>
            <param name="delta">The variation delta.</param>
            <returns>The randomized length</returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomLetterAndDigitString(System.Int32)">
            <summary>
            Generates a string of randomized letters and digits of the supplied length
            </summary>
            <param name="length">The length of the randomized string</param>
            <returns>The randomized <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomLetterAndDigitString(System.String[])">
            <summary>
            Generates a string of randomized letters and digits
            </summary>
            <param name="notValidValues">The <see cref="T:System.String"/> array that contains the values that the randomized string shouldn't have.</param>
            <returns>The randomized <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomLetterAndDigitString(System.Int32,System.String[])">
            <summary>
            Generates a string of randomized letters and digits of the supplied length
            </summary>
            <param name="length">The length of the randomized string</param>
            <param name="notValidValues">The <see cref="T:System.String"/> array that contains the values that the randomized string shouldn't have.</param>
            <returns>The randomized <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomLetterString(System.Int32,System.Int32)">
            <summary>
            Gets a randomized letter string
            </summary>
            <param name="length">The approximate length of the string</param>
            <param name="delta">The variation delta.</param>
            <returns>The randomized <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomLetterAndDigit">
            <summary>
            Gets a randomized letter or digit sign.
            </summary>
            <returns>The randomized letter or digit sign.</returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.IsValidValue(System.String,System.String[])">
            <summary>
            Checks if the supplied value is a valid one
            </summary>
            <param name="value">The value to check</param>
            <param name="notValidValues">The list of non valid values</param>
            <returns>True if valid is value, otherwise false.</returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomString(System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            Returns a randomized string of the number of characters that is supplied.
            </summary>
            <param name="length">The approximate length of the string</param>
            <param name="delta">The variation delta.</param>
            <param name="validCharacters">A string containing the possible characters in the string</param>
            <param name="notValidValues">The <see cref="T:System.String"/> array that contains the values that the randomized string shouldn't have.</param>
            <returns>The randomized <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomString(System.Int32,System.String)">
            <summary>
            Returns a randomized string of the number of characters that is supplied.
            </summary>
            <param name="length">The approximate length of the string</param>
            <param name="validCharacters">A string containing the possible characters in the string</param>
            <returns>The randomized <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomInt32">
            <summary>
            Returns a random <see cref="T:System.Int32"/>
            </summary>
            <returns>The random <see cref="T:System.Int32"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomInt32(System.Int32)">
            <summary>
            Returns a non negative random number in the given interval 
            </summary>
            <param name="maxValue">The exclusive upper bound of the random numer returned. 
            maxValue must be greater than or equal to 0.</param>
            <returns>The random <see cref="T:System.Int32"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomInt32(System.Int32,System.Int32)">
            <summary>
            Returns a random number in the given interval 
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned</param>
            <param name="maxValue">The exclusive upper bound of the random numer returned. 
            maxValue must be greater than or equal to minvalue.</param>
            <returns>The random <see cref="T:System.Int32"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomInt32(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns a random number in the given interval 
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned</param>
            <param name="maxValue">The exclusive upper bound of the random numer returned. 
            maxValue must be greater than or equal to minvalue.</param>
            <param name="notValidValues">A <see cref="T:System.Int32"/> array of non valid values</param>
            <returns>The random <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomInt32Except(System.Int32[])">
            <summary>
            Returns a random integer that is not one of the supplied ones
            </summary>
            <param name="notValidValues">A <see cref="T:System.Int32"/> array of non valid values</param>
            <returns>The random <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomSByte">
            <summary>
            Returns a random <see cref="T:System.SByte"/>
            </summary>
            <returns>The random <see cref="T:System.SByte"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomSByte(System.SByte)">
            <summary>
            Returns a non negative random number in the given interval 
            </summary>
            <param name="maxValue">The exclusive upper bound of the random numer returned. 
            maxValue must be greater than or equal to 0.</param>
            <returns>The random <see cref="T:System.SByte"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomSByte(System.SByte,System.SByte)">
            <summary>
            Returns a random number in the given interval 
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned</param>
            <param name="maxValue">The exclusive upper bound of the random numer returned. 
            maxValue must be greater than or equal to minvalue.</param>
            <returns>The random <see cref="T:System.SByte"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomEnum(System.Type)">
            <summary>
            Gets a randomized enum value
            </summary>
            <param name="type">The type of enum to randomize a value from</param>
            <returns>The randomized <see cref="T:System.Enum"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomDecimal">
            <summary>
            Gets a randomized decimal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomDouble">
            <summary>
            Gets a randomized double
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomDouble(System.Double)">
            <summary>
            Gets a random double value from zero to the supplied maxvalue
            </summary>
            <param name="maxValue">The limit of the returned value</param>
            <returns>The randomized <see cref="T:System.Double"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.IsTrue(System.Int32)">
            <summary>
            Returns true if a randomized number from 1 to 100 is less or equal to the given value.
            </summary>
            <param name="percent">The percentage that this method will return true</param>
            <returns>True if it is true, otherwise false.</returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomChar">
            <summary>
            Returns a random character
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomByte">
            <summary>
            Returns a random byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomSingle">
            <summary>
            Returns a random single
            </summary>
            <returns>The random <see cref="T:System.Single"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomSingle(System.Single)">
            <summary>
            Returns a random single
            </summary>
            <param name="maxValue">The maximum <see cref="T:System.Single"/> to return</param>
            <returns>The random <see cref="T:System.Single"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomSingle(System.Single,System.Single)">
            <summary>
            Returns a random value between minValue and maxValue
            </summary>
            <param name="minValue">The minimum <see cref="T:System.Single"/> value to return</param>
            <param name="maxValue">The maximum <see cref="T:System.Single"/> value to return</param>
            <returns>The randomized <see cref="T:System.Single"/> </returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomInt64">
            <summary>
            returns a random Int64
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomInt64(System.Int64,System.Int64)">
            <summary>
            Returns a random value between minValue and maxValue
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomInt64(System.Int64)">
            <summary>
            Returns a random value between 0 and maxValue
            </summary>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomInt16">
            <summary>
            Returns a random Int16
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomTimeSpan">
            <summary>
            Gets a randomized TimeSpan
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomDateTime">
            <summary>
            Returns a randomized DateTime
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomColor">
            <summary>
            Gets a random color
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.InstanceArrayItems(System.Array,System.Type,System.Int32[])">
            <summary>
            Fills the array with random instances
            </summary>
            <param name="array">The <see cref="T:System.Array"/> to fill</param>
            <param name="type">The <see cref="T:System.Type"/> of object to instance in the array</param>
            <param name="indices">The current indicies that points to the iteration location</param>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomObject(System.Type)">
            <summary>
            Gets a random object instance of the specified type
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of object to instance</param>
            <returns>The instanced object</returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomItem``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Gets a random item from the list
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/> to get the item from</param>
            <param name="startIndex">The start position where we should start our selection</param>
            <param name="length">The number of items to include in the selection</param>
            <typeparam name="T">The type of item contained in the list</typeparam>
            <returns>The selected <typeparamref name="T"/> or default(T) if the list is null or empty</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="length"/> is out of range (<em>Has to be a non negative value</em>).</exception>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomItem``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets a random item from the list
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/> to get the item from</param>
            <returns>The selected <typeparamref name="T"/> or default(T) if the list is null or empty</returns>
            <typeparam name="T">The type of item to get.</typeparam>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomItem(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Gets a random item from the list
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/> to get the item from</param>
            <param name="startIndex">The start position where we should start our selection</param>
            <param name="length">The number of items to include in the selection</param>
            <returns>The selected item or null if the list is null or empty</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="length"/> is out of range (<em>Has to be a non negative value</em>).</exception>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomItem(System.Collections.IList)">
            <summary>
            Gets a random item from the supplied list
            </summary>
            <param name="list">The <see cref="T:System.Collections.IList"/> to get the item from.</param>
            <returns>The selected item or null if the list is null or empty</returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomItem(System.String)">
            <summary>
            Gets a random character from a string
            </summary>
            <param name="s">The string to randomize an item from</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If cannot get a random char in a null or empty string.</exception>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomItems``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="no"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If cannot get .</exception>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.Random``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.Random``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Selects a random item from the list and calls the supplied function
            </summary>
            <param name="list"></param>
            <param name="func"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If cannot select a random item on an empty list.</exception>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.Random``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <param name="list"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If cannot select a random item on an empty list.</exception>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.Random``2(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0,``1})">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="count"></param>
            <param name="func"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If cannot select a random item on an empty list.</exception>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomDateTime(System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="minDate"></param>
            <param name="maxDate"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.RandomUtil.GetRandomString(System.Nullable{System.Int32})">
            <summary>
            Gets a random string with an exact length
            </summary>
            <param name="exactLength">The length of the string, null will return null, 0 will return <see cref="F:System.String.Empty"/>.</param>
            <returns>The random string</returns>
        </member>
        <member name="T:Meridium.Lib.EnumUtil">
            <summary>
            A helper class for handling enums
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:Meridium.Lib.EnumUtil.ParseValidEnum(System.Type,System.String)">
            <summary>
            Parses the supplied enum value
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of enum to parse</param>
            <param name="value">The string value of the enum</param>
            <returns>The found enum value or null if no matchin enum was found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.EnumUtil.ParseValidEnum(System.Type,System.String,System.Object)">
            <summary>
            Parses the supplied enum value
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of enum to parse</param>
            <param name="value">The string value of the enum</param>
            <param name="defaultValue">The value to return if parsing was not successful</param>
            <returns>The found enum value or null if no matchin enum was found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.EnumUtil.GetEnumInfo(System.Enum)">
            <summary>
            Gets the <see cref="T:System.Reflection.FieldInfo"/> for the supplied enum value
            </summary>
            <param name="value">The <see cref="T:System.Enum"/> to get the info for</param>
            <returns>The found <see cref="T:System.Reflection.FieldInfo"/> </returns>
        </member>
        <member name="M:Meridium.Lib.EnumUtil.GetDisplayName(System.Enum)">
            <summary>
            Gets the DisplayName from the enum
            </summary>
            <param name="value">The <see cref="T:System.Enum"/> value to get the DisplayName from</param>
            <returns>The displayName of the enum value</returns>
            <exception cref="T:System.ArgumentException">If the enum misses the <see cref="T:System.ComponentModel.DisplayNameAttribute"/></exception>
        </member>
        <member name="M:Meridium.Lib.EnumUtil.Parse(System.Type,System.String)">
            <summary>
            Parses the supplied string as the supplied enum type
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of enum to parse as</param>
            <param name="stringToParse">The string to parse</param>
            <returns>The parsed enum value</returns>
            <remarks>Also supports flag enums with | separating the different values</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stringToParse"/> is null.</exception>
        </member>
        <member name="M:Meridium.Lib.EnumUtil.AddValue(System.Object,System.Object)">
            <summary>
            Adds an enum value to the original value
            </summary>
            <param name="originalValue">The original enum value</param>
            <param name="valueToAdd">The value to add</param>
            <returns>The sum of the values</returns>
            <exception cref="T:System.NotSupportedException">If cannot Add values of type .</exception>
        </member>
        <member name="M:Meridium.Lib.EnumUtil.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the supplied enumValue.
            </summary>
            <param name="enumValue">The enum value to parse</param>
            <returns>A <see cref="T:System.String"/> that represents the supplied <paramref name="enumValue"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="enumValue"/> is null.</exception>
            <remarks>Flag values are separated by |</remarks>
        </member>
        <member name="T:Meridium.Lib.Configuration.CommandLine.CommandLineSwitchAttribute">
            <summary>Implements a basic command-line switch by taking the
            switching name and the associated description.</summary>
            <remarks>Author: Ray Hayes, http://www.codeproject.com/KB/recipes/commandlineparser.aspx</remarks>
            <example></example>
            <remark>Only currently is implemented for properties, so all
            auto-switching variables should have a get/set method supplied.</remark>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.CommandLineSwitchAttribute.#ctor(System.String,System.String)">
            <summary>Attribute constructor.</summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.CommandLineSwitchAttribute.Name">
            <summary>Accessor for retrieving the switch-name for an associated
            property.</summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.CommandLineSwitchAttribute.Description">
            <summary>Accessor for retrieving the description for a switch of
            an associated property.</summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Configuration.CommandLine.CommandLineAliasAttribute">
            <summary>
            This class implements an alias attribute to work in conjunction
            with the <see cref="T:Meridium.Lib.Configuration.CommandLine.CommandLineSwitchAttribute">CommandLineSwitchAttribute</see>
            attribute.  If the CommandLineSwitchAttribute exists, then this attribute
            defines an alias for it.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Configuration.CommandLine.CommandLineAliasAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>CommandLineAliasAttribute</b> class.
            </summary>
            <param name="alias"></param>
        </member>
        <member name="P:Meridium.Lib.Configuration.CommandLine.CommandLineAliasAttribute.Alias">
            <summary>
            Gets the Alias of the CommandLineAliasAttribute
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.ComponentModel.EnumDefaultNullValueAttribute">
            <summary>
            Marks the default null value of the enum
            </summary>
            <remarks>
            2007-03-02 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="M:Meridium.Lib.ComponentModel.EnumDefaultNullValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>EnumDefaultNullValueAttribute</b> class.
            </summary>
            <param name="defaultNullValue">The name of the enum item that is the default null value.</param>
        </member>
        <member name="P:Meridium.Lib.ComponentModel.EnumDefaultNullValueAttribute.DefaultNullValue">
            <summary>
            Gets the DefaultNullValue of the EnumDefaultNullValueAttribute
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Xml.ElementAction">
            <summary>
            Defines the different actions that can be executed for a merge node operation
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementAction.NotParsed">
            <summary>
            The action is not parsed
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementAction.CloneIfMissing">
            <summary>
            Will clone the source element if missing
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementAction.Default">
            <summary>
            Default behaivour is to clone is missing
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementAction.DoNotAddIfMissing">
            <summary>
            Element is only a marker and can be ignored if missing
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementAction.RemoveParent">
            <summary>
            Remove parent node (including all children)
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementAction.RemoveChildren">
            <summary>
            Removes any children of the matched element in the destination
            </summary>
        </member>
        <member name="F:Meridium.Lib.Xml.ElementAction.Remove">
            <summary>
            Removes the matched item
            </summary>
        </member>
        <member name="T:Meridium.Lib.Text.StringTokenizer">
            <summary>
            The StringTokenizer is an easy way of splitting a string by a set of string delimiters 
            and preserve grouping contexts in a string when splitting them.
            </summary>
            
            <example>
            <p>
            A simple example would be to split the string "Nisse, Kalle, Sven, Erik" by the delimiter "," 
            and letting the delimiter be greedy and eat surrouding whitespaces (this is the default behaviour 
            of StringTokenizer.)
            <code>
            StringTokenizer st = new StringTokenizer("Nisse, Kalle, Sven, Erik");
            foreach(string name in st) {
            	//do your thing...
            }
            </code>
            If you compare to String.Split we would need to trim the output of the split to get rid of the extra whitespaces.
            <c>Regex.Split("Nisse, Kalle, Sven, Erik",@"\s*,\s*");</c> would do the same this (this is infact how the Tokenizer works)
            </p>
            <p>
            Another example is the grouping context. Say that you have the text "RGB(123,22,0), RGB(1,2,255),RGB(128,128,128)"
            and would like to split by the comma, byt not inside the () grouping contexts. Here we would have some problems finding
            a correct regex to match our needs, since nesting is a problem with regex.
            Here is the simple solution.
            <code>
            StringTokenizer st = new StringTokenizer("RGB(123,22,0), RGB(1,2,255),RGB(128,128,128)");
            st.GroupingTokens.Add(new GroupToken("(",")"));
            foreach(string color in st) {
            	//do your thing...
            }
            </code>
            There is a shorthand to the one above where we use the StringTokenizer.DefaultGroupingTokenizer that gives us a clone
            of the DefaultGroupingTokenizer that groups by a set of grouping tokens.
            <code>
            StringTokenizer st = StringTokenizer.DefaultGroupingTokenizer;
            st.Source = "RGB(123,22,0), RGB(1,2,255),RGB(128,128,128)";
            foreach(string color in st) {
            	//do your thing...
            }
            </code>
            </p>
            <p>
            Case sensitivity
            TODO
            </p>
            <p>
            Getting the delimiter
            TODO
            </p>
            </example>
        </member>
        <member name="T:Meridium.Lib.Text.TokenizerGroupToken">
            <summary>
            Summary description for TokenizerGroupToken.
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerGroupToken.m_parsedTokens">
            <summary>
            Get/Sets the m_parsedTokens of the <see cref="T:Meridium.Lib.Text.TokenizerGroupToken"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerGroupToken.m_groups">
            <summary>
            Get/Sets the list of TokenizerGroups of the <see cref="T:Meridium.Lib.Text.TokenizerGroupToken"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerGroupToken.m_innerIndex">
            <summary>
            Get/Sets the m_innerIndex of the <see cref="T:Meridium.Lib.Text.TokenizerGroupToken"/>
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerGroupToken.m_innerLength">
            <summary>
            Get/Sets the m_innerLength of the <see cref="T:Meridium.Lib.Text.TokenizerGroupToken"/>
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.#ctor">
            <summary>
            Creates an empty TokenizerGroupToken
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.#ctor(Meridium.Lib.Text.TokenizerGroupToken,Meridium.Lib.Text.TokenizerToken,System.Text.RegularExpressions.GroupCollection)">
            <summary>
            Creates a new <see cref="T:Meridium.Lib.Text.TokenizerGroupToken"></see> instance.
            </summary>
            <param name="parentToken">Parent token.</param>
            <param name="startToken">Start token.</param>
            <param name="matchGroups">The <see cref="T:System.Text.RegularExpressions.GroupCollection"/> 
            that was identified when the token was found.</param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.#ctor(Meridium.Lib.Text.TokenizerGroupToken,Meridium.Lib.Text.TokenizerToken,Meridium.Lib.Text.TokenizerToken)">
            <summary>
            Creates a new <see cref="T:Meridium.Lib.Text.TokenizerGroupToken"></see> instance.
            </summary>
            <param name="parentToken">Parent token.</param>
            <param name="startToken">Start token.</param>
            <param name="endToken">End token.</param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.#ctor(Meridium.Lib.Text.TokenizerGroupToken,System.Int32,System.Int32,System.Int32,System.Int32,Meridium.Lib.Text.GroupToken,System.String,System.Text.RegularExpressions.GroupCollection)">
            <summary>
            Creates a new <see cref="T:Meridium.Lib.Text.TokenizerGroupToken"></see> instance.
            </summary>
            <param name="parentToken">Parent token.</param>
            <param name="startTokenIndex">Start token index.</param>
            <param name="startTokenLength">Length of the start token.</param>
            <param name="endTokenIndex">End token index.</param>
            <param name="endTokenLength">Length of the end token.</param>
            <param name="groupingToken">Grouping token.</param>
            <param name="source">Source.</param>
            <param name="matchGroups">The <see cref="T:System.Text.RegularExpressions.GroupCollection"/> 
            that was identified when the token was found.</param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.CopySettingsFromGroupToken(Meridium.Lib.Text.TokenizerGroupToken)">
            <summary>
            Copies the settings from group token.
            </summary>
            <param name="parentToken">Parent token.</param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.GetIndexOfDelimiter(System.Int32)">
            <summary>
            Gets the string Index of the delimiter at the supplied index in the tokenlist
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.GetIndexOfToken(System.Int32)">
            <summary>
            Gets the string index of the token at the supplied index in the tokenlist
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.SetDelimiters(System.String[])">
            <summary>
            Sets the delimiters of the tokenizer
            </summary>
            <param name="delimiters">the delimiters</param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.ParseTokens">
            <summary>
            Parses the values and populates the ParsedTokens property
            </summary>
            <returns>The parsed TokenizerTokenList</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.ParseMatches(System.Text.RegularExpressions.MatchCollection,Meridium.Lib.Text.GroupToken,System.Boolean)">
            <summary>
            Converts the matchcollection to a TokenizerToken list
            </summary>
            <param name="matches">The <see cref="T:System.Text.RegularExpressions.MatchCollection"/> to parse</param>
            <param name="groupingToken">Set to the groupingToken that groups a whole group. 
            If the match only is a start or end token, pass null to this parameter</param>
            <param name="ignoreTagMatchesInExpression">If we should ignore captured groups in the match for finding start/end tags.</param>
            <returns>The parsed <see cref="T:Meridium.Lib.Text.TokenizerTokenList"/> </returns>
            <exception cref="T:System.ApplicationException">If the match did not find a token, error in group expression. Set GroupToken.IgnoreTagMatchesInExpression to true to match the whole expression.
             or if the whole group expression can't contain more than two groups.</exception>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.IndexOf(System.String)">
            <summary>
            Reports the index of the first occurrence of a String, or one or more characters, within this instance.
            </summary>
            <remarks>Will include grouptokens in search but not group contents</remarks>
            <param name="value">The String to seek.</param>
            <returns>The index position of value if that string is found, or -1 if it is not. If value is Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.IndexOf(System.String,System.Int32)">
            <summary>
            Reports the index of the first occurrence of a String, or one or more characters, within this instance.
            </summary>
            <remarks>Will include grouptokens in search but not group contents</remarks>
            <param name="value">The String to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The index position of value if that string is found, or -1 if it is not. If value is Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Reports the index of the first occurrence of a String, or one or more characters, within this instance.
            </summary>
            <remarks>Will include grouptokens in search but not group contents</remarks>
            <param name="value">The String to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine. </param>
            <returns>The index position of value if that string is found, or -1 if it is not. If value is Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.IndexOf(System.String,System.Boolean)">
            <summary>
            Reports the index of the first occurrence of a String, or one or more characters, within this instance.
            </summary>
            <param name="value">The String to seek.</param>
            <param name="searchInGroupTokens">If search should include group tokens, group contents are never searched</param>
            <returns>The index position of value if that string is found, or -1 if it is not. If value is Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.IndexOf(System.String,System.Int32,System.Boolean)">
            <summary>
            Reports the index of the first occurrence of a String, or one or more characters, within this instance.
            </summary>
            <param name="value">The String to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="searchInGroupTokens">If search should include group tokens, group contents are never searched</param>
            <returns>The index position of value if that string is found, or -1 if it is not. If value is Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.IndexOf(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reports the index of the first occurrence of a String, or one or more characters, within this instance.
            </summary>
            <param name="value">The String to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine. </param>
            <param name="searchInGroupTokens">If search should include group tokens, group contents are never searched</param>
            <returns>The index position of value if that string is found, or -1 if it is not. If value is Empty, the return value is startIndex.</returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.GetEnumerable(Meridium.Lib.Text.GroupToken)">
            <summary>
            Gets the enumerator for iterating a specific groupingToken
            </summary>
            <param name="groupingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.SetEndToken(Meridium.Lib.Text.TokenizerToken)">
            <summary>
            Sets the endToken for this group
            </summary>
            <param name="endToken"></param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.GetModifiedValue(Meridium.Lib.Text.TokenizerGroupToken,Meridium.Lib.Text.TokenizerGroupToken,System.Boolean,System.Boolean)">
            <summary>
            Gets the modified value for the section
            </summary>
            <param name="startToken">The token that is the start of the modified part that we are to retrieve</param>
            <param name="endToken">The token that is the end of the modified part that we are to retrieve</param>
            <param name="addDataBeforeSelection">Should we get the data before the starttoken that is not part of the previous token?</param>
            <param name="addDataAfterSelection">Should we get the data after the endtoken that is not part of the following token?</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.GetModifiedValue">
            <summary>
            Gets the modified value of the whole TokenizerGroupToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.GetModifiedValue(System.Int32,System.Int32)">
            <summary>
            Gets the modified value from this TokenizerGroupToken from the supplied indexes
            </summary>
            <param name="startIndex">The startIndex of the value to get</param>
            <param name="endIndex">The endIndex of the value to get</param>
            <returns>The modified value</returns>
            <remarks>All indexes are relative to the original string</remarks>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.NextSibling">
            <summary>
            Gets the next sibling of the TokenizerGroupToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.PreviousSibling">
            <summary>
            Gets the previous sibling of the TokenizerGroupToken
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.Clone(Meridium.Lib.Text.GroupTokenList)">
            <summary>
            Clones the TokenizerGroupToken
            </summary>
            <param name="groupTokens">The list of cloned groupTokens</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.CopyFieldsToClone(Meridium.Lib.Text.TokenizerGroupToken,Meridium.Lib.Text.GroupTokenList)">
            <summary>
            Copies the fields of the TokenizerGroupToken to the clone
            </summary>
            <param name="clone">The clone to populate</param>
            <param name="groupTokens">The list of cloned groupTokens</param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerGroupToken.Split">
            <summary>
            Splits the TokenizerGroupToken into strings by the tokens Delimiter settings
            </summary>
            <returns>An array of found strings</returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.Delimiters">
            <summary>
            Get/sets the array of delimiters to tokenize by
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.DelimiterOptions">
            <summary>
            If any special options should be used for matching the delimiters (like case insensitive)
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.TreatDelimitersAsRegularExpressions">
            <summary>
            Tells if the delimiters should be treated as regular expressions or not
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.Count">
            <summary>
            Gets the number of tokens found in the string
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.Item(System.Int32)">
            <summary>
            Gets the token at the supplied index.
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.Item(System.Int32,System.Boolean)">
            <summary>
            Gets the token at the supplied index.
            if getDelimiter is true, the delimiter that follows the token is returned instead.
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.ParsedTokens">
            <summary>
            The list of parsed tokens (delimiters)
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.Groups">
            <summary>
            Gets the groups.
            </summary>
            <returns></returns>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.Parent">
            <summary>
            Gets the parent.
            </summary>
            <returns></returns>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.ParentList">
            <summary>
            Gets the parent list.
            </summary>
            <returns></returns>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.InnerIndex">
            <summary>
            Gets the index where the body in the group starts (gets the EndIndex of the first grouptoken)
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.InnerLength">
            <summary>
            Gets the Length of the innerValue
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.InnerEndIndex">
            <summary>
            The index of the Stop position for this token or the group if a related token is encountered.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.InnerValue">
            <summary>
            Gets the inner value.
            </summary>
            <returns></returns>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.Value">
            <summary>
            Gets or sets the value of the TokenizerGroupToken
            </summary>
            <returns></returns>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.ModifiedValue">
            <summary>
            Gets the modified value of the TokenizerGroupToken
            </summary>
            <returns></returns>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.StartToken">
            <summary>
            Get/Sets the start token.
            </summary>
            <returns></returns>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.EndToken">
            <summary>
            Get/Sets the EndToken
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.IncludeWhitespaceInDelimiters">
            <summary>
            If whitespaces should be included in delimiters, this is true
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.PostGroupText">
            <summary>
            Gets the text that is between this group an its next sibling, or if no
            next sibling exists, the text to the parents innerBody.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerGroupToken.PreGroupText">
            <summary>
            Gets the text that is between this group and its previous sibling, or if no 
            previous sibling exists, the text from the parents innerbody.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.#ctor">
            <summary>
            Creates an instance of the StringTokenizer class.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.#ctor(System.String)">
            <summary>
            Creates an instance of the StringTokenizer class.
            </summary>
            <param name="source">The string to tokenize</param>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.#ctor(System.String,System.String[])">
            <summary>
            Creates an instance of the StringTokenizer class.
            </summary>
            <param name="source">The string to tokenize</param>
            <param name="delimiters">The delimiters to tokenize by</param>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String[])">
            <summary>
            Creates an instance of the StringTokenizer class.
            </summary>
            <param name="source">The string to tokenize</param>
            <param name="delimiterOptions">If any special options should be used for matching the delimiters (like case insensitive)</param>
            <param name="delimiters">The delimiters to tokenize by</param>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.#ctor(System.String,System.String[],System.Text.RegularExpressions.RegexOptions,Meridium.Lib.Text.GroupTokenList,System.Text.RegularExpressions.RegexOptions,System.Boolean)">
            <summary>
            Creates an instance of the StringTokenizer class.
            </summary>
            <param name="source">The string to tokenize</param>
            <param name="delimiters">an array of delimiters</param>
            <param name="delimiterOptions">If any special options should be used for matching the delimiters (like case insensitive)</param>
            <param name="groupingTokens">if we should ignore delimiters inside groups, this array contains List of groupingTokens Example "{","}","(",")","[","]"</param>
            <param name="groupOptions">If any special options should be used for matching the grouping delimiters (like case insensitive)</param>
            <param name="includeWhitespaceInDelimiters">If whitespaces should be included in delimiters</param>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.SetSource(System.String)">
            <summary>
            Sets the source of the tokenizer
            </summary>
            <param name="source">The source to set</param>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.GetEnumerator">
            <summary>
            Gets an enumerator for the tokenizer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.GetEnumerator(Meridium.Lib.Text.TokenizerEnumerationModes)">
            <summary>
            Gets the enumerator for enumerating the tokenizer
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.GetTokenEnumerator">
            <summary>
            Gets an enumerator that enumerates all tokens (include delimiters, groups and items)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.Clone">
            <summary>
            Creates a complete clone using the CloneUtil.Clone method
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.CopyFieldsToClone(Meridium.Lib.Text.StringTokenizer)">
            <summary>
            Copies the fields to the clone
            </summary>
            <param name="clone"></param>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.GetGroupToken(System.Int32)">
            <summary>
            Gets the grouptoken found as the supplied no
            </summary>
            <param name="no"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.GetGroupTokenAt(System.Int32)">
            <summary>
            Gets the group token at the supplied index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.ParseGroups">
            <summary>
            Parses the Groups in the source string
            </summary>
            <returns>The groups found in the Tokenizer Source</returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.ConnectGroupTokens(Meridium.Lib.Text.TokenizerTokenList)">
            <summary>
            Recalculates the groupToken relations in the list. Removes mismatching group tokens and
            populates the hierarchial level of groups.
            </summary>
            <param name="foundGroupTokens">The list of found grouptokens</param>
            <returns>The final GroupList in hierarchial mode.</returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.FindRelatedGroupTokenAndPopulateList(Meridium.Lib.Text.TokenizerGroupTokenList,Meridium.Lib.Text.TokenizerTokenList,System.Int32,Meridium.Lib.Text.TokenizerToken,System.Int32)">
            <summary>
            Finds the related group token and populate list.
            </summary>
            <param name="list">the list to populate</param>
            <param name="foundGroupTokens">the list of Found group tokens that we are parsing.</param>
            <param name="startIndex">Start index of the current token in the foundGroupTokens list.</param>
            <param name="startToken">Start token to find matching endToken for.</param>
            <param name="level">Level of recursivity.</param>
            <returns>index of the found endToken in the foundGroupTokens list.</returns>
        </member>
        <member name="M:Meridium.Lib.Text.StringTokenizer.GroupingTokens_CollectionChanged(System.Object,System.EventArgs)">
            <summary>
            When the Grouptokens is changed, reset the parsed tokens
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Meridium.Lib.Text.StringTokenizer.Source">
            <summary>
            The string to tokenize
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.StringTokenizer.GroupingTokens">
            <summary>
            If we should ignore delimiters inside groups, this array contains List of groupingTokens 
            Example "{","}","(",")","[","]"
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.StringTokenizer.GroupOptions">
            <summary>
            If any special options should be used for matching the grouping delimiters (like case insensitive)
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.StringTokenizer.Groups">
            <summary>
            Gets the groups in the tokenizer
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.StringTokenizer.DefaultGroupingTokenizer">
            <summary>
            Gets a clone of the default grouping tokenizer that groups by () [] and {} (<see cref="P:Meridium.Lib.Text.GroupTokenList.DefaultGroupTokens"/>)
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.StringTokenizer.IgnoreMismatchingTokens">
            <summary>
            Get/Sets the IgnoreMismatchingTokens of the StringTokenizer
            </summary>
            <value>Set to true if any mismatching tokens should be ignored</value>
        </member>
        <member name="T:Meridium.Lib.Text.ItemToken">
            <summary>
            The item token describes an Item in a string tokenizer.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.ItemToken.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Creates an itemToken
            </summary>
            <param name="index">Start index of the token</param>
            <param name="length">Length of the token</param>
            <param name="source">The source to use for the token</param>
        </member>
        <member name="T:Meridium.Lib.Text.GroupTokenList">
            <summary>
            Contains a collection of <see cref="T:Meridium.Lib.Text.GroupToken"/> objects
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.Add(Meridium.Lib.Text.GroupToken)">
            <summary>
            Adds an Itentity to the collection
            </summary>
            <param name="groupToken"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.Add(System.String,System.Boolean)">
            <summary>
            Adds a GroupToken to the list
            </summary>
            <param name="groupingExpression"></param>
            <param name="canContainOtherGroups"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.Add(System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Adds a GroupToken to the list
            </summary>
            <param name="groupingExpression"></param>
            <param name="canContainOtherGroups"></param>
            <param name="regexOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.Add(System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            Adds a GroupToken to the list
            </summary>
            <param name="groupingExpression"></param>
            <param name="canContainOtherGroups"></param>
            <param name="regexOptions"></param>
            <param name="startTokenName"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.Add(System.String,System.String)">
            <summary>
            Adds the supplied tokens as a groupToken
            </summary>
            <param name="startToken"></param>
            <param name="endToken"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds the supplied tokens as a groupToken
            </summary>
            <param name="startToken"></param>
            <param name="endToken"></param>
            <param name="canContainOtherGroups"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.Add(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Adds the supplied tokens as a groupToken
            </summary>
            <param name="startToken"></param>
            <param name="endToken"></param>
            <param name="canContainOtherGroups"></param>
            <param name="startTokenExpression"></param>
            <param name="endTokenExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.AddRange(Meridium.Lib.Text.GroupTokenList)">
            <summary>
            Adds a range of GroupTokens to the list
            </summary>
            <param name="tokens">The <see cref="T:Meridium.Lib.Text.GroupTokenList"/> to add</param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.Remove(Meridium.Lib.Text.GroupToken)">
            <summary>
            Removes the segment from the collection
            </summary>
            <param name="groupToken"></param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.GetIndex(Meridium.Lib.Text.GroupToken)">
            <summary>
            Gets the index where the supplied object exists
            </summary>
            <param name="groupToken"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.Insert(System.Int32,Meridium.Lib.Text.GroupToken)">
            <summary>
            Inserts a GroupToken in the list at the given index.
            </summary>
            <param name="index"></param>
            <param name="groupToken"></param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.GetEqualGroupToken(Meridium.Lib.Text.GroupToken)">
            <summary>
            Gets an equal GroupToken from the list
            </summary>
            <param name="groupToken"></param>
            <returns>The found token or null if no equal token is found.</returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.GetTokenByStartToken(System.String)">
            <summary>
            Gets a grouptoken by its starttoken
            </summary>
            <param name="startToken"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.GetTokenByEndToken(System.String)">
            <summary>
            Gets a grouptoken by its endtoken
            </summary>
            <param name="endToken"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.Clone(Meridium.Lib.Text.GroupTokenList)">
            <summary>
            Clones the GroupTokenList
            </summary>
            <param name="groupTokens"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.OnInsert(System.Int32,System.Object)">
            <summary>
            Fires when an item is added to the collection
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.OnRemove(System.Int32,System.Object)">
            <summary>
            Fires when an item is removed from the collection
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Fires when an item is set in the collection
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.OnValidate(System.Object)">
            <summary>
            Fires when an item in the collection is validated
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.OnClearComplete">
            <summary>
            When a clear is completed, fire the CollectionChanged event
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            When an insert is completed, fire the CollectionChanged event
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            When a remove is completed, fire the CollectionChanged event
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            When a set is completed, fire the CollectionChanged event
            </summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupTokenList.OnCollectionChanged(System.EventArgs)">
            <summary>
            Notifies the listeners of the CollectionChanged event
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Meridium.Lib.Text.GroupTokenList.Item(System.Int32)">
            <summary>
            Indexes the items in the collection
            </summary>
        </member>
        <member name="P:Meridium.Lib.Text.GroupTokenList.DefaultGroupTokens">
            <summary>
            Contains the default GroupTokenList that groups () {} and []
            </summary>
        </member>
        <member name="E:Meridium.Lib.Text.GroupTokenList.CollectionChanged">
            <summary>
            The CollectionChanged event is fired when the collection is cleared, an insert or remove is done or a value has been set.
            It does not monitor the changes od the contained objects inner state.
            </summary>
        </member>
        <member name="T:Meridium.Lib.Reflection.CloneUtil">
            <summary>
            The CloneUtil supplies generic clone and comparison methods by analysing the object
            with reflection.
            </summary>
            <remarks></remarks>
            <example>
            	<code>
            public class A {
            	public int a;
            	private B b;
            }
            public class B {
            	private int a;
            }
            public class C : A {
            	public short a;
            }
            C c = new C();
            C cClone = CloneUtil.Clone(c) as C;
            bool eq1 = CloneUtil.AreEqual(c,cClone); //returns true
            cClone.a = 10;
            bool eq2 = CloneUtil.AreEqual(c,cClone); //returns false
            c.a = 10;
            bool eq3 = CloneUtil.AreEqual(c,cClone); //returns true
            </code>
            </example>
        </member>
        <member name="F:Meridium.Lib.Reflection.CloneUtil.CloneUtilPermission">
            <summary>
            Defines the permission needed for cloneUtil to work
            </summary>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.#ctor">
            <summary>
            This constructor is hidden.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.Clone(System.Object)">
            <summary>
            Clones the supplied object by using reflection. 
            </summary>
            <remarks>
            The clone is identical in value and a complete deep copy is done for
            The object must have a default constructor to be able to be cloned</remarks>
            <param name="source">The object to clone</param>
            <returns>The cloned object</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.Clone(System.Object,System.Collections.Hashtable)">
            <summary>
            Clones the supplied object by using reflection
            </summary>
            <remarks>
            The clone is identical in value and a complete deep copy is done for
            The object must have a default constructor to be able to be cloned</remarks>
            <param name="source">The object to clone</param>
            <param name="objectGraph">An object graph of already cloned objects.</param>
            <returns>The cloned object</returns>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.CreateMemberwizeClone(System.Object)">
            <summary>
            Creates a Memberwize clone of the object. (only a shallow copy is done)
            </summary>
            <param name="obj">The object to make a shallow copy of</param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.CloneArray(System.Array)">
            <summary>
            Clones the supplied array
            </summary>
            <param name="source">The array to clone</param>
            <returns>The cloned array</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.CloneArray(System.Array,System.Collections.Hashtable)">
            <summary>
            Clones the supplied array
            </summary>
            <param name="source">The array to clone</param>
            <param name="objectGraph">An object graph of already cloned objects.</param>
            <returns>The cloned array</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.CloneAndReplaceArrayItems(System.Array,System.Int32[],System.Collections.Hashtable)">
            <summary>
            Clones and replaces all items in the supplied array
            </summary>
            <param name="sourceAndTarget">The array whos objects should be cloned.</param>
            <param name="indices">The current indicies that points to the iteration location</param>
            <param name="objectGraph">An object graph of already cloned objects.</param>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.AreEqual(System.Object,System.Object)">
            <summary>
            Compares two objects and returns true if their composed value members are equal...
            </summary>
            <param name="a">Object a to compare</param>
            <param name="b">Object b to compare</param>
            <returns>True if the objects are equal in their values</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.AreEqual(System.Object,System.Object,Meridium.Lib.Reflection.CloneUtil.EqualsHandler)">
            <summary>
            Compares two objects and returns true if their composed value members are equal...
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value that was recieved</param>
            <param name="callbackOnNotEquals">The <see cref="T:Meridium.Lib.Reflection.CloneUtil.EqualsHandler"/> to call when a value is not equal any more</param>
            <returns>True if the objects are equal in their values</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.AreEqual(System.Object,System.Object,System.Collections.Hashtable,System.String,Meridium.Lib.Reflection.CloneUtil.EqualsHandler)">
            <summary>
            Compares two objects and returns true if their composed value members are equal...
            </summary>
            <param name="a">Object a to compare</param>
            <param name="b">Object b to compare</param>
            <param name="objectGraph">An object graph of already compared objects.</param>
            <param name="path">The object path to the item</param>
            <param name="callbackOnNotEquals">The <see cref="T:Meridium.Lib.Reflection.CloneUtil.EqualsHandler"/> to call when a value is not equal any more</param>
            <returns>True if the objects are equal in their values</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.AreEqual(System.Array,System.Array,System.Collections.Hashtable,System.String,Meridium.Lib.Reflection.CloneUtil.EqualsHandler)">
            <summary>
            Compares two arrays if they are equal in size and items
            </summary>
            <param name="a">Array a</param>
            <param name="b">Array b</param>
            <param name="objectGraph">An object graph of already compared objects.</param>
            <param name="path">The object path to the item</param>
            <param name="callbackOnNotEquals">The <see cref="T:Meridium.Lib.Reflection.CloneUtil.EqualsHandler"/> to call when a value is not equal any more</param>
            <returns>True if the arrays are equal in their size and item values</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.AreEqual(System.Array,System.Array,System.Int32[],System.Collections.Hashtable,System.String,Meridium.Lib.Reflection.CloneUtil.EqualsHandler)">
            <summary>
            Compares two arrays if they are equal in size and items
            </summary>
            <param name="a">Array a</param>
            <param name="b">Array b</param>
            <param name="indices">The current indicies that points to the iteration location</param>
            <param name="objectGraph">An object graph of already compared objects.</param>
            <param name="path">The object path to the item</param>
            <param name="callbackOnNotEquals">The <see cref="T:Meridium.Lib.Reflection.CloneUtil.EqualsHandler"/> to call when a value is not equal any more</param>
            <returns>True if the arrays are equal in their size and item values</returns>
        </member>
        <member name="M:Meridium.Lib.Reflection.CloneUtil.ClearAllReferenceValueFields(System.Object)">
            <summary>
            Clears all reference values from the objects, making it strict value based  (setting all reference fields to null) 
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to clear</param>
        </member>
        <member name="T:Meridium.Lib.Reflection.CloneUtil.EqualsHandler">
            <summary>
            Defines a delegate for using as callback for the AreEqual method
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value that was recieved</param>
            <param name="path">The path to the value</param>
        </member>
        <member name="T:Meridium.Lib.Collections.Generic.QueueExtensions">
            <summary>
            Summary description for QueueExtensions.
            </summary>
            <remarks>
            2011-08-10 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Collections.Generic.QueueExtensions.Enqueue``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enqueues a whole enumerable
            </summary>
            <param name="q">The <see cref="T:System.Collections.Generic.Queue`1"/> to Enqueue the items to </param>
            <param name="enu">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to read the items from</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Meridium.Lib.Text.TokenizerTokenComparer">
            <summary>
            Summary description for TokenizerTokenComparer.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenComparer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares tow objects and returns an indication of their relative positions
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenComparer.Compare(Meridium.Lib.Text.TokenizerToken,Meridium.Lib.Text.TokenizerToken)">
            <summary>
            Compares two TokenizerTokens and returns an indication of their relative positions
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenComparer.Compare(Meridium.Lib.Text.TokenizerGroupToken,Meridium.Lib.Text.TokenizerGroupToken)">
            <summary>
            Compares two TokenizerGroupTokens and returns an indication of their relative positions
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerTokenComparer.Instance">
            <summary>
            Returns the singleton instance of the <see cref="T:Meridium.Lib.Text.TokenizerTokenComparer"/> class.
            </summary>
        </member>
        <member name="T:Meridium.Lib.Xml.Serialization.XmlReaderReferenceObjectComparer">
            <summary>
            Compares two objects if they are XmlReaders and checks if they are based on the same base reader
            </summary>
            <remarks>
            2010-09-28 dan: Created
            </remarks>
        </member>
        <member name="M:Meridium.Lib.Xml.Serialization.XmlReaderReferenceObjectComparer.AreSameReferenceObject(System.Object,System.Object)">
            <summary>
            Compares two objects and compares if they are based on the same reference object.
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>True if they originates from the same instance, false otherwize.</returns>
        </member>
        <member name="T:Meridium.Lib.Text.TokenizerTokenEnumerator">
            <summary>
            Summary description for TokenizerTokenEnumerator.
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerTokenEnumerator._groupingToken">
            <summary>
            The GroupToken to search for
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerTokenEnumerator._parentList">
            <summary>
            The TokenizerTokenList to search int
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerTokenEnumerator._pos">
            <summary>
            The current position
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.TokenizerTokenEnumerator._backwards">
            <summary>
            If we should iterate from the end of the list.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenEnumerator.#ctor(Meridium.Lib.Text.TokenizerTokenList,Meridium.Lib.Text.GroupToken)">
            <summary>
            Creates an instance of the TokenizerTokenEnumerator class.
            </summary>
            <param name="parentList">The list to enumerate</param>
            <param name="groupingToken">The grouping Token to filter out</param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenEnumerator.#ctor(Meridium.Lib.Text.TokenizerTokenList,Meridium.Lib.Text.GroupToken,System.Boolean)">
            <summary>
            Creates an instance of the TokenizerTokenEnumerator class.
            </summary>
            <param name="parentList">The list to enumerate</param>
            <param name="groupingToken">The grouping Token to filter out</param>
            <param name="backwards">If we should enumerate from the end of the list</param>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenEnumerator.Reset">
            <summary>
            Resets the enumerator
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenEnumerator.MoveNext">
            <summary>
            Moves to the next item of the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.Text.TokenizerTokenEnumerator.GetEnumerator">
            <summary>
            Gets the enumerator of the enumerable
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.TokenizerTokenEnumerator.Current">
            <summary>
            Gets the current object of the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Meridium.Lib.Configuration.NameValueConfigurationCollectionWrapper">
            <summary>
            Wraps a KeyValueConfigurationCollection for ease of access to the value
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:Meridium.Lib.Configuration.NameValueConfigurationCollectionWrapper.#ctor(System.Configuration.KeyValueConfigurationCollection)">
            <summary>
            Initializes a new instance of the <b>NameValueConfigurationCollectionWrapper</b> class.
            </summary>
            <param name="collection"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="collection"/> is null.</exception>
        </member>
        <member name="P:Meridium.Lib.Configuration.NameValueConfigurationCollectionWrapper.Item(System.String)">
            <summary>
            Get/Sets the <see cref="T:System.String"/> item identified by the given arguments of the NameValueConfigurationCollectionWrapper
            </summary>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.Text.GroupToken">
            <summary>
            Summary description for GroupToken.
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.GroupToken.StartToken">
            <summary>
            The start token that defines this group
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.GroupToken.EndToken">
            <summary>
            The end token that defines this group
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.GroupToken.CanContainOtherGroups">
            <summary>
            Is true if this group can contain other groups
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.GroupToken.RegexOptions">
            <summary>
            The Regular Expressions options that should be used for the parsing
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.GroupToken.Tag">
            <summary>
            The tag object is used for user referred data.
            </summary>
        </member>
        <member name="F:Meridium.Lib.Text.GroupToken.IgnoreTagMatchesInExpression">
            <summary>
            If true, we will not use regex matches to find start/end tags.
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.GroupToken.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Meridium.Lib.Text.GroupToken.#ctor(System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            Creates a new <see cref="T:Meridium.Lib.Text.GroupToken"></see> instance.
            </summary>
            <param name="groupingExpression">Grouping expression.</param>
            <param name="canContainOtherGroups">Can contain other groups.</param>
            <param name="regexOptions">Regex options.</param>
            <param name="startTokenName">Name of the start token.</param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupToken.#ctor(System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Creates a new <see cref="T:Meridium.Lib.Text.GroupToken"></see> instance.
            </summary>
            <param name="groupingExpression">Grouping expression.</param>
            <param name="canContainOtherGroups">Can contain other groups.</param>
            <param name="regexOptions">Regex options.</param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupToken.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Meridium.Lib.Text.GroupToken"></see> instance.
            </summary>
            <param name="groupingExpression">Grouping expression.</param>
            <param name="canContainOtherGroups">Can contain other groups.</param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupToken.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Meridium.Lib.Text.GroupToken"></see> instance.
            </summary>
            <param name="startToken">Start token.</param>
            <param name="endToken">End token.</param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupToken.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Meridium.Lib.Text.GroupToken"></see> instance.
            </summary>
            <param name="startToken">Start token.</param>
            <param name="endToken">End token.</param>
            <param name="canContainOtherGroups">Can contain other groups.</param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupToken.#ctor(System.String,System.String,System.Boolean,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Creates a new <see cref="T:Meridium.Lib.Text.GroupToken"></see> instance.
            </summary>
            <param name="startToken">Start token.</param>
            <param name="endToken">End token.</param>
            <param name="canContainOtherGroups">Can contain other groups.</param>
            <param name="startTokenExpression">Start token expression.</param>
            <param name="endTokenExpression">End token expression.</param>
            <param name="regexOptions">Regex options.</param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupToken.#ctor(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Meridium.Lib.Text.GroupToken"></see> instance.
            </summary>
            <param name="startToken">Start token.</param>
            <param name="endToken">End token.</param>
            <param name="canContainOtherGroups">Can contain other groups.</param>
            <param name="startTokenExpression">Start token expression.</param>
            <param name="endTokenExpression">End token expression.</param>
        </member>
        <member name="M:Meridium.Lib.Text.GroupToken.Equals(Meridium.Lib.Text.GroupToken)">
            <summary>
            Returns true if the two tokens are equal in values
            </summary>
            <param name="token">The token to compare</param>
            <returns></returns>
            <remarks>PossibleParentGroups is not checked.</remarks>
        </member>
        <member name="M:Meridium.Lib.Text.GroupToken.CanExistInGroupingToken(Meridium.Lib.Text.GroupToken)">
            <summary>
            Determines whether an instance of GroupToken can exist in the specified parentGroupToken.
            </summary>
            <param name="parentGroupToken">Parent group token.</param>
            <returns><c>true</c> if this instance can exist in the specified parentGroupToken; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Meridium.Lib.Text.GroupToken.Clone(Meridium.Lib.Text.GroupTokenList)">
            <summary>
            Clones the GroupToken
            </summary>
            <param name="groupTokens"></param>
            <returns></returns>
        </member>
        <member name="P:Meridium.Lib.Text.GroupToken.StartTokenExpression">
            <summary>
            Gets or sets the start token expression. If this is set, StartToken is ignored
            </summary>
            <returns></returns>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.GroupToken.EndTokenExpression">
            <summary>
            Gets or sets the end token expression. If this is set EndToken is ignored
            </summary>
            <returns></returns>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.GroupToken.GroupingExpression">
            <summary>
            Gets the grouping expression. If this is set, StartTokenExpression and EndTokenExpression is ignored
            </summary>
            <returns></returns>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.Text.GroupToken.PossibleParentGroups">
            <summary>
            Gets the possible parent groups. If no groups are defined, all parent groups are acceptable.
            </summary>
            <returns></returns>
            <value></value>
        </member>
        <member name="T:Meridium.Lib.ComponentModel.EnumDisplayNameAttribute">
            <summary>
            This attribute allows enum items to declare a DisplayName 
            </summary>
            <remarks>
            2007-03-02 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="M:Meridium.Lib.ComponentModel.EnumDisplayNameAttribute.#ctor">
            <summary>
            Initializes a new instance of the <b>EnumDisplayNameAttribute</b> class.
            </summary>
        </member>
        <member name="M:Meridium.Lib.ComponentModel.EnumDisplayNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>EnumDisplayNameAttribute</b> class.
            </summary>
            <param name="displayName"></param>
        </member>
        <member name="T:Meridium.Lib.ComponentModel.EnumDescriptor">
            <summary>
            The EnumDescriptor wraps an Enum item and provides metadata for the item.
            </summary>
            <remarks>
            2007-02-28 dan: Created
            </remarks>
        </member>
        <member name="F:Meridium.Lib.ComponentModel.EnumDescriptor.Empty">
            <summary>
            Defines an empty descriptor
            </summary>
        </member>
        <member name="F:Meridium.Lib.ComponentModel.EnumDescriptor.EnumDescriptors">
            <summary>
            This <see cref="T:System.Collections.Generic.Dictionary`2"/> contains a cache of all default values found
            in the enum declarations.
            </summary>
        </member>
        <member name="M:Meridium.Lib.ComponentModel.EnumDescriptor.#ctor(System.Enum)">
            <summary>
            Initializes a new instance of the <b>EnumDescriptor</b> class.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Meridium.Lib.ComponentModel.EnumDescriptor.GetAttribute``1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.ComponentModel.EnumDescriptor.GetAttributes``1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meridium.Lib.ComponentModel.EnumDescriptor.Parse(System.Enum)">
            <summary>
            Parses an enum and returns its descriptor
            </summary>
            <param name="item">The <see cref="P:Meridium.Lib.ComponentModel.EnumDescriptor.Enum"/> to parse</param>
            <returns>The parsed <see cref="T:Meridium.Lib.ComponentModel.EnumDescriptor"/> </returns>
        </member>
        <member name="M:Meridium.Lib.ComponentModel.EnumDescriptor.Parse(System.Type)">
            <summary>
            Parses a type and returns all descriptors for the enum
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of enum to get descriptors for</param>
            <returns>The found <see cref="T:System.Collections.Generic.IList`1"/> </returns>
        </member>
        <member name="M:Meridium.Lib.ComponentModel.EnumDescriptor.Parse(System.Array)">
            <summary>
            Parses an array of enums and returns a list of enum descriptors
            </summary>
            <param name="enums">The <see cref="P:Meridium.Lib.ComponentModel.EnumDescriptor.Enum"/> array to parse</param>
            <returns>The found <see cref="T:System.Collections.Generic.IList`1"/>
            </returns>
        </member>
        <member name="P:Meridium.Lib.ComponentModel.EnumDescriptor.DefaultValue">
            <summary>
            Get/Sets the DefaultValue of the <see cref="T:Meridium.Lib.ComponentModel.EnumDescriptor"/>
            </summary>
        </member>
        <member name="P:Meridium.Lib.ComponentModel.EnumDescriptor.Description">
            <summary>
            Get/Sets the Description of the EnumDescriptor
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.ComponentModel.EnumDescriptor.DisplayName">
            <summary>
            Get/Sets the DisplayName of the EnumDescriptor
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.ComponentModel.EnumDescriptor.Browsable">
            <summary>
            Get/Sets the Browsable of the EnumDescriptor
            </summary>
            <value></value>
        </member>
        <member name="P:Meridium.Lib.ComponentModel.EnumDescriptor.Enum">
            <summary>
            Gets the Enum that the EnumDescriptor describes
            </summary>
            <value></value>
        </member>
    </members>
</doc>
