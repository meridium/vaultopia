<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageVault.Client</name>
    </assembly>
    <members>
        <member name="T:ImageVault.Client.Authentication.IAuthTokenUtil">
            <summary>
            The IAuthTokenUtil interface 
            </summary>
        </member>
        <member name="M:ImageVault.Client.Authentication.IAuthTokenUtil.GetAuthToken">
            <summary>
            Gets the Authentication token that should be added to the Authorization header
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Authentication.IAuthTokenUtil.GetAuthToken(System.Boolean)">
            <summary>
            Gets the Authentication token that should be added to the Authorization header
            </summary>
            <param name="forceRenew"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Client.Authentication.IvOAuthClientEndpointBehavior">
            <summary>
            Summary description for IvOAuthClientEndpointBehavior.
            </summary>
            <remarks>
            2014-01-25 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthClientEndpointBehavior.#ctor(ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>IvOAuthClientEndpointBehavior</b> class.
            </summary>
            <param name="authTokenUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthClientEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Implement to confirm that the endpoint meets some intended criteria.
            </summary>
            <param name="endpoint">The endpoint to validate.</param>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthClientEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Implement to pass data at runtime to bindings to support custom behavior.
            </summary>
            <param name="endpoint">The endpoint to modify.</param><param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthClientEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Implements a modification or extension of the service across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that exposes the contract.</param><param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthClientEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Implements a modification or extension of the client across an endpoint.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param><param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="T:ImageVault.Client.Authentication.IvOAuthClientMessageInspector">
            <summary>
            Summary description for IvOAuthClientMessageInspector.
            </summary>
            <remarks>
            2014-01-26 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthClientMessageInspector.#ctor(ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>IvOAuthClientMessageInspector</b> class.
            </summary>
            <param name="authTokenUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            Enables inspection or modification of a message before a request message is sent to a service.
            </summary>
            <returns>
            The object that is returned as the correlationState argument of the <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)"/> method. This is null if no correlation state is used.The best practice is to make this a <see cref="T:System.Guid"/> to ensure that no two correlationState objects are the same.
            </returns>
            <param name="request">The message to be sent to the service.</param><param name="channel">The  client object channel.</param>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.
            </summary>
            <param name="reply">The message to be transformed into types and handed back to the client application.</param><param name="correlationState">Correlation state data.</param>
        </member>
        <member name="T:ImageVault.Client.Authentication.IvOAuthTokenUtil">
            <summary>
            Summary description for IvOAuthTokenUtil.
            </summary>
            <remarks>
            2014-01-26 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthTokenUtil.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <b>IvOAuthTokenUtil</b> class.
            </summary>
            <param name="clientConfiguration"></param>
            <param name="actAsUser"></param>
            <param name="roles"></param>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthTokenUtil.GetAuthToken">
            <summary>
            Gets the Authentication token that should be added to the Authorization header
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthTokenUtil.GetAuthToken(System.Boolean)">
            <summary>
            Gets the Authentication token that should be added to the Authorization header
            </summary>
            <param name="forceRenew"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthTokenUtil.ClearAuthToken">
            <summary>
            Clears the current auth token
            </summary>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthTokenUtil.RequestAccessToken">
            <summary>
            Requests an access token
            </summary>
            <returns></returns>
            <exception cref="T:System.ApplicationException">If cannot create request for .</exception>
            <exception cref="T:ImageVault.Common.ImageVaultException">If no configured SdkIdentity was found
             or if request access token failed: 
             or if cannot get response stream from response
             or if unable to request access token @ .</exception>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthTokenUtil.GetFormUrlEncodedContent(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            
            </summary>
            <param name="nameValueCollection"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="nameValueCollection"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Authentication.IvOAuthTokenUtil.Encode(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Client.Authentication.IvOAuthTokenUtil.TokenExpires">
            <summary>
            Gets the TokenExpires of the IvOAuthTokenUtil
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Authentication.IvOAuthTokenUtil.ClientConfiguration">
            <summary>
            Get/Sets the Configuration of the IvOAuthTokenUtil
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Authentication.CertificateUtil">
            <summary>
            Summary description for CertificateUtil.
            </summary>
            <remarks>
            2011-06-13 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Authentication.CertificateUtil.LoadCertificateFromConfiguration(ImageVault.Client.Configuration.CertificateConfigurationElement)">
            <summary>
            Loads a certificate from the supplied configuration
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Authentication.CertificateUtil.LoadCertificateFromStore(ImageVault.Client.Configuration.CertificateConfigurationElement)">
            <summary>
            Loads a certificate from a store
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Authentication.CertificateUtil.GetCertificateFromStore(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.String)">
            <summary>
            Retrieves a certificate from a store
            </summary>
            <param name="location">The <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation"/> of the store</param>
            <param name="name">The <see cref="T:System.Security.Cryptography.X509Certificates.StoreName"/> of the store</param>
            <param name="findType">The <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType"/> to search by</param>
            <param name="value">The value to search for</param>
            <returns>The found <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> or null if no matching certificate was found</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ImageVault.Client.Authentication.CertificateUtil.LoadCertificateFromFileSystem(System.String)">
            <summary>
            Loads a certificate from the file system
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Authentication.CertificateUtil.LoadCertificateFromConfiguration(System.ServiceModel.Configuration.CertificateReferenceElement)">
            <summary>
            Loads a certificate from a configuration
            </summary>
            <param name="certificateReference">The <see cref="T:System.ServiceModel.Configuration.CertificateReferenceElement"/> to load the configuration from</param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Client.Configuration.AuthenticationConfigurationElement">
            <summary>
            Summary description for AuthenticationConfigurationElement.
            </summary>
            <remarks>
            2011-06-13 dan: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Client.Configuration.AuthenticationConfigurationElement.IdentityProvider">
            <summary>
            Gets the IdentityProvider of the AuthenticationConfigurationElement
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.AuthenticationConfigurationElement.SdkIdentity">
            <summary>
            Gets the SdkIdentity of the AuthenticationConfigurationElement
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.AuthenticationConfigurationElement.CurrentUserIdentity">
            <summary>
            Gets the CurrentUserIdentity of the AuthenticationConfigurationElement
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Configuration.CertificateConfigurationElement">
            <summary>
            Defines where a certificate can be retrieved
            </summary>
            <remarks>
            <example>Is configured like below to search for a certificate in the computers personal certificate 
            store searching by a thumbprint and igoring validation
            <pre><![CDATA[<certificate storeLocation="LocalMachine" storeName="My" 
              x509FindType="FindByThumbprint" findValue="ab221324bc33ef2f2b3acd34" validationMode="None"/>]]></pre>
            The following will search for a certificate on disc, performing default certificate validation (ChainTrust)
            <pre><![CDATA[<certificate filename="myCert.cer"/>]]></pre>
            </example>
            2011-06-13 dan: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Client.Configuration.CertificateConfigurationElement.Filename">
            <summary>
            Gets or sets the filename.
            </summary>
            <value>The filename of the certificate. If this is set then all 
            other location properties are ignored.</value>
        </member>
        <member name="P:ImageVault.Client.Configuration.CertificateConfigurationElement.FindValue">
            <summary>
            Gets or sets the find value.
            </summary>
            <value>The value to search for. Is used in combination with <see cref="P:ImageVault.Client.Configuration.CertificateConfigurationElement.X509FindType"/>.</value>
        </member>
        <member name="P:ImageVault.Client.Configuration.CertificateConfigurationElement.X509FindType">
            <summary>
            Gets or sets the search type.
            </summary>
            <value>Defines the property where the <see cref="P:ImageVault.Client.Configuration.CertificateConfigurationElement.FindValue"/> will be matched against.</value>
        </member>
        <member name="P:ImageVault.Client.Configuration.CertificateConfigurationElement.StoreLocation">
            <summary>
            Gets or sets the store location.
            </summary>
            <value>Defines the location of the certificate store that the search should take place. Can be either 
            <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser"/> 
             to search for the current users certificates or
             <see cref="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine"/> 
            to search in the local machine store.</value>
        </member>
        <member name="P:ImageVault.Client.Configuration.CertificateConfigurationElement.StoreName">
            <summary>
            Gets or sets the name of the store.
            </summary>
            <value>The name of the store. Can be any of the <see cref="T:System.Security.Cryptography.X509Certificates.StoreName"/> values. Most used
            are the My and TrustedPeople stores</value>
        </member>
        <member name="P:ImageVault.Client.Configuration.CertificateConfigurationElement.ValidationMode">
            <summary>
            Get/Sets the ValidationMode of the CertificateConfigurationElement
            </summary>
            <value>Defines how the certificate should be validated, Default is <see cref="F:System.ServiceModel.Security.X509CertificateValidationMode.ChainTrust"/>. 
            To disable validation (for self generated certificates) use <see cref="F:System.ServiceModel.Security.X509CertificateValidationMode.None"/>. This is not 
            recommended in production environments.</value>
        </member>
        <member name="T:ImageVault.Client.Configuration.ClientConfigurationSection">
            <summary>
            Summary description for ClientConfigurationSection.
            </summary>
            <remarks>
            2011-02-02 dan: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Client.Configuration.ClientConfigurationSection.DefaultMediaUrlBaseName">
            <summary>
            The name of the appsettings key for the defaultMediaUrlBase setting.
            </summary>
        </member>
        <member name="F:ImageVault.Client.Configuration.ClientConfigurationSection.EnableClientCacheName">
            <summary>
            The name of the appsettings key for the enableClientCache setting.
            </summary>
        </member>
        <member name="F:ImageVault.Client.Configuration.ClientConfigurationSection.ImageVaultUiUrlName">
            <summary>
            The name of the appsettings key for the imageVaultUiUrl setting.
            </summary>
        </member>
        <member name="F:ImageVault.Client.Configuration.ClientConfigurationSection.DisableMediaProxyHandlerName">
            <summary>
            The name of the appsettings key for the disableMediaProxyHandler setting.
            </summary>
        </member>
        <member name="F:ImageVault.Client.Configuration.ClientConfigurationSection.IgnoreMissingImageVaultDefaultRootCertificateName">
            <summary>
            Gets the IgnoreMissingImageVaultDefaultRootCertificateName of the <see cref="T:ImageVault.Client.Configuration.ClientConfigurationSection"/>
            </summary>
        </member>
        <member name="M:ImageVault.Client.Configuration.ClientConfigurationSection.#ctor">
            <summary>
            Initializes a new instance of the <b>ClientConfigurationSection</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Configuration.ClientConfigurationSection.ReplaceApplicationSettingsValue(System.String,System.String)">
            <summary>
            Replaces the current AppSettings value with the given key/value pair.
            If an existing key is found, it is removed and replaced with the supplied one.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ImageVault.Client.Configuration.ClientConfigurationSection.ReadFromXmlFile(System.String)">
            <summary>
            Reads the configuration from a configuration file
            </summary>
            <remarks>Can read both a fragment xml or a full xml document</remarks>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Configuration.ClientConfigurationSection.SaveToXmlFile(System.String)">
            <summary>
            Saves the configuration file to disc
            </summary>
            <param name="filename"></param>
        </member>
        <member name="P:ImageVault.Client.Configuration.ClientConfigurationSection.DefaultMediaUrlBase">
            <summary>
            Get/Sets the DefaultMediaUrlBase of the ClientConfigurationSection
            </summary>
            <value>Is used to direct the client to use urls from a specific media proxy</value>
        </member>
        <member name="P:ImageVault.Client.Configuration.ClientConfigurationSection.Instance">
            <summary>
            Returns the singleton instance of the <see cref="T:ImageVault.Client.Configuration.ClientConfigurationSection"/> class.
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.ClientConfigurationSection.Authentication">
            <summary>
            Gets the Authentication of the ClientConfigurationSection
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.ClientConfigurationSection.ImageVaultCore">
            <summary>
            Gets the ImageVaultCore of the ClientConfigurationSection
            </summary>
            <remarks>If using a https address, you can ommit the certificate</remarks>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.ClientConfigurationSection.EnableClientCache">
            <summary>
            Get/Sets the EnableClientCache of the ClientConfigurationSection
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.ClientConfigurationSection.ImageVaultUiUrl">
            <summary>
            Get/Sets the ImageVaultUiUrl of the ClientConfigurationSection
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.ClientConfigurationSection.IgnoreMissingImageVaultDefaultRootCertificate">
            <summary>
            Get/Sets the IgnoreMissingImageVaultDefaultRootCertificate value
            </summary>
            <value>If set to true, all requests to SSL protected resources that are using a certificate issued by
            the ImageVault installation, will be considered ok, even if the issuer certificate is not trusted by the client
            computer.
            Default value is true.</value>
            <remarks>
            This will override the <see cref="P:System.Net.ServicePointManager.ServerCertificateValidationCallback"/> so if you use this
            in your code, be sure to honor the present callback.
            
            If you want to disable this behavior, then set this before instancing the Client.
            </remarks>
        </member>
        <member name="T:ImageVault.Client.Configuration.EndpointConfigurationElement">
            <summary>
            Summary description for EndpointConfigurationElement.
            </summary>
            <remarks>
            2011-06-13 dan: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Client.Configuration.EndpointConfigurationElement.Address">
            <summary>
            Get/Sets the Address of the EndpointConfigurationElement
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.EndpointConfigurationElement.ReuseHostAndSchemeFromContext">
            <summary>
            Get/Sets the AllowRelativeAddress of the EndpointConfigurationElement
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.EndpointConfigurationElement.Identity">
            <summary>
            Gets the Identity of the EndpointConfigurationElement
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.EndpointConfigurationElement.CertificateLocation">
            <summary>
            Gets the Certificate of the EndpointConfigurationElement
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.EndpointConfigurationElement.Certificate">
            <summary>
            Gets the Certificate of the EndpointConfigurationElement
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.EndpointConfigurationElement.CurrentAddress">
            <summary>
            Method for building the resulting url string depending on wether host and scheme shall be reused or not.
            </summary>
            <value>The resulting url</value>
            <exception cref="T:System.ApplicationException">If url needs to be relative when the attribute useRelativeAddress is true.
             or if unknown url .</exception>
        </member>
        <member name="T:ImageVault.Client.Configuration.IdentityConfigurationElement">
            <summary>
            Defines an Identity using a key (username) and secret (password)
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Client.Configuration.IdentityConfigurationElement.Key">
            <summary>
            Get/Sets the Key of the SdkIdentityConfigurationElement
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Configuration.IdentityConfigurationElement.Secret">
            <summary>
            Get/Sets the Secret of the SdkIdentityConfigurationElement
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Configuration.ImageVaultCoreConfigurationElement">
            <summary>
            Summary description for ImageVaultCoreConfigurationElement.
            </summary>
            <remarks>
            2011-06-13 dan: Created
            </remarks>
        </member>
        <member name="T:ImageVault.Client.Configuration.SdkIdentityConfigurationElement">
            <summary>
            Summary description for SdkIdentityConfigurationElement.
            </summary>
            <remarks>
            2011-06-22 dan: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Client.Configuration.SdkIdentityConfigurationElement.PublishingIdentifier">
            <summary>
            Get/Sets the PublishingIdentifier of the SdkIdentityConfigurationElement
            </summary>
            <value>This value is used as PublishingIdentifier for the sdk client</value>
        </member>
        <member name="T:ImageVault.Client.Descriptors.Effects.CropEffectAttribute">
            <summary>
            CropEffect attribute
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Client.Descriptors.Effects.EffectAttribute">
            <summary>
            Base class for effects attributes
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Descriptors.Effects.EffectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <b>EffectAttribute</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Descriptors.Effects.EffectAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>EffectAttribute</b> class.
            </summary>
            <param name="sortOrder"></param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.Effects.EffectAttribute.CreateEffect">
            <summary>
            Create the effect
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Client.Descriptors.Effects.EffectAttribute.SortOrder">
            <summary>
            Get/Sets the AttributeOrder of the EffectAttribute
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Client.Descriptors.Effects.CropEffectAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>CropEffectAttribute</b> class.
            </summary>
            <param name="sortOrder"></param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.Effects.CropEffectAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <b>CropEffectAttribute</b> class.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="sortOrder"></param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.Effects.CropEffectAttribute.CreateEffect">
            <summary>
            Create the crop effect
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Client.Descriptors.Effects.CropEffectAttribute.X">
            <summary>
            Get/Sets the X of the CropEffectAttribute
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Descriptors.Effects.CropEffectAttribute.Y">
            <summary>
            Get/Sets the Y of the CropEffectAttribute
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Descriptors.Effects.CropEffectAttribute.Width">
            <summary>
            Get/Sets the Width of the CropEffectAttribute
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Descriptors.Effects.CropEffectAttribute.Height">
            <summary>
            Get/Sets the Height of the CropEffectAttribute
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Descriptors.Effects.ResizeEffectAttribute">
            <summary>
            ResizeEffect attribute
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Descriptors.Effects.ResizeEffectAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>ResizeEffectAttribute</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Descriptors.Effects.ResizeEffectAttribute.#ctor(System.Int32,System.Int32,ImageVault.Common.Data.ResizeMode,System.Int32)">
            <summary>
            Initializes a new instance of the <b>ResizeEffectAttribute</b> class.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="resizeMode"></param>
            <param name="sortOrder"></param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.Effects.ResizeEffectAttribute.CreateEffect">
            <summary>
            Create the Resize-effect
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Client.Descriptors.Effects.ResizeEffectAttribute.Width">
            <summary>
            Get/Sets the Width of the ResizeEffectAttribute
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Descriptors.Effects.ResizeEffectAttribute.Height">
            <summary>
            Get/Sets the Height of the ResizeEffectAttribute
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Descriptors.Effects.ResizeEffectAttribute.ResizeMode">
            <summary>
            Get/Sets the ResizeMode of the ResizeEffectAttribute
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Descriptors.FindMediaItemParserException">
            <summary>
            Summary description for FindMediaItemParserException.
            </summary>
            <remarks>
            2011-09-05 dan: Created 
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemParserException.#ctor">
            <summary>
            Initializes a new instance of the <b>FindMediaItemParserException</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemParserException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>FindMediaItemParserException</b> class with a specified error message.
            </summary>
            <param name="message">a message that describes the exception</param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemParserException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <b>FindMediaItemParserException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">a message that describes the exception</param>
            <param name="innerException">The exception that caused this exception</param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>FindMediaItemParserException</b> class with serialized data. 		/// </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination.</param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemParserException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <b>FindMediaItemParserException</b> class with a specified formatted error message.		/// </summary>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items. </param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemParserException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the SerializationInfo with information about the 
            exception. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination.</param>
        </member>
        <member name="T:ImageVault.Client.Descriptors.FindMediaItemPopulationQueryFactory">
            <summary>
            Summary description for FindMediaItemPopulationQueryFactory.
            </summary>
            <remarks>
            2011-09-05 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemPopulationQueryFactory.#ctor(ImageVault.Client.Client)">
            <summary>
            Initializes a new instance of the <b>FindMediaItemPopulationQueryFactory</b> class.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemPopulationQueryFactory.GetPopulateQuery(System.Type)">
            <summary>
            Creates a populate query from a classs type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemPopulationQueryFactory.GetDescriptor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemPopulationQueryFactory.Parse(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:ImageVault.Client.Descriptors.FindMediaItemParserException">If the type 
             or if cannot append multiple MetadataAttributes on the same property. Type name: 
             or if cannot append multiple MediaConversionAttributes on the same property. Type name: 
             or if the property type for the property named 
             or if the property type for the property named 
             or if the property type for the property named 
             or if the property type for the property named 
             or if parsing attribute type .</exception>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemPopulationQueryFactory.Populate(System.Type,System.Collections.Generic.List{ImageVault.Common.Data.MediaItem})">
            <summary>
            Cretes a populated list
            </summary>
            <param name="type"></param>
            <param name="mediaItems"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemPopulationQueryFactory.Populate``1(System.Collections.Generic.IEnumerable{ImageVault.Common.Data.MediaItem})">
            <summary>
            Cretes a populated list
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemPopulationQueryFactory.FindMetadataValue(System.Int32,System.Collections.Generic.IEnumerable{ImageVault.Common.Data.Metadata})">
            <summary>
            Get the value of the metadta with specified id
            </summary>
            <param name="id"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Descriptors.FindMediaItemPopulationQueryFactory.IsMatch(System.Int32,ImageVault.Common.Data.Metadata)">
            <summary>
            Check if the id matches the id of the metadata
            </summary>
            <param name="id"></param>
            <param name="metadata"></param>
            <returns>True if it is match, otherwise false.</returns>
        </member>
        <member name="T:ImageVault.Client.Descriptors.InvalidAttributeException">
            <summary>
            
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Descriptors.InvalidAttributeException.#ctor">
            <summary>
            Initializes a new instance of the <b>InvalidAttributeException</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Descriptors.InvalidAttributeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>InvalidAttributeException</b> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.InvalidAttributeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <b>InvalidAttributeException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">a message that describes the exception</param>
            <param name="innerException">The exception that caused this exception</param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.InvalidAttributeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>InvalidAttributeException</b> class with serialized data. 		/// </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination.</param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.InvalidAttributeException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <b>InvalidAttributeException</b> class with a specified formatted error message.		/// </summary>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items. </param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
        </member>
        <member name="P:ImageVault.Client.Descriptors.InvalidAttributeException.Message">
            <summary>
            Gets the Message of the InvalidAttributeException
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Descriptors.MediaItemAttribute">
            <summary>
            Summary description for MediaItemAttribute.
            </summary>
            <remarks>
            2011-09-05 dan: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Client.Descriptors.MediaItemAttribute.Populate">
            <summary>
            Get/Sets the Populate of the <see cref="T:ImageVault.Client.Descriptors.MediaItemAttribute"/>
            </summary>
            <value>Defines which fields to populate in the <see cref="T:ImageVault.Common.Data.MediaItem"/></value>
        </member>
        <member name="T:ImageVault.Client.Descriptors.MediaItemDescriptor">
            <summary>
            Summary description for MediaItemDescriptor.
            </summary>
            <remarks>
            2011-09-05 dan: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Client.Descriptors.MediaItemDescriptor.PopulateQuery">
            <summary>
            Get/Sets the PopulateQuery of the MediaItemDescriptor
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Descriptors.MediaItemDescriptor.MetadataMap">
            <summary>
            Gets the MetadataMap of the MediaItemDescriptor
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Descriptors.MediaItemDescriptor.MediaFormatMap">
            <summary>
            Gets the MediaFormatMap of the MediaItemDescriptor
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Descriptors.MetadataAttribute">
            <summary>
            The MetadataAttribute is used to decoreate a property that should be populated with a metadata value.
            The attribute is used to describe the MetadataDefinition that it should represent.
            </summary>
            <example>You can match a <see cref="T:ImageVault.Common.Data.MetadataDefinition"/> by id, name or name and type.
            <code>
            [Metadata(Id=3)]
            public string Title {get;set;}
            [Metadata(Name="Description")
            public string Description {get;set;}
            [Metadata(Name="Photographer",Type=MetadataDefinitionTypes.Iptc)]
            public string Photographer {get;set;}
            </code>
            </example>
            <remarks>
            The type of the decorated propery (int, string, DateTime) should be of the same type as the expected value of the
            MetadataDefinition (MetadataInteger, MetadataString, MetadataDateTime etc.). If a value cannot be converted to the
            target type, a runtime error will occur when populating the metadata.
            <para>
            2011-09-05 dan: Created
            </para>
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Descriptors.MetadataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataAttribute</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Descriptors.MetadataAttribute.#ctor(System.String,ImageVault.Common.Data.MetadataDefinitionTypes)">
            <summary>
            Initializes a new instance of the <b>MetadataAttribute</b> class.
            </summary>
            <param name="name">The name of the MetadataDefintion that we should match</param>
            <param name="type">The <see cref="T:ImageVault.Common.Data.MetadataDefinitionTypes"/> of the definition to match. If omitted, <see cref="F:ImageVault.Common.Data.MetadataDefinitionTypes.User"/> will be used.</param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.MetadataAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>MetadataAttribute</b> class.
            </summary>
            <param name="id">The id of the MetadataDefintion that the attribute should match</param>
        </member>
        <member name="M:ImageVault.Client.Descriptors.MetadataAttribute.CreateQuery">
            <summary>
            Creates a <see cref="T:ImageVault.Common.Data.Query.MetadataQuery"/> of the attribute
            </summary>
            <returns>The created <see cref="T:ImageVault.Common.Data.Query.MetadataQuery"/> </returns>
        </member>
        <member name="P:ImageVault.Client.Descriptors.MetadataAttribute.Name">
            <summary>
            Get/sets the name of the medatata definition to map
            </summary>
            <value>The name of the medatata definition to map</value>
        </member>
        <member name="P:ImageVault.Client.Descriptors.MetadataAttribute.Type">
            <summary>
            Get/Sets the Type of the MetadataAttribute
            </summary>
            <value>The <see cref="T:ImageVault.Common.Data.MetadataDefinitionTypes"/> of metadata definition. Default is <see cref="F:ImageVault.Common.Data.MetadataDefinitionTypes.User"/>.</value>
        </member>
        <member name="P:ImageVault.Client.Descriptors.MetadataAttribute.IsTitle">
            <summary>
            Get/Sets the IsTitle of the MetadataAttribute
            TODO:remove
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Descriptors.MetadataAttribute.IsAltText">
            <summary>
            Get/Sets the IsAltText of the MetadataAttribute
            TODO:remove
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Descriptors.MetadataAttribute.Id">
            <summary>
            Get/Sets the Id of the MetadataAttribute
            </summary>
            <value>The id of the metadata definition to get</value>
        </member>
        <member name="T:ImageVault.Client.Extensions.LicenseExtensions">
            <summary>
            Used when checking if a thrown exception is a licenseexception or not
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:ImageVault.Client.Extensions.LicenseExtensions.LicenseExceptionPrefix">
            <summary>
            Gets the LicenseExceptionPrefix of the <see cref="T:ImageVault.Client.Extensions.LicenseExtensions"/>
            </summary>
        </member>
        <member name="M:ImageVault.Client.Extensions.LicenseExtensions.IsLicenseException(System.Exception)">
            <summary>
            retur
            </summary>
            <param name="exception"></param>
            <returns>True if exception is licenseexception, otherwise false.</returns>
            <exception cref="T:System.NullReferenceException">If exception is null.</exception>
        </member>
        <member name="T:ImageVault.Client.Rest.IServiceClientProxy">
            <summary>
            An interface that defines a service client property
            </summary>
        </member>
        <member name="M:ImageVault.Client.Rest.ServiceClientProxyBase.#cctor">
            <summary>
            Initializes a new instance of the <b>ServiceClientProxyBase</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Rest.ServiceClientProxyBase.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>ServiceClientProxyBase</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.ServiceClientProxyBase.Call(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="argument"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.ServiceClientProxyBase.Call``1(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="argument"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Client.Rest.ServiceClientProxyBase.AuthUtil">
            <summary>
            Gets the AuthUtil of the ServiceClientProxyBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.ServiceClientProxyBase.BaseUri">
            <summary>
            Gets the BaseUri of the ServiceClientProxyBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.ServiceClientProxyBase.Timeout">
            <summary>
            Gets or sets the time-out value in milliseconds for the GetResponse() and GetRequestStream() methods.
            </summary>
            <value>The number of milliseconds to wait before the request times out. The default value is 100,000 milliseconds (100 seconds).</value>
        </member>
        <member name="P:ImageVault.Client.Rest.ServiceClientProxyBase.ClientProxyInvoker">
            <summary>
            Get/Sets the ClientProxyInvoker of the ServiceClientProxyBase
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Client.Rest.CategoryServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>CategoryServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ImageVault.Client.Rest.ClientIdentityServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>ClientIdentityServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="T:ImageVault.Client.Rest.IClientProxyInvoker">
            <summary>
            An interface for defining a client proxy call invoker 
            </summary>
        </member>
        <member name="F:ImageVault.Client.Rest.ClientProxyHttpInvoker.SerializerSettings">
            <summary>
            Gets the SerializerSettings of the <see cref="T:ImageVault.Client.Rest.ServiceClientProxyBase"/>
            </summary>
        </member>
        <member name="M:ImageVault.Client.Rest.ClientProxyHttpInvoker.Call(System.String,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="argument"></param>
            <param name="returnType"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Rest.ClientProxyHttpInvoker.CallWithContent(System.String,ImageVault.Client.Rest.IRequestContent,System.Type,System.Boolean)">
            <summary>
            Performs the actual Http call.
            </summary>
            <param name="url"></param>
            <param name="requestContent"></param>
            <param name="returnType"></param>
            <param name="forceNewAuthToken"></param>
            <returns></returns>
            <exception cref="T:ImageVault.Common.ImageVaultException">If callWithContent to '.</exception>
        </member>
        <member name="M:ImageVault.Client.Rest.ClientProxyHttpInvoker.DeserializeResponse(System.Type,ImageVault.Client.Rest.IHttpWebResponse)">
            <summary>
            Deserializes the response content to a suitable object
            </summary>
            <param name="type">The <see cref="T:System.Type"/>  of the expected response</param>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> where the response data exists.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">If cannot deserialize response.</exception>
        </member>
        <member name="M:ImageVault.Client.Rest.ClientProxyHttpInvoker.GetContentType(System.String)">
            <summary>
            Gets the content type from the supplied content type header value
            </summary>
            <param name="contentTypeHeaderValue"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Rest.ClientProxyHttpInvoker.DeserializeXmlResponse(System.Type,ImageVault.Client.Rest.IHttpWebResponse)">
            <summary>
            Deserializes the supplied xml response as an instance of the supplied type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to deserialize the data to.</param>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> containing the data.</param>
            <returns></returns>
            <exception cref="T:ImageVault.Common.ImageVaultException">If cannot get response stream from response.</exception>
        </member>
        <member name="M:ImageVault.Client.Rest.ClientProxyHttpInvoker.DeserializeJsonResponse(System.Type,ImageVault.Client.Rest.IHttpWebResponse)">
            <summary>
            Deserializes the supplied json response as an instance of the supplied type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to deserialize the data to.</param>
            <param name="response">The <see cref="T:System.Net.HttpWebResponse"/> containing the data.</param>
            <returns></returns>
            <exception cref="T:ImageVault.Common.ImageVaultException">If cannot get response stream from response.</exception>
        </member>
        <member name="P:ImageVault.Client.Rest.ClientProxyHttpInvoker.ServiceClientProxy">
            <summary>
            Get/Sets the ServiceClientProxy of the ClientProxyHttpInvoker
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Rest.IHttpWebResponse">
            <summary>
            The IHttpWebResponse interface 
            </summary>
        </member>
        <member name="M:ImageVault.Client.Rest.IHttpWebResponse.GetResponseStream">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Rest.IHttpWebResponse.Close">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Client.Rest.IHttpWebResponse.ContentType">
            <summary>
            Gets the ContentType of the IHttpWebResponse
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.IHttpWebResponse.StatusCode">
            <summary>
            Gets the StatusCode of the IHttpWebResponse
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.IHttpWebResponse.StatusDescription">
            <summary>
            Gets the StatusDescription of the IHttpWebResponse
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Client.Rest.HttpWebResponseWrapper.#ctor(System.Net.HttpWebResponse)">
            <summary>
            Initializes a new instance of the <b>HttpWebResponseWrapper</b> class.
            </summary>
            <param name="httpWebResponse"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.HttpWebResponseWrapper.GetResponseStream">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Rest.HttpWebResponseWrapper.Close">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Client.Rest.HttpWebResponseWrapper.ContentType">
            <summary>
            Gets the ContentType of the HttpWebResponseWrapper
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.HttpWebResponseWrapper.StatusCode">
            <summary>
            Gets the StatusCode of the HttpWebResponseWrapper
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.HttpWebResponseWrapper.StatusDescription">
            <summary>
            Gets the StatusDescription of the HttpWebResponseWrapper
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Rest.CoreRestProxyHandler">
            <summary>
            Summary description for CoreRestProxyHandler.
            </summary>
            <remarks>
            2015-02-02 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Rest.CoreRestProxyHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>CoreRestProxyHandler</b> class.
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If the supplied path cannot start with any of the following characters; .</exception>
        </member>
        <member name="M:ImageVault.Client.Rest.CoreRestProxyHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes the request and redirects it to the Core service.
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ApplicationException">If cannot create request for .</exception>
        </member>
        <member name="M:ImageVault.Client.Rest.CoreRestProxyHandler.PerformRealRequest(System.String,System.String,System.Web.HttpRequest,System.Web.HttpResponse,System.Boolean)">
            <summary>
            
            </summary>
            <param name="coreUrl"></param>
            <param name="content"></param>
            <param name="sourceRequest"></param>
            <param name="destResponse"></param>
            <param name="forceNewAuthToken"></param>
            <exception cref="T:System.ApplicationException">If cannot create request for .</exception>
        </member>
        <member name="M:ImageVault.Client.Rest.CoreRestProxyHandler.CopyRequestHeaders(System.Web.HttpRequestBase,System.Net.HttpWebRequest,System.Boolean)">
            <summary>
            Copies the headers from one request to another
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="forceNewAuthToken"></param>
            <exception cref="T:System.ApplicationException">If error setting header .</exception>
        </member>
        <member name="M:ImageVault.Client.Rest.CoreRestProxyHandler.CopyResponseHeaders(System.Net.HttpWebResponse,System.Web.HttpResponseBase)">
            <summary>
            Copies the headers from one response to another
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.DemoServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>DemoServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.GlobalRoleIdentityServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>GlobalRoleIdentityServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="T:ImageVault.Client.Rest.HttpRestClientChannelFactory">
            <summary>
            Summary description for HttpRestClientChannelFactory.
            </summary>
            <remarks>
            2014-02-07 dan: Created
            </remarks>
        </member>
        <member name="T:ImageVault.Client.IClientChannelFactory">
            <summary>
            The factory for creating a channel for the client to the server
            </summary>
        </member>
        <member name="M:ImageVault.Client.IClientChannelFactory.CreateChannel``1">
            <summary>
            Creates a channel to a service
            </summary>
            <typeparam name="T">The type of the contract interface to call</typeparam>
            <returns>The proxy channel to use for calling the service</returns>
        </member>
        <member name="P:ImageVault.Client.IClientChannelFactory.SendTimeout">
            <summary>
            Gets or sets the interval of time provided for a write operation to complete before the transport raises an exception.
            </summary>
            <value>If null, the default value of the binding will be used</value>
        </member>
        <member name="P:ImageVault.Client.IClientChannelFactory.Timeout">
            <summary>
            Get/Sets the Timeout of the IClient
            </summary>
            <value>The number of milliseconds to wait before the request times out. The default value is 100,000 milliseconds (100 seconds).</value>
        </member>
        <member name="M:ImageVault.Client.Rest.HttpRestClientChannelFactory.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>HttpRestClientChannelFactory</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.HttpRestClientChannelFactory.CreateChannel``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:ImageVault.Client.Rest.HttpRestClientChannelFactory.SendTimeout">
            <summary>
            Gets or sets the interval of time provided for a write operation to complete before the transport raises an exception.
            </summary>
            <value>If null, the default value of the binding will be used</value>
        </member>
        <member name="P:ImageVault.Client.Rest.HttpRestClientChannelFactory.Timeout">
            <summary>
            Get/Sets the Timeout of the Client
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.HttpRestClientChannelFactory.AuthUtil">
            <summary>
            Gets the AuthUtil of the RestClientChannelFactory
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.IClient">
            <summary>
            The IClient interface 
            </summary>
        </member>
        <member name="M:ImageVault.Client.IClient.CreateChannel``1">
            <summary>
            Creates a channel to a service
            </summary>
            <typeparam name="T">The type of the contract interface to call</typeparam>
            <returns>The proxy channel to use for calling the service</returns>
        </member>
        <member name="M:ImageVault.Client.IClient.Query``1">
            <summary>
            Queries the client for items using linq syntax.
            </summary>
            <typeparam name="T">The type of object to get.</typeparam>
            <returns>The matching objects from IV core</returns>
            <remarks>Now supports
            MediaItem (and subclasses)
            MetadataDefinition
            </remarks>
            <exception cref="T:System.NotImplementedException">If requesting types that is not yet implemented in the linq query provider.</exception>
        </member>
        <member name="M:ImageVault.Client.IClient.Store``1(``0)">
            <summary>
            Stores the supplied item
            </summary>
            <param name="item"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.NotImplementedException">If store of .</exception>
        </member>
        <member name="M:ImageVault.Client.IClient.Load``1(System.Int32)">
            <summary>
            Loads a specific item from ImageVault
            </summary>
            <param name="id">The id of the item</param>
            <typeparam name="T">The type of item to load (must be an <see cref="T:ImageVault.Common.Data.IItem`1"/> of int.</typeparam>
            <returns>The matching objects from IV core</returns>
        </member>
        <member name="M:ImageVault.Client.IClient.Load``1(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Loads a set of specific items from ImageVault
            </summary>
            <param name="ids">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of id of the items to load</param>
            <typeparam name="T">The type of item to load (must be an <see cref="T:ImageVault.Common.Data.IItem`1"/> of int.</typeparam>
            <returns>The matching objects from IV core</returns>
        </member>
        <member name="P:ImageVault.Client.IClient.SendTimeout">
            <summary>
            Gets or sets the interval of time provided for a write operation to complete before the transport raises an exception.
            </summary>
            <value>If null, the default value of the binding will be used</value>
        </member>
        <member name="P:ImageVault.Client.IClient.Timeout">
            <summary>
            Get/Sets the Timeout of the IClient
            </summary>
            <value>The number of milliseconds to wait before the request times out. The default value is 100,000 milliseconds (100 seconds).
            If set to null, the default value will be used.</value>
        </member>
        <member name="P:ImageVault.Client.IClient.PublishIdentifier">
            <summary>
            Get/Sets the PublishIdentifier of the Client
            </summary>
            <value>Defines the publish identifier to use</value>
        </member>
        <member name="T:ImageVault.Client.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ImageVault.Client.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ImageVault.Client.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:ImageVault.Client.Query.Evaluator">
            <summary>
            Summary description for Evaluator.
            </summary>
            <remarks>
            2011-10-12 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Query.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Evaluator.CanBeEvaluatedLocally(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Client.Query.Evaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.ExpressionVisitor">
            <summary>
            Summary description for ExpressionVisitor.
            </summary>
            <remarks>
            This class exists in .net4 but in .net 3.5 its internal.
            TODO:We should use this class since we want't to downgrade to 3.5 when we have fixed the issues with WIF and .net3.5
            2011-10-13 dan: Created
            
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If unhandled expression type .</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            
            </summary>
            <param name="binding"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If unhandled binding type .</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            
            </summary>
            <param name="initializer"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitExpressionListWithCallback(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression},System.Action{System.Int32,System.Int32},System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Visits the supplied expressionlist
            </summary>
            <param name="original">The original <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> to visit</param>
            <param name="callback">The callback to use when each item has been visited</param>
            <param name="visitArgumentCheck">A callback to use if we would like to determine if the item should be visited or not</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            
            </summary>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            
            </summary>
            <param name="lambda"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            
            </summary>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            
            </summary>
            <param name="assignment"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            
            </summary>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            
            </summary>
            <param name="nex"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            
            </summary>
            <param name="na"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.ExpressionVisitor.Path">
            <summary>
            Gets the Path of the ExpressionVisitor
            </summary>
            <value>Used to keep track of the current path of the tree</value>
        </member>
        <member name="M:ImageVault.Client.Query.Evaluator.SubtreeEvaluator.#ctor(System.Collections.Generic.HashSet{System.Linq.Expressions.Expression})">
            <summary>
            Initializes a new instance of the <b>SubtreeEvaluator</b> class.
            </summary>
            <param name="candidates"></param>
        </member>
        <member name="M:ImageVault.Client.Query.Evaluator.SubtreeEvaluator.Eval(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Evaluator.SubtreeEvaluator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Evaluator.SubtreeEvaluator.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Client.Query.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Evaluator.Nominator.#ctor(System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Initializes a new instance of the <b>Nominator</b> class.
            </summary>
            <param name="fnCanBeEvaluated"></param>
        </member>
        <member name="M:ImageVault.Client.Query.Evaluator.Nominator.Nominate(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Evaluator.Nominator.Visit(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.CachedIvExpressionParser`3">
            <summary>
            Defines a Cached IvExpressionParser that is able to cache the information based on the requested query
            </summary>
            <remarks>Implement the <see cref="M:ImageVault.Client.Query.Parser.CachedIvExpressionParser`3.ConstructCacheKey(System.Type)"/> method to return a cache key if the result should be cached
            and <see cref="M:ImageVault.Client.Query.Parser.CachedIvExpressionParser`3.GetNotCachedResultFromServer(System.Type)"/> to return the actual result</remarks>
            <typeparam name="T"></typeparam>
            <typeparam name="TQuery"></typeparam>
            <typeparam name="TFilter"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.IvExpressionParser`3">
            <summary>
            
            </summary>
            <typeparam name="TElement"></typeparam>
            <typeparam name="TQuery"></typeparam>
            <typeparam name="TFilter"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.IIvExpressionParser`1">
            <summary>
            The IMediaItemExpressionParser interface 
            </summary>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.IIvExpressionParser">
            <summary>
            The IIVExpressionParser interface 
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IIvExpressionParser.GetResultFromServer(System.Type)">
            <summary>
            Gets the result from the server
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of items for the result to get</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> containing the result</returns>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.IIvExpressionParser.Client">
            <summary>
            Get/Sets the Client of the IIVExpressionParser
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.IIvExpressionParser`1.Query">
            <summary>
            Gets the Query of the OldMediaItemExpressionParser
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.#ctor">
            <summary>
            Initializes a new instance of the <b>IvExpressionParser&lt;TElement, TQuery&gt;</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.AddMapping``1(ImageVault.Client.Query.Parser.IvQueryMapping,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{System.Linq.Expressions.Expression,System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression})">
            <summary>
            Adds a mapping to the parser
            </summary>
            <param name="mapping">The <see cref="T:ImageVault.Client.Query.Parser.IvQueryMapping"/> type to add</param>
            <param name="selector">The expression that is used to identitfy the source mapping</param>
            <param name="action">The action to execute if the source mapping is encountered</param>
            <typeparam name="TKey"></typeparam>
            <exception cref="T:System.ApplicationException">If a mapping for a specific mapping and selector already has been added.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.ConvertToIEnumerableMethodCallExpression(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Converts the call to an IEnumerable extension method instead of the IQueryable extension method
            </summary>
            <param name="instance">The <see cref="T:System.Linq.Expressions.Expression"/> that the method should be called on. null if the method is a static method (like an extension method)</param>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> to convert</param>
            <param name="arguments">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> argument list</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">If conversion to IEnumerableMethod .</exception>
            <exception cref="T:System.ApplicationException">If support for method with more than one generic argument is not supported.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.ConvertToLocalExpression(ImageVault.Client.Query.Parser.EnumerableExtensionMethod,System.Type,System.Collections.Generic.IList{System.Linq.Expressions.Expression})">
            <summary>
            Creates a MethodCallExpression that is executed locally (ie an IEnumerable extension method call
            </summary>
            <param name="extensionMethod">The <see cref="T:ImageVault.Client.Query.Parser.EnumerableExtensionMethod"/> to create the call for</param>
            <param name="genericArgumentType">The generic argument for the method</param>
            <param name="args">The arguments for the method</param>
            <returns>The <see cref="T:System.Linq.Expressions.MethodCallExpression"/> for the call</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.VerifyThatLocalExecutionHasNotBeenStarted(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Verifies that local execution has not been started. If it has, an exception is thrown....
            </summary>
            <param name="methodCallExpression"></param>
            <exception cref="T:ImageVault.Client.Query.InvalidQueryException">If local execution of query has already begun, please rephrase linq expression that the .</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.EnsureLocalExecutionIsStarted(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Starts local execution if not already done..
            </summary>
            <param name="methodCallExpression"></param>
            <exception cref="T:System.ApplicationException">If cannot start local execution if local execution is already started.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.ParseMethodWithSingleMapping(System.Linq.Expressions.Expression,System.Collections.Generic.IList{System.Linq.Expressions.Expression},ImageVault.Client.Query.Parser.IvQueryMapping,System.Func{System.Linq.Expressions.Expression,System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression,System.Linq.Expressions.MethodCallExpression})">
            <summary>
            Parses a method that only should have a single mapping of a specific type
            </summary>
            <param name="ex"></param>
            <param name="arguments">The arguments passed to the method</param>
            <param name="ivQueryMapping">The type of mapping to parse</param>
            <param name="makeMethodCall">If the mapping leaves leftovers, this callback will create the returning method call</param>
            <returns>The leftovers when the method is removed.</returns>
            <exception cref="T:ImageVault.Client.Query.InvalidQueryException">If there exists more than one mapping.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.GetMappings(ImageVault.Client.Query.Parser.IvQueryMapping)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="be"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.CheckIfBinaryExpressionIsValid(System.Linq.Expressions.ExpressionType)">
            <summary>
            Checks if the supplied binary expression is valid or not.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.VisitBinaryInner(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="be"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.IsSpecificMemberExpression``1(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Checks if a specific expression is a specific member expression matching a specific property/field/method
            </summary>
            <param name="exp">The <see cref="T:System.Linq.Expressions.Expression"/> to check</param>
            <param name="selector">The <see cref="T:System.Linq.Expressions.Expression`1"/> pointing out the member</param>
            <typeparam name="TKey">The type of return value of the member</typeparam>
            <returns>True if specific member is expression, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.IvExpressionParser`3.GetResultFromServer(System.Type)">
            <summary>
            Gets the result from the server
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of items for the result to get</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> containing the result</returns>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.IvExpressionParser`3.ElementType">
            <summary>
            Gets the ElementType of the IvExpressionParser
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.IvExpressionParser`3.Query">
            <summary>
            Get/Sets the Query of the IvExpressionParser
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.IvExpressionParser`3.Client">
            <summary>
            Get/Sets the Client of the IvExpressionParser
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.CachedIvExpressionParser`3.#ctor">
            <summary>
            Initializes a new instance of the <b>CachedIvExpressionParser&lt;T, TQuery, TFilter&gt;</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.CachedIvExpressionParser`3.GetNotCachedResultFromServer(System.Type)">
            <summary>
            Gets the non cached result from the server
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.CachedIvExpressionParser`3.ConstructCacheKey(System.Type)">
            <summary>
            Construct a cache key for the call to GetResultFromServer
            </summary>
            <param name="type"></param>
            <returns>The key to be used to cache the result or null if the result shouldn't be cached</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.CachedIvExpressionParser`3.GetResultFromServer(System.Type)">
            <summary>
            Checks the cache and uses the cached information if any exists.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.CachedIvExpressionParser`3.Cache">
            <summary>
            Gets the Cache of the MediaItemExpressionParser
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.CachedIvExpressionParser`3.SlidingCacheExpiration">
            <summary>
            Gets the SlidingCacheExpiration of the CachedIVExpressionParser
            </summary>
            <value>Defines the Sliding cache expiration value</value>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.CategoryExpressionParser">
            <summary>
            Linq query parser for categories
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.CategoryExpressionParser.#ctor">
            <summary>
            Initializes a new instance of the <b>CategoryExpressionParser</b> class
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.CategoryExpressionParser.GetResultFromServer(System.Type)">
            <summary>
            Gets the result from the server
            </summary>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.EnumerableExtensionMethod">
            <summary>
            Defines all supported extension method that we can translate between
            </summary>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.ExpressionTreeHelpers">
            <summary>
            Summary description for ExpressionTreeHelpers.
            </summary>
            <remarks>
            2011-10-12 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.IsMemberEqualsValueExpression(System.Linq.Expressions.Expression,System.Type,System.String)">
            <summary>
            Checks if the expression is a member equals value expression
            </summary>
            <param name="exp"></param>
            <param name="declaringType"></param>
            <param name="memberName"></param>
            <returns></returns>
            <exception cref="T:System.Exception">If cannot have 'member' == 'member' in an expression!.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.IsSpecificMemberExpression``2(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Checks if the expression is expression that accesses a specific member
            </summary>
            <param name="exp">The expression to check</param>
            <param name="selector">The expression stating the type and member</param>
            <typeparam name="T">The declaring type</typeparam>
            <typeparam name="TKey">The type of the member</typeparam>
            <returns>True if specific member is expression, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.IsSpecificMemberExpression(System.Linq.Expressions.Expression,System.Type,System.String)">
            <summary>
            Checks if the expression is expression that accesses a specific member
            </summary>
            <param name="exp">The expression to check</param>
            <param name="declaringType">The declaring type</param>
            <param name="memberName">The name of the member</param>
            <returns>True if specific member is expression, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.GetValueFromEqualsExpression``3(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            Gets the value from an equals expression
            </summary>
            <param name="be">The equals expression (<see cref="T:System.Linq.Expressions.BinaryExpression"/>) </param>
            <param name="selector">The selector displaying the declaring type and member</param>
            <typeparam name="T">The value of the value to get</typeparam>
            <typeparam name="TElement">The declaring type</typeparam>
            <typeparam name="TKey">The type of the member</typeparam>
            <returns>The found value</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.GetValueFromEqualsExpression``1(System.Linq.Expressions.BinaryExpression,System.Type,System.String)">
            <summary>
            Gets the value from an equals expression
            </summary>
            <param name="be">The equals expression (<see cref="T:System.Linq.Expressions.BinaryExpression"/>) </param>
            <param name="memberDeclaringType">The declaring <see cref="T:System.Type"/> </param>
            <param name="memberName">The name of the member in the equals expression</param>
            <typeparam name="T">The type of value to get</typeparam>
            <returns></returns>
            <exception cref="T:System.Exception">If there is a bug in this program.
             or if there is a bug in this program.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.GetValueFromExpression``1(System.Linq.Expressions.Expression)">
            <summary>
            Gets the value from an expression
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression"/> to evalueate</param>
            <typeparam name="T">The type of value to get</typeparam>
            <returns>The found value</returns>
            <exception cref="T:ImageVault.Client.Query.InvalidQueryException"></exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.GetValue``1(System.Object)">
            <summary>
            Gets a value of a specific type
            </summary>
            <param name="v">The input value</param>
            <typeparam name="T">The type of value to get</typeparam>
            <returns>The converted value</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.GetIEnumerableExtensionMethod(System.Type,System.Type,ImageVault.Client.Query.Parser.EnumerableExtensionMethod)">
            <summary>
            Gets the MethodInfo object that describes a suiting extension method
            </summary>
            <param name="elementType">The generic type of IEnumerable{t} that we want the method for</param>
            <param name="selectorType">The selector type for the extension method (if any)</param>
            <param name="method">The <see cref="T:ImageVault.Client.Query.Parser.EnumerableExtensionMethod"/> describing the method</param>
            <returns>The matching <see cref="T:System.Reflection.MethodInfo"/> </returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.GetIEnumerableExtensionMethod``2(ImageVault.Client.Query.Parser.EnumerableExtensionMethod)">
            <summary>
            Gets the MethodInfo object that describes a suiting extension method
            </summary>
            <param name="method">The <see cref="T:ImageVault.Client.Query.Parser.EnumerableExtensionMethod"/> describing the method</param>
            <typeparam name="T">The generic type of IEnumerable{t} that we want the method for</typeparam>
            <typeparam name="TKey">The selector type for the extension method (if any). If method don't use any selector type this can be any type</typeparam>
            <returns>The matching <see cref="T:System.Reflection.MethodInfo"/> </returns>
            <exception cref="T:System.NotImplementedException">If lookup for the supplied <see cref="T:ImageVault.Client.Query.Parser.EnumerableExtensionMethod"/> is not implemented.</exception>
            <exception cref="T:System.ApplicationException">Internal error</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.MatchExtensionMethod(System.Reflection.MethodInfo,System.String,System.Type[])">
            <summary>
            Checks if a MethodInfo matches the supplied parameters
            </summary>
            <param name="method">The method to check</param>
            <param name="name">The name of the metod</param>
            <param name="parameterTypes">The parameter types, excluding the first parameter (the type that we extend). 
            If type check isn't nesseccary we can submit an array of null values of the correct amount.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="method"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.ReplaceMethodExpression``1(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Action{``0})">
            <summary>
            Replaces a method expression with a assignValue call.
            </summary>
            <param name="arguments"></param>
            <param name="assignValue">The <see cref="T:System.Action`1"/> to callback with the methods second argument value</param>
            <typeparam name="T">The type of value as the second argument</typeparam>
            <exception cref="T:ImageVault.Client.Query.InvalidQueryException">If searchFor has not a constant argument as expression.</exception>
            <returns>The remaining expression</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.CalculateExtensionMethod(System.Reflection.MethodInfo,System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            Calculates which extension method that is called.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/>  to parse</param>
            <param name="arguments">The list of arguments to the method. This list can be modified by the method to better match the selected ExtensionMethod</param>
            <returns>The matching <see cref="T:ImageVault.Client.Query.Parser.EnumerableExtensionMethod"/> or <see cref="F:ImageVault.Client.Query.Parser.EnumerableExtensionMethod.Unknown"/> if not known</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ExpressionTreeHelpers.MethodToString(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Client.Query.Parser.IvExpressionParser`3"/>.
            </summary>
            <param name="methodCallExpression"></param>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Client.Query.Parser.IvExpressionParser`3"/>.</returns>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.ConstantReplacerVisitor">
            <summary>
            This Expression Visitor will search for a specific constant value and then replace it with a supplied one
            </summary>
            <remarks>
            2011-10-12 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ConstantReplacerVisitor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <b>ConstantReplacerVisitor</b> class.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ConstantReplacerVisitor.ReplaceConstant(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            Use this to replace the constant of the specified type
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression"/> to use</param>
            <param name="item">The item to replace the constant with</param>
            <returns>The new <see cref="T:System.Linq.Expressions.Expression"/> with the replaced constant</returns>
            <exception cref="T:ImageVault.Client.Query.InvalidQueryException">If constant was not replaced.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ConstantReplacerVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Will inspect all constants and see if there is any matching constant that we will use to replace it with
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:ImageVault.Client.Query.InvalidQueryException">If constant is present more than once.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ConstantReplacerVisitor.IsMatchingType(System.Type)">
            <summary>
            Checks if the type matches the constat to be replaced
            </summary>
            <param name="type"></param>
            <returns>True if matching is type, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ReadOnlyCollectionExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <param name="sequence"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.ReadOnlyCollectionExtensions.DefaultReadOnlyCollection`1.Empty">
            <summary>
            Gets the Empty of the DefaultReadOnlyCollection
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Query.IClientQueryProvider">
            <summary>
            The IClientQueryProvider interface 
            </summary>
        </member>
        <member name="P:ImageVault.Client.Query.IClientQueryProvider.Client">
            <summary>
            Get/Sets the Client of the MediaItemQueryProvider
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.GlobalRoleIdentityExpressionParser">
            <summary>
            
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.GlobalRoleIdentityExpressionParser.#ctor">
            <summary>
            Initializes a new instance of the <b>GlobalRoleIdentityExpressionParser</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.GlobalRoleIdentityExpressionParser.GetResultFromServer(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Client.Query.IIVQueryable`1">
            <summary>
            The IIVQueryable interface 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ImageVault.Client.Query.ClientQueryProviderBase`1">
            <summary>
            A base Query provider for the Client implementation
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.ClientQueryProviderBase`1.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable"/> object that can evaluate the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the specified expression tree.
            </returns>
        </member>
        <member name="M:ImageVault.Client.Query.ClientQueryProviderBase`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable`1"/> object that can evaluate the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <typeparam name="TElement">The type of the elements of the <see cref="T:System.Linq.IQueryable`1"/> that is returned.</typeparam>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> that can evaluate the query represented by the specified expression tree.
            </returns>
        </member>
        <member name="M:ImageVault.Client.Query.ClientQueryProviderBase`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:ImageVault.Client.Query.ClientQueryProviderBase`1.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the strongly-typed query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:ImageVault.Client.Query.ClientQueryProviderBase`1.ExecuteInner(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
            <exception cref="T:System.InvalidProgramException">If no query over the data source was specified.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.ClientQueryProviderBase`1.IsQueryOverDataSource(System.Linq.Expressions.Expression)">
            <summary>
            Checks if the query uses the datasource
            </summary>
            <param name="expression"></param>
            <returns>True if query over data is source, otherwise false.</returns>
        </member>
        <member name="P:ImageVault.Client.Query.ClientQueryProviderBase`1.Client">
            <summary>
            Get/Sets the Client of the MediaItemQueryProvider
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.ImageFormatExpressionParser">
            <summary>
            Summary description for ImageFormatExpressionParser.
            </summary>
            <remarks>
            2011-11-01 dan: Created
            </remarks>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.MediaFormatBaseExpressionParser`1">
            <summary>
            The baseclass for parsing a MediaFormatBase expression
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaFormatBaseExpressionParser`1.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaFormatBaseExpressionParser</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaFormatBaseExpressionParser`1.GetResultFromServer(System.Type)">
            <summary>
            Gets the result from the server
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of items for the result to get</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> containing the result</returns>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.MediaFormatBaseExpressionParser`1.Format">
            <summary>
            Gets the Format of the MediaFormatBaseExpressionParser
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ImageFormatExpressionParser.#ctor">
            <summary>
            Initializes a new instance of the <b>ImageFormatExpressionParser</b> class.
            </summary>
        </member>
        <member name="T:ImageVault.Client.Query.IVQueryable`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TParser"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Client.Query.QueryableImageVaultBase`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProvider"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.QueryableImageVaultBase`2.#ctor(ImageVault.Client.IClient)">
            <summary>
            Initializes a new instance of the <b>QueryableMediaItem</b> class.
            </summary>
            <param name="client"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="client"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.QueryableImageVaultBase`2.#ctor(ImageVault.Client.IClient,`1,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <b>QueryableMediaItem&lt;T&gt;</b> class.
            </summary>
            <param name="client"></param>
            <param name="provider"></param>
            <param name="expression"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="provider"/> is null
             or if <paramref name="expression"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="expression"/> is out of range.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.QueryableImageVaultBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Client.Query.QueryableImageVaultBase`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:ImageVault.Client.Query.QueryableImageVaultBase`2.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </returns>
        </member>
        <member name="P:ImageVault.Client.Query.QueryableImageVaultBase`2.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <value></value>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="P:ImageVault.Client.Query.QueryableImageVaultBase`2.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
            </returns>
        </member>
        <member name="P:ImageVault.Client.Query.QueryableImageVaultBase`2.Client">
            <summary>
            Get/Sets the Client of the QueryableMediaItem
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Client.Query.IVQueryable`2.#ctor(ImageVault.Client.IClient)">
            <summary>
            Initializes a new instance of the <b>IVQueryable&lt;T&gt;</b> class.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:ImageVault.Client.Query.IVQueryable`2.#ctor(ImageVault.Client.IClient,ImageVault.Client.Query.QueryProvider{`0,`1},System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <b>IVQueryable&lt;T&gt;</b> class.
            </summary>
            <param name="client"></param>
            <param name="provider"></param>
            <param name="expression"></param>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.IvQueryMapping">
            <summary>
            Defines the different supported mappings for the Linq parser
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.Include">
            <summary>
            Maps Include method calls
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.Equals">
            <summary>
            Map Equals BinaryExpressions
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.Contains">
            <summary>
            Maps Contains method calls
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.ContainsAll">
            <summary>
            Maps the ContainsAll method call
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.SearchFor">
            <summary>
            Maps the SearchFor method call
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.WhereCustom">
            <summary>
            Maps the Where(custom) method
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.OrderBy">
            <summary>
            Maps the OrderBy method
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.OrderByDescending">
            <summary>
            Maps the OrderByDescending method
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.Resize">
            <summary>
            Resize method
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.UseFormat">
            <summary>
            UseFormat
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.Crop">
            <summary>
            Crop
            </summary>
        </member>
        <member name="F:ImageVault.Client.Query.Parser.IvQueryMapping.ApplyEffects">
            <summary>
            ApplyEffects
            </summary>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.MediaExpressionParser`2">
            <summary>
            expression parser for media queries
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaExpressionParser`2.#ctor">
            <summary>
            Initializes a new instance of the <b>WebMediaExpressionParser</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaExpressionParser`2.GetNotCachedResultFromServer(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ApplicationException">If cannot instance type .</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaExpressionParser`2.ConstructCacheKey(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.MediaExpressionParser`2.SlidingCacheExpiration">
            <summary>
            Gets the SlidingCacheExpiration of the MediaExpressionParser
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.MediaFilter`1">
            <summary>
            Filter used for media queries
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaFilter`1.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaFilter`1.#ctor(ImageVault.Client.Query.Parser.MediaFilter{`0})">
            <summary>
            Initializes a new instance of the <b>MediaFilter</b> class.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaFilter`1.CopyFrom(ImageVault.Client.Query.Parser.MediaFilter{`0})">
            <summary>
            
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaFilter`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.MediaFilter`1.Id">
            <summary>
            Gets the Id of the MediaFilter
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.MediaFilter`1.Format">
            <summary>
            Get/Sets the Format of the MediaFilter
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.MediaQuery`1">
            <summary>
            Query class for media queries
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.ThumbnailFormatExpressionParser">
            <summary>
            Summary description for ThumbnailFormatExpressionParser.
            </summary>
            <remarks>
            2012-04-25 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.ThumbnailFormatExpressionParser.#ctor">
            <summary>
            Initializes a new instance of the <b>ThumbnailFormatExpressionParser</b> class.
            </summary>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.TransformableMediaExpressionParser`2">
            <summary>
            parser for transformable media queries
            </summary>
            <typeparam name="TMedia"></typeparam>
            <typeparam name="TMediaFormat"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.TransformableMediaExpressionParser`2.#ctor">
            <summary>
            
            Initializes a new instance of the <b>TransformableMediaExpressionParser&lt;TMedia, TMediaEnumerable&gt;</b> class.
            </summary>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.VaultStatisticsExpressionParser">
            <summary>
            Parses Linq queries for VaultStatistics objects
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.VaultStatisticsExpressionParser.#ctor">
            <summary>
            Initializes a new instance of the <b>VaultStatisticsExpressionParser</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.VaultStatisticsExpressionParser.GetResultFromServer(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Client.Query.QueryProvider`2">
            <summary>
            
            </summary>
            <typeparam name="TParser"></typeparam>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.QueryProvider`2.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable"/> object that can evaluate the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            An <see cref="T:System.Linq.IQueryable"/> that can evaluate the query represented by the specified expression tree.
            </returns>
        </member>
        <member name="M:ImageVault.Client.Query.QueryProvider`2.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an <see cref="T:System.Linq.IQueryable`1"/> object that can evaluate the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <typeparam name="TElement">The type of the elements of the <see cref="T:System.Linq.IQueryable`1"/> that is returned.</typeparam>
            <returns>
            An <see cref="T:System.Linq.IQueryable`1"/> that can evaluate the query represented by the specified expression tree.
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.MediaFormatBaseExpressionParser">
            <summary>
            The parser repsonsible for parsing the MediaFormatBase expressions
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.MediaItemExpressionParser`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaItemExpressionParser`1.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaItemExpressionParser&lt;T&gt;</b> class.
            </summary>
            <exception cref="T:ImageVault.Client.Query.InvalidQueryException">If where(custom) cannot be null or empty
             or if invalid MediaItemState 
             or if unknown condition .</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaItemExpressionParser`1.GetNotCachedResultFromServer(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:ImageVault.Client.Query.InvalidQueryException">If cannot execute query on an non Client client.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MediaItemExpressionParser`1.ConstructCacheKey(System.Type)">
            <summary>
            Constructs a cache key for the supplied data
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Client.Query.Parser.MediaItemExpressionParser`1.SlidingCacheExpiration">
            <summary>
            Gets the SlidingCacheExpiration of the MediaItemExpressionParser
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.MetadataDefinitionExpressionParser">
            <summary>
            The linq parser for MetadataDefinitions
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MetadataDefinitionExpressionParser.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataDefinitionExpressionParser</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MetadataDefinitionExpressionParser.GetResultFromServer(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Client.Client">
            <summary>
            Defines the client connection proxy to use when communicating with Core
            </summary>
            <remarks>
            2011-06-13 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Client.#ctor(ImageVault.Client.IClientChannelFactory)">
            <summary>
            Initializes a new instance of the <b>Client</b> class.
            </summary>
            <param name="clientChannelFactory">[Optional] the <see cref="T:ImageVault.Client.IClientChannelFactory"/> to use.</param>
        </member>
        <member name="M:ImageVault.Client.Client.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection)">
            <summary>
            Initializes a new instance of the <b>Client</b> class.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:ImageVault.Client.Client.CreateChannel``1">
            <summary>
            Creates a channel to a service
            </summary>
            <typeparam name="T">The type of the contract interface to call</typeparam>
            <returns>The proxy channel to use for calling the service</returns>
        </member>
        <member name="M:ImageVault.Client.Client.Find(System.Type,ImageVault.Common.Data.Query.MediaItemQuery)">
            <summary>
            Finds media of the requested type that matches the supplied Query
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of items to get</param>
            <param name="query">The <see cref="T:ImageVault.Common.Data.Query.MediaItemQuery"/> to filter the search by</param>
            <returns>The <see cref="T:System.Collections.IList"/> of matching results</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Client.ParseAndPopulate(ImageVault.Common.Data.Query.MediaItemQuery,System.Type,System.Func{System.Collections.Generic.List{ImageVault.Common.Data.MediaItem},System.Collections.IList})">
            <summary>
            Executes the question and populates the result...
            </summary>
            <param name="query">The <see cref="T:ImageVault.Common.Data.Query.MediaItemQuery"/> to filter the search by</param>
            <param name="type">The <see cref="T:System.Type"/> of items to find</param>
            <param name="populateAction">The action that performs the population.</param>
            <returns>The final result</returns>
        </member>
        <member name="M:ImageVault.Client.Client.Query``1">
            <summary>
            Queries the client for items using linq syntax.
            </summary>
            <remarks>Now supports
            MediaItem (and subclasses)
            MetadataDefinition
            </remarks>
            <typeparam name="T">The type of object to get.</typeparam>
            <returns>The matching objects from IV core</returns>
            <exception cref="T:System.NotImplementedException">If requesting types that is not yet implemented in the linq query provider.</exception>
        </member>
        <member name="M:ImageVault.Client.Client.Load``1(System.Int32)">
            <summary>
            Loads a specific item from ImageVault
            </summary>
            <param name="id">The id of the item</param>
            <typeparam name="T">The type of item to load (must be an <see cref="T:ImageVault.Common.Data.IItem`1"/> of int.</typeparam>
            <returns>The matching objects from IV core</returns>
        </member>
        <member name="M:ImageVault.Client.Client.Load``1(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Loads a set of specific items from ImageVault
            </summary>
            <param name="ids">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of id of the items to load</param>
            <typeparam name="T">The type of item to load (must be an <see cref="T:ImageVault.Common.Data.IItem`1"/> of int.</typeparam>
            <returns>The matching objects from IV core</returns>
        </member>
        <member name="M:ImageVault.Client.Client.Store``1(``0)">
            <summary>
            Stores the supplied item
            </summary>
            <param name="item"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.NotImplementedException">If store of </exception>
        </member>
        <member name="P:ImageVault.Client.Client.SendTimeout">
            <summary>
            Gets or sets the interval of time provided for a write operation to complete before the transport raises an exception.
            </summary>
            <value>If null, the default value of the binding will be used</value>
        </member>
        <member name="P:ImageVault.Client.Client.Timeout">
            <summary>
            Get/Sets the Timeout of the Client
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Client.PublishIdentifier">
            <summary>
            Get/Sets the PublishIdentifier of the Client
            </summary>
            <value>Defines the publish identifier to use</value>
        </member>
        <member name="P:ImageVault.Client.Client.MediaService">
            <summary>
            Gets the MediaService of the Client
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Client.ClientChannelFactory">
            <summary>
            Gets the ClientChannelFactory of the Client
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.ClientFactory">
            <summary>
            Creates instances of the client according to the configuration
            </summary>
            <remarks>
            2011-06-22 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.GetCurrentUserClient">
            <summary>
            Gets a client that act as the current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.GetOrCreateClient(ImageVault.Client.ClientFactory.ClientKey,System.Func{ImageVault.Client.Client})">
            <summary>
            Gets a client from the cache or creates one if no one exists.
            </summary>
            <param name="key"></param>
            <param name="clientCreator"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.GetSdkClient">
            <summary>
            Gets the direct sdk client
            </summary>
            <remarks>If <see cref="P:ImageVault.Client.ClientFactory.SdkPublishIdentifier"/> is changed, this must be called again to reflect the update.</remarks>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.CreateClient(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            
            </summary>
            <param name="actAs"></param>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.ClearCache">
            <summary>
            Clears the client cache.
            </summary>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.GetService``1">
            <summary>
            Gets the ImageVault service of the specified type
            </summary>
            <typeparam name="T">The interface defining the service to get. See <see cref="N:ImageVault.Common.Services"/> for supported interfaces</typeparam>
            <returns>The proxy class for communicating with the service</returns>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.GetService(System.Type)">
            <summary>
            Gets the ImageVault service of the specified type
            </summary>
            <param name="serviceType">The interface defining the service to get. See <see cref="N:ImageVault.Common.Services"/> for supported interfaces</param>
            <returns>The proxy class for communicating with the service</returns>
        </member>
        <member name="P:ImageVault.Client.ClientFactory.SdkPublishIdentifier">
            <summary>
            Get/Sets the SdkPublishIdentifier that should be used with all SdkClients
            Works with multiple sites (EPi 7.5) using a dictionary and the <see cref="P:ImageVault.Client.ClientFactory.SdkPublishIdentifierGenerator"/>
            </summary>
            <value>If value is null, then the configured value in the <see cref="P:ImageVault.Client.Configuration.SdkIdentityConfigurationElement.PublishingIdentifier"/> is used.</value>
        </member>
        <member name="P:ImageVault.Client.ClientFactory.SdkPublishIdentifierGenerator">
            <summary>
            Get/Sets the SdkPublishIdentifierGenerator of the ClientFactory
            Required to distinguish between different site instances in a EPi 7.5 multi site scenario
            </summary>
            <value>Sets a function that calculates the SdkPublishIdentifier</value>
            <remarks>Will take precedence over the <see cref="P:ImageVault.Client.ClientFactory.SdkPublishIdentifier"/>. This must be set to null if the value in the
            <see cref="P:ImageVault.Client.ClientFactory.SdkPublishIdentifier"/> should work.</remarks>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.ClientKey.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <b>ClientKey</b> class.
            </summary>
            <param name="prefix"></param>
            <param name="key"></param>
            <param name="expires"></param>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.ClientKey.Equals(ImageVault.Client.ClientFactory.ClientKey)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Client.ClientFactory.ClientKey"/> is equal to the current 
            <b>ClientKey</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Client.ClientFactory.ClientKey"/> to compare with the current <see cref="T:ImageVault.Client.ClientFactory.ClientKey"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Client.ClientFactory.ClientKey"/> is equal to the current <b>ClientKey</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.ClientKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <b>ClientKey</b>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:ImageVault.Client.ClientFactory.ClientKey"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <b>ClientKey</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.ClientKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ImageVault.Client.ClientFactory.ClientKey"/>.</returns>
        </member>
        <member name="P:ImageVault.Client.ClientFactory.ClientKey.Expires">
            <summary>
            Gets the Expires of the ClientKey
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Client.ClientFactory.ClientSecurityManagerClientKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>ClientSecurityManagerClientKey</b> class.
            </summary>
            <param name="userIdentity"></param>
        </member>
        <member name="T:ImageVault.Client.ClientFactory.FormsAuthClientKey">
            <summary>
            Client key to identify a FormsAuth client
            </summary>
        </member>
        <member name="T:ImageVault.Client.Query.InvalidQueryException">
            <summary>
            Summary description for InvalidQueryException.
            </summary>
            <remarks>
            2011-10-12 dan: Created 
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Query.InvalidQueryException.#ctor">
            <summary>
            Initializes a new instance of the <b>InvalidQueryException</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.InvalidQueryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>InvalidQueryException</b> class with a specified error message.
            </summary>
            <param name="message">a message that describes the exception</param>
        </member>
        <member name="M:ImageVault.Client.Query.InvalidQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <b>InvalidQueryException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">a message that describes the exception</param>
            <param name="innerException">The exception that caused this exception</param>
        </member>
        <member name="M:ImageVault.Client.Query.InvalidQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>InvalidQueryException</b> class with serialized data. 		/// </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination.</param>
        </member>
        <member name="M:ImageVault.Client.Query.InvalidQueryException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <b>InvalidQueryException</b> class with a specified formatted error message.		/// </summary>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items. </param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
        </member>
        <member name="M:ImageVault.Client.Query.InvalidQueryException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the SerializationInfo with information about the 
            exception. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination.</param>
        </member>
        <member name="P:ImageVault.Client.Query.InvalidQueryException.Message">
            <summary>
            Gets the Message of the InvalidQueryException
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.MetadataExpressionParser">
            <summary>
            Parser used to parse a Metadata linq query
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MetadataExpressionParser.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataExpressionParser</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.MetadataExpressionParser.GetResultFromServer(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.VaultExpressionParser">
            <summary>
            Summary description for VaultExpressionParser.
            </summary>
            <remarks>
            2011-11-01 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.VaultExpressionParser.#ctor">
            <summary>
            Initializes a new instance of the <b>VaultExpressionParser</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.VaultExpressionParser.GetResultFromServer(System.Type)">
            <summary>
            Gets the result from the server
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of items for the result to get</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> containing the result</returns>
        </member>
        <member name="T:ImageVault.Client.Query.Parser.WebMediaFormatExpressionParser">
            <summary>
            The parser responsible for parsing a WebMediaFormat expression
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.Parser.WebMediaFormatExpressionParser.#ctor">
            <summary>
            Initializes a new instance of the <b>WebMediaFormatExpressionParser</b> class.
            </summary>
        </member>
        <member name="T:ImageVault.Client.Query.IIVQueryableExtensions">
            <summary>
            
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Include``2(ImageVault.Client.Query.IIVQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="selector"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Where``1(ImageVault.Client.Query.IIVQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Where``1(ImageVault.Client.Query.IIVQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="predicate"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null
             or if <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Take``1(ImageVault.Client.Query.IIVQueryable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="source">The sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>An <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> that contains the specified number of elements from the start of the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Skip``1(ImageVault.Client.Query.IIVQueryable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="source">The sequence to return elements from.</param>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>An <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> that contains elements that occur after the specified index in the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.SearchFor``1(ImageVault.Client.Query.IIVQueryable{``0},System.String)">
            <summary>
            Searches the query by a keyword
            </summary>
            <param name="source"></param>
            <param name="keyword"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Where``1(ImageVault.Client.Query.IIVQueryable{``0},System.String)">
            <summary>
            Filter for a custom condition
            </summary>
            <param name="source">The sequence to return elements from.</param>
            <param name="condition">The custom condition that should be fulfilled</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.OrderBy``2(ImageVault.Client.Query.IIVQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in order according to the keySelector
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector"></param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <typeparam name="TKey"></typeparam>
            <returns>An <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> whose elements are sorted according to the sort order.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.OrderByDescending``2(ImageVault.Client.Query.IIVQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in a descending order according to the keySelector
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="keySelector">The selector whos values should be used as sort values</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <typeparam name="TKey">Type of values to sort by</typeparam>
            <returns>An <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> whose elements are sorted according to the sort order.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null
             or if <paramref name="keySelector"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Resize(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.WebMedia},System.Nullable{System.Int32},System.Nullable{System.Int32},ImageVault.Common.Data.ResizeMode)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="resizeMode"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Resize(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Video},System.Nullable{System.Int32},System.Nullable{System.Int32},ImageVault.Common.Data.ResizeMode)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="resizeMode"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Resize(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Thumbnail},System.Nullable{System.Int32},System.Nullable{System.Int32},ImageVault.Common.Data.ResizeMode)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="resizeMode"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Resize(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Image},System.Nullable{System.Int32},System.Nullable{System.Int32},ImageVault.Common.Data.ResizeMode)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="resizeMode"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.UseFormat(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.WebMedia},System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="formatId"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.UseFormat(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.WebMedia},ImageVault.Common.Data.WebMediaFormat)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="format"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.UseFormat(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Thumbnail},ImageVault.Common.Data.ThumbnailFormat)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="format"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.UseFormat(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Thumbnail},System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="formatId"></param> 
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Crop(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Thumbnail},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Crop(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.WebMedia},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Crop(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Image},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.Crop(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Video},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.UseFormat(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Media},ImageVault.Common.Data.MediaFormatBase)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="format"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.UseFormat(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Media},System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="formatId"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.ApplyEffects(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Thumbnail},System.Collections.Generic.IEnumerable{ImageVault.Common.Data.Effects.Effect})">
            <summary>
            Applies a set of effects on the Thumbnail
            </summary>
            <param name="source"></param>
            <param name="effects"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.ApplyEffects(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.WebMedia},System.Collections.Generic.IEnumerable{ImageVault.Common.Data.Effects.Effect})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="effects"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.ApplyEffects(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Image},System.Collections.Generic.IEnumerable{ImageVault.Common.Data.Effects.Effect})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="effects"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Client.Query.IIVQueryableExtensions.ApplyEffects(ImageVault.Client.Query.IIVQueryable{ImageVault.Common.Data.Video},System.Collections.Generic.IEnumerable{ImageVault.Common.Data.Effects.Effect})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="effects"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null.</exception>
        </member>
        <member name="T:ImageVault.Client.Query.TypeSystem">
            <summary>
            Summary description for TypeSystem.
            </summary>
            <remarks>
            2011-10-12 dan: Created
            </remarks>
        </member>
        <member name="T:ImageVault.Client.RestClientChannelFactory">
            <summary>
            Create channels for communication with core using Rest
            </summary>
            <remarks>
            2012-09-10 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.RestClientChannelFactory.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>RestClientChannelFactory</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.RestClientChannelFactory.#ctor(ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>RestClientChannelFactory</b> class.
            </summary>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.RestClientChannelFactory.#ctor">
            <summary>
            Initializes a new instance of the <b>RestClientChannelFactory</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.RestClientChannelFactory.CreateChannel``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Client.RestClientChannelFactory.ChannelWithIssuedToken``1(ImageVault.Client.Configuration.ImageVaultCoreConfigurationElement)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">If unknow scheme .</exception>
        </member>
        <member name="M:ImageVault.Client.RestClientChannelFactory.CreateUploadServiceChannel(ImageVault.Client.Configuration.ImageVaultCoreConfigurationElement)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Client.RestClientChannelFactory.SendTimeout">
            <summary>
            Gets or sets the interval of time provided for a write operation to complete before the transport raises an exception.
            </summary>
            <value>If null, the default value of the binding will be used</value>
        </member>
        <member name="P:ImageVault.Client.RestClientChannelFactory.Timeout">
            <summary>
            Get/Sets the Timeout of the Client
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.RestClientChannelFactory.AuthUtil">
            <summary>
            Gets the AuthUtil of the RestClientChannelFactory
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Client.Rest.IdentityServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>IdentityServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="T:ImageVault.Client.Rest.IRequestContent">
            <summary>
            The IRequestContent interface 
            </summary>
        </member>
        <member name="M:ImageVault.Client.Rest.IRequestContent.WriteContent(System.Net.HttpWebRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="P:ImageVault.Client.Rest.IRequestContent.ContentLength">
            <summary>
            Gets the ContentLength of the IRequestContent
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.IRequestContent.ContentType">
            <summary>
            Gets the ContentType of the IRequestContent
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Rest.JsonRequestContent">
            <summary>
            Content as Json data
            </summary>
        </member>
        <member name="M:ImageVault.Client.Rest.JsonRequestContent.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <b>JsonRequestContent</b> class.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.JsonRequestContent.WriteContent(System.Net.HttpWebRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="P:ImageVault.Client.Rest.JsonRequestContent.Content">
            <summary>
            Get/Sets the Content of the JsonRequestContent
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.JsonRequestContent.ContentLength">
            <summary>
            Gets the ContentLength of the JsonRequestContent
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.JsonRequestContent.ContentType">
            <summary>
            Gets the ContentType of the JsonRequestContent
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Client.Rest.LanguageServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>LanguageServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.MediaAnalyserServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>MediaAnalyserServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.MediaConversionServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>MediaConversionServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.MediaFormatServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>MediaFormatServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.MediaShareServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>MediaShareServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.MediaShareServiceClientProxy.Save(ImageVault.Common.Data.MediaShare)">
            <inheritdoc/> 
        </member>
        <member name="M:ImageVault.Client.Rest.MediaShareServiceClientProxy.Get(System.String,ImageVault.Common.Data.Query.MediaItemQuery)">
            <inheritdoc/> 
        </member>
        <member name="M:ImageVault.Client.Rest.MediaShareServiceClientProxy.FindShareByMediaItemId(System.Int32)">
            <inheritdoc/> 
        </member>
        <member name="M:ImageVault.Client.Rest.MediaShareServiceClientProxy.Delete(System.String)">
            <inheritdoc/> 
        </member>
        <member name="M:ImageVault.Client.Rest.MediaShareServiceClientProxy.GetShares(System.Collections.Generic.IList{System.String})">
            <inheritdoc/> 
        </member>
        <member name="M:ImageVault.Client.Rest.MediaStorageServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>MediaStorageServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.MetadataDefinitionServiceClientProxy.#ctor(ImageVault.Client.Configuration.ClientConfigurationSection,ImageVault.Client.Authentication.IvOAuthTokenUtil)">
            <summary>
            Initializes a new instance of the <b>MetadataDefinitionServiceClientProxy</b> class.
            </summary>
            <param name="configuration"></param>
            <param name="authUtil"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.StreamRequestContent.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <b>StreamRequestContent</b> class.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ImageVault.Client.Rest.StreamRequestContent.WriteContent(System.Net.HttpWebRequest)">
            <summary>
            
            </summary>
            <param name="request"></param>
        </member>
        <member name="P:ImageVault.Client.Rest.StreamRequestContent.Stream">
            <summary>
            Get/Sets the Stream of the StreamRequestContent
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.StreamRequestContent.ContentLength">
            <summary>
            Gets the ContentLength of the StreamRequestContent
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Client.Rest.StreamRequestContent.ContentType">
            <summary>
            Gets the ContentType of the StreamRequestContent
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Client.Security.ImageVaultRootCertificateServicePointManager">
            <summary>
            Allows certificates issued by ImageVault root certificates
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Client.Security.ImageVaultRootCertificateServicePointManager.#ctor">
            <summary>
            Initializes a new instance of the <b>ImageVaultRootCertificateServicePointManager</b> class.
            </summary>
        </member>
        <member name="T:ImageVault.Client.Web.MediaProxyHandler">
            <summary>
            Proxy handler for the MediaService.
            Requires authentication
            </summary>
        </member>
        <member name="M:ImageVault.Client.Web.MediaProxyHandler.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaProxyHandler</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Client.Web.MediaProxyHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ImageVault.Client.Web.MediaProxyHandler.GetRealUrl(System.Uri)">
            <summary>
            Gets the real url from the supplied one
            </summary>
            <param name="uri">The uri that was requested of the proxy</param>
            <returns>The real url that the proxy should request</returns>
            <exception cref="T:System.ArgumentException">If the supplied uri is not a recognized media url.</exception>
        </member>
        <member name="M:ImageVault.Client.Web.MediaProxyHandler.InternalProcessRequest(System.Web.HttpContext,System.String)">
            <summary>
            Internal processing of the request. In this case we are fetching the media from Core
            </summary>
            <param name="context"></param>
            <param name="location"></param>
        </member>
        <member name="M:ImageVault.Client.Web.MediaProxyHandler.SetCachePolicy(System.Web.HttpResponse)">
            <summary>
            Set parameters needed for caching
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:ImageVault.Client.Web.MediaProxyHandler.CopyResponseHeaders(System.Net.WebHeaderCollection,System.Web.HttpResponseBase)">
            <summary>
            Copies the headers from one response to another
            </summary>
            <param name="headers"></param>
            <param name="dest"></param>
        </member>
        <member name="M:ImageVault.Client.Web.MediaProxyHandler.CopyRequestHeaders(System.Collections.Specialized.NameValueCollection,System.Net.HttpWebRequest)">
            <summary>
            Copies the headers from one request to another
            </summary>
            <param name="headers"></param>
            <param name="dest"></param>
            <exception cref="T:System.ApplicationException">If error setting header .</exception>
        </member>
        <member name="T:ImageVault.Client.Web.PublishedMediaProxyHandler">
            <summary>
            Proxy handler for Published media 
            Doesn't require authentication
            </summary>
            <remarks>
            2013-10-14 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Client.Web.PublishedMediaProxyHandler.#ctor">
            <summary>
            Initializes a new instance of the <b>PublishedMediaProxyHandler</b> class.
            </summary>
        </member>
    </members>
</doc>
