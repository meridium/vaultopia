<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageVault.EPiServer</name>
    </assembly>
    <members>
        <member name="T:ImageVault.EPiServer.ClientExtensionMethods">
            <summary>
            Extension methods for the ImageVault.Client.Client class that allows
            easy access to media when working with episerver properties
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.Client,ImageVault.EPiServer.PropertyMedia)">
            <summary>
            Gets a list of media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="propertyMedia">The <see cref="T:ImageVault.EPiServer.PropertyMedia"/> that contains the selected media</param>
            <typeparam name="T">The type of <see cref="T:ImageVault.Common.Data.IItem`1"/> to get</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of <see cref="T:ImageVault.Common.Data.IItem`1"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.Client,ImageVault.EPiServer.MediaReference)">
            <summary>
            Gets a list of media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="mediaReference">The <see cref="T:ImageVault.EPiServer.MediaReference"/> that contains the selected media</param>
            <typeparam name="T">The type of <see cref="T:ImageVault.Common.Data.IItem`1"/> to get</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of <see cref="T:ImageVault.Common.Data.IItem`1"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.Client,ImageVault.EPiServer.PropertyMediaList)">
            <summary>
            Gets a list of media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="propertyMediaList">The <see cref="T:ImageVault.EPiServer.PropertyMediaList"/> that contains the selected media</param>
            <typeparam name="T">The type of <see cref="T:ImageVault.Common.Data.IItem`1"/> to get</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of <see cref="T:ImageVault.Common.Data.IItem`1"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.Client,System.Collections.Generic.IEnumerable{ImageVault.EPiServer.MediaReference})">
            <summary>
            Gets a list of media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="mediaReferenceList">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the selected media</param>
            <typeparam name="T">The type of <see cref="T:ImageVault.Common.Data.IItem`1"/> to get</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of <see cref="T:ImageVault.Common.Data.IItem`1"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.IClient,ImageVault.EPiServer.PropertyMedia,ImageVault.EPiServer.PropertyMediaSettings)">
            <summary>
            Gets the media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="propertyMedia">The <see cref="T:ImageVault.EPiServer.PropertyMedia"/> that contains the selected media (and effects)</param>
            <param name="settings">Optional settings parameter for any <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> for the property</param>
            <typeparam name="T">The type of media to get. Can be a <see cref="T:ImageVault.Common.Data.Media"/> (or subclass) or a <see cref="T:ImageVault.Common.Data.MediaItem"/> (or subclass).</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of the requested <typeparamref name="T"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.IClient,ImageVault.EPiServer.PropertyMedia,System.Web.Mvc.ViewContext)">
            <summary>
            Gets the media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="propertyMedia">The <see cref="T:ImageVault.EPiServer.PropertyMedia"/> that contains the selected media (and effects)</param>
            <param name="viewContext">The <see cref="T:System.Web.Mvc.ViewContext"/> used to get <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> and 
            tracking information using a <see cref="T:ImageVault.EPiServer.EPiServerPublishDetails"/> instance created by the <see cref="M:ImageVault.EPiServer.ViewContextExtensions.GetPublishDetails(System.Web.Mvc.ViewContext)"/> method</param>
            <typeparam name="T">The type of media to get. Can be a <see cref="T:ImageVault.Common.Data.Media"/> (or subclass) or a <see cref="T:ImageVault.Common.Data.MediaItem"/> (or subclass).</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of the requested <typeparamref name="T"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.IClient,ImageVault.EPiServer.PropertyMediaList,ImageVault.EPiServer.PropertyMediaSettings)">
            <summary>
            Gets the media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="propertyMediaList">The <see cref="T:ImageVault.EPiServer.PropertyMediaList"/> that contains the selected media (and effects)</param>
            <param name="settings">Optional settings parameter for any <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> for the property</param>
            <typeparam name="T">The type of media to get. Can be a <see cref="T:ImageVault.Common.Data.Media"/> (or subclass) or a <see cref="T:ImageVault.Common.Data.MediaItem"/> (or subclass).</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of the requested <typeparamref name="T"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.IClient,ImageVault.EPiServer.PropertyMediaList,System.Web.Mvc.ViewContext)">
            <summary>
            Gets the media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="propertyMediaList">The <see cref="T:ImageVault.EPiServer.PropertyMediaList"/> that contains the selected media (and effects)</param>
            <param name="viewContext">The <see cref="T:System.Web.Mvc.ViewContext"/> used to get <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> and 
            tracking information using a <see cref="T:ImageVault.EPiServer.EPiServerPublishDetails"/> instance created by the <see cref="M:ImageVault.EPiServer.ViewContextExtensions.GetPublishDetails(System.Web.Mvc.ViewContext)"/> method</param>
            <typeparam name="T">The type of media to get. Can be a <see cref="T:ImageVault.Common.Data.Media"/> (or subclass) or a <see cref="T:ImageVault.Common.Data.MediaItem"/> (or subclass).</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of the requested <typeparamref name="T"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.IClient,ImageVault.EPiServer.MediaReference,ImageVault.EPiServer.PropertyMediaSettings)">
            <summary>
            Gets the media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="mediaReference">The <see cref="T:ImageVault.EPiServer.MediaReference"/> that contains the selected media (and effects)</param>
            <param name="settings">Optional settings parameter for any <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> for the property</param>
            <typeparam name="T">The type of media to get. Can be a <see cref="T:ImageVault.Common.Data.Media"/> (or subclass) or a <see cref="T:ImageVault.Common.Data.MediaItem"/> (or subclass).</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of the requested <typeparamref name="T"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.IClient,ImageVault.EPiServer.MediaReference,System.Web.Mvc.ViewContext)">
            <summary>
            Gets the media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="mediaReference">The <see cref="T:ImageVault.EPiServer.MediaReference"/> that contains the selected media (and effects)</param>
            <param name="viewContext">The <see cref="T:System.Web.Mvc.ViewContext"/> used to get <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> and 
            tracking information using a <see cref="T:ImageVault.EPiServer.EPiServerPublishDetails"/> instance created by the <see cref="M:ImageVault.EPiServer.ViewContextExtensions.GetPublishDetails(System.Web.Mvc.ViewContext)"/> method</param>
            <typeparam name="T">The type of media to get. Can be a <see cref="T:ImageVault.Common.Data.Media"/> (or subclass) or a <see cref="T:ImageVault.Common.Data.MediaItem"/> (or subclass).</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of the requested <typeparamref name="T"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.IClient,System.Collections.Generic.IEnumerable{ImageVault.EPiServer.MediaReference},System.Web.Mvc.ViewContext)">
            <summary>
            Gets the media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="mediaReferences">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ImageVault.EPiServer.MediaReference"/> that contains the selected media (and effects)</param>
            <param name="viewContext">The <see cref="T:System.Web.Mvc.ViewContext"/> used to get <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> and 
            tracking information using a <see cref="T:ImageVault.EPiServer.EPiServerPublishDetails"/> instance created by the <see cref="M:ImageVault.EPiServer.ViewContextExtensions.GetPublishDetails(System.Web.Mvc.ViewContext)"/> method</param>
            <typeparam name="T">The type of media to get. Can be a <see cref="T:ImageVault.Common.Data.Media"/> (or subclass) or a <see cref="T:ImageVault.Common.Data.MediaItem"/> (or subclass).</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of the requested <typeparamref name="T"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.Load``1(ImageVault.Client.IClient,System.Collections.Generic.IEnumerable{ImageVault.EPiServer.MediaReference},ImageVault.EPiServer.PropertyMediaSettings)">
            <summary>
            Gets the media selected in the property
            </summary>
            <param name="client">The <see cref="T:ImageVault.Client.IClient"/> to use to get the media</param>
            <param name="mediaReferences">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ImageVault.EPiServer.MediaReference"/> that contains the selected media (and effects)</param>
            <param name="settings">Optional settings parameter for any <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> for the property</param>
            <typeparam name="T">The type of media to get. Can be a <see cref="T:ImageVault.Common.Data.Media"/> (or subclass) or a <see cref="T:ImageVault.Common.Data.MediaItem"/> (or subclass).</typeparam>
            <returns>The requested <see cref="T:ImageVault.Client.Query.IIVQueryable`1"/> of the requested <typeparamref name="T"/></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ClientExtensionMethods.GetSettingsEffects(ImageVault.EPiServer.PropertyMediaSettings)">
            <summary>
            Gets the list of effects from the supplied PropertyMediaSettings
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.EPiServer.EPiServerBugs.ContentDataExtensions">
            <summary>
            Includes extension methods for fixing episerver bugs.
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.EPiServerBugs.ContentDataExtensions.GetPropertySettingsFixed``1(EPiServer.Core.IContentData,System.String)">
            <summary>
            Workaround method to fix property settings for embedded block properties
            http://world.episerver.com/forum/developer-forum/-EPiServer-75-CMS/Thread-Container/2015/10/bug-getpropertysettings-for-embedded-blocks-don39t-work/
            </summary>
            <typeparam name="TPropertySettings"></typeparam>
            <param name="contentData"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.EPiServer.EPiServerPublishDetails">
            <summary>
            Publish details for episerver page
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.EPiServerPublishDetails.Text">
            <summary>
            Explaining text for place of media usage
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.EPiServerPublishDetails.Url">
            <summary>
            Url to place of media usage
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.EPiServerPublishDetails.PageName">
            <summary>
            Name of page
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.EPiServerPublishDetails.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.EPiServerPublishDetails.GroupId">
            <summary>
            Group id
            </summary>
        </member>
        <member name="T:ImageVault.EPiServer.GenericCache">
            <summary>
            Contains a generic cache that can be used to cache items
            (Wraps HttpRuntime.Cache)
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.GenericCache.GetOrCreate``1(System.String,System.Func{``0},System.Nullable{System.TimeSpan})">
            <summary>
            Gets or creates an item in the cache
            </summary>
            <typeparam name="T">The type of item to cache or create</typeparam>
            <param name="key">The key to use. If null or empty, no item is cached, creator is called without passing cache</param>
            <param name="creator">Function that creates the item if needed</param>
            <param name="expires">The <see cref="T:System.TimeSpan"/> to pass until the item expires. If omitted, 1 hour is set as default</param>
            <returns>The item representing the cache key.</returns>
        </member>
        <member name="T:ImageVault.EPiServer.ImageVaultClient">
            <summary>
            Helper class for retrieving the correct client for EPiServer
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultClient.GetPageClient">
            <summary>
            Gets the correct client depending on the state of the current page
            </summary>
            <remarks>Checks the <see cref="P:ImageVault.EPiServer.ImageVaultClient.UsePublishedMediaUrls"/> to determine if the <see cref="M:ImageVault.Client.ClientFactory.GetSdkClient"/> 
            or the <see cref="M:ImageVault.Client.ClientFactory.GetCurrentUserClient"/> should be used.</remarks>
            <returns></returns>
        </member>
        <member name="P:ImageVault.EPiServer.ImageVaultClient.UsePublishedMediaUrls">
            <summary>
            Published media urls should only be used on Published pages
            </summary>
            <value>If <see cref="P:EPiServer.Editor.PageEditing.PageIsInEditMode"/> or the current page is in <see cref="F:EPiServer.Core.VersionStatus.DelayedPublish"/>, 
            this returns false.</value>
        </member>
        <member name="P:ImageVault.EPiServer.MediaQueryData.Client">
            <summary>
            Client to use to get media
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.MediaQueryData.PropertySettings">
            <summary>
            Property settings
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.MediaQueryData.CurrentPage">
            <summary>
            Current page data
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.MediaQueryData.UseSdkClient">
            <summary>
            If SDK client should be used for public URLs (User is not logged in or page is pending to be published)
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.MediaQueryData.GroupId">
            <summary>
            Group id for grouping media usages
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.MediaQueryData.PropertyName">
            <summary>
            Name of property
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.ViewContextExtensions.GetSettings``1(System.Web.Mvc.ViewContext)">
            <summary>
            Get the property settings for the current property
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ViewContextExtensions.GetImageVaultPropertyCacheKey``1(System.Web.Mvc.ViewContext)">
            <summary>
            Gets a cache key based on the current property 
            </summary>
            <remarks>
            will only work on properties of type <see cref="T:ImageVault.EPiServer.MediaReference"/> or <see cref="T:ImageVault.EPiServer.MediaReferenceList`1"/> of <see cref="T:ImageVault.EPiServer.MediaReference"/>.
            All other properties will have a null return value
            </remarks>
            <param name="ctx"></param>
            <typeparam name="T">The type of data that the cache should be storing.</typeparam>
            <returns>The found cache key or null if no suitable property was found or if the model is null.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.ViewContextExtensions.GetImageVaultPropertyCacheKey(System.Web.Mvc.ViewContext,System.Type)">
            <summary>
            Gets a cache key based on the current property 
            </summary>
            <remarks>
            will only work on properties of type <see cref="T:ImageVault.EPiServer.MediaReference"/> or <see cref="T:ImageVault.EPiServer.MediaReferenceList`1"/> of <see cref="T:ImageVault.EPiServer.MediaReference"/>.
            All other properties will have a null return value
            </remarks>
            <param name="ctx"></param>
            <param name="instanceType">The type of data that the cache should be storing. If MediaItem, this can be null</param>
            <returns>The found cache key or null if no suitable property was found or if the model is null.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.ViewContextExtensions.GetPublishDetails(System.Web.Mvc.ViewContext)">
            <summary>
            Gets a <see cref="T:ImageVault.EPiServer.EPiServerPublishDetails"/> from the current context
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.EPiServer.ImageVaultReference">
            <summary>
            Class to define a reference to an imagevault asset
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.EPiServer.ImageVaultReference.Attribute">
            <summary>
            Get/Sets the Attribute of the ImageVaultReference
            </summary>
            <value>The attribute where the value was found (or null if not used)</value>
        </member>
        <member name="P:ImageVault.EPiServer.ImageVaultReference.Published">
            <summary>
            Get/Sets the Published of the ImageVaultReference
            </summary>
            <value>True if the reference is a published item. False if it is an internal.</value>
        </member>
        <member name="P:ImageVault.EPiServer.ImageVaultReference.MediaKey">
            <summary>
            Get/Sets the MediaKey of the ImageVaultReference
            </summary>
            <value>The media key of the reference</value>
        </member>
        <member name="P:ImageVault.EPiServer.ImageVaultReference.OptionalFlags">
            <summary>
            Get/Sets the OptionalFlags of the ImageVaultReference
            </summary>
            <value>Any optional value</value>
        </member>
        <member name="P:ImageVault.EPiServer.ImageVaultReference.Post">
            <summary>
            Get/Sets the Post of the <see cref="T:ImageVault.EPiServer.ImageVaultReference"/>
            </summary>
            <value>The value after the media key</value>
        </member>
        <member name="P:ImageVault.EPiServer.ImageVaultReference.Pre">
            <summary>
            Get/Sets the Pre of the <see cref="T:ImageVault.EPiServer.ImageVaultReference"/>
            </summary>
            <value>The value before the media marker (/PublishedMedia/ or /Media/)</value>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultReference.Parse(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Parses the supplied attribute for a iv asset link
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultReference.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultReference.CreatePublishedUrl(System.String)">
            <summary>
            Creates a published url using the supplied key
            </summary>
            <param name="publishedKey"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.EPiServer.ImageVaultReferenceUtil">
            <summary>
            Summary description for ImageVaultReferenceUtil.
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultReferenceUtil.IterateAllImageVaultReferencesInHtml(System.String,System.Func{ImageVault.EPiServer.ImageVaultReference,System.Boolean})">
            <summary>
            Parses the supplied HTML and looks for internal ImageVault links and replaces them with published ones.
            </summary>
            <param name="html">The html to parse</param>
            <param name="processor"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultReferenceUtil.IterateAllImageVaultReferencesInNode(HtmlAgilityPack.HtmlNode,System.Func{ImageVault.EPiServer.ImageVaultReference,System.Boolean})">
            <summary>
            Replaces any found internal link with published ones
            </summary>
            <param name="node">The <see cref="T:HtmlAgilityPack.HtmlNode"/> to parse</param>
            <param name="processor"></param>
            <returns>True if any changes where made, false otherwize</returns>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultReferenceUtil.IterateAllImageVaultReferencesInAttribute(HtmlAgilityPack.HtmlAttribute,System.Func{ImageVault.EPiServer.ImageVaultReference,System.Boolean})">
            <summary>
             Replaces any found internal link with published ones
            </summary>
            <param name="attribute">The attribute to parse</param>
            <param name="processor"></param>
            <returns>True if any changes where made, false otherwize</returns>
        </member>
        <member name="T:ImageVault.EPiServer.MediaReference">
            <summary>
            This class describes the data stored in the PropertyMedia and is used as a reference 
            to lookup media from ImageVault.
            Here we store the Id of the selected media, edits for the media and additional metadata entered by the EPiServer editor.
            </summary>
            <example></example>
        </member>
        <member name="M:ImageVault.EPiServer.MediaReference.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaReference</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.MediaReference.#ctor(ImageVault.EPiServer.MediaReference)">
            <summary>
            Initializes a new instance of the <b>MediaReference</b> class.
            </summary>
            <param name="mediaReference"></param>
        </member>
        <member name="M:ImageVault.EPiServer.MediaReference.CreateWritableClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.MediaReference.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.EPiServer.MediaReferenceList`1">
            <summary>
            Defines a media list that can be serialized to a EPiServer property
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.EPiServer.MediaReferenceList`1.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaReferenceList&lt;T&gt;</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.MediaReferenceList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <b>MediaReferenceList&lt;T&gt;</b> class.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:ImageVault.EPiServer.MediaReferenceList`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>MediaReferenceList&lt;T&gt;</b> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ImageVault.EPiServer.MediaReferenceList`1.CreateWritableClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.MediaReferenceList`1.EPiServer#Data#Entity#IReadOnly#CreateWritableClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.EPiServer.ImageVaultModule">
            <summary>
            Plugin for ImageVault that handles the setup of the different ImageVault components inside EPiServer
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.EPiServer.ImageVaultModule.MediaBaseUrl">
            <summary>
            Get/Sets the MediaBaseUrl of the ImageVaultModule
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.Initialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.RegisterRoutes">
            <summary>
            Registers the routes that is needed for the module (rest and identity handlers)
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.GetContentByLink(EPiServer.Core.ContentReference)">
            <summary>
            
            </summary>
            <param name="contentReference"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.CalculateMediaProxyBasePath">
            <summary>
            Calculates the base path to the MediaProxyHandler route
            </summary>
            <remarks>
            If disableMediaProxyHandler is set to true then we return null
            If no external ImageVaultUrl is configured, then we use the routes from the ui instead.
            If the DefaultMediaUrlBase is configured to a relative url then we add those routes to it
            </remarks>
            <returns>null if no route should be added, otherwize the basepath of the route</returns>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.GeneratePublishLinksOnProperties(EPiServer.Core.IContent)">
            <summary>
            Loop every property and get public urls
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.ReplaceInternalLinksInPropertyLongString(EPiServer.Core.PropertyLongString,ImageVault.Client.IClient,ImageVault.Common.Data.PublishInfo)">
            <summary>
            
            </summary>
            <param name="pls"></param>
            <param name="client"></param>
            <param name="publishInfo"></param>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.InstancePublishedContent(System.Object,EPiServer.ContentEventArgs)">
            <summary>
            On instance published content
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.InstancePublishingContent(System.Object,EPiServer.ContentEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.GeneratePublishLinks(EPiServer.Core.PropertyData,ImageVault.Client.IClient,ImageVault.Common.Data.PublishInfo)">
            <summary>
            Replaces a ContentData's internal IV links with published links.
            This function also handles nested blocks.
            This function also gets public url for property media and media list
            </summary>
            <param name="contentData">The ContentData object</param>
            <param name="client"></param>
            <param name="publishInfo"></param>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.Uninitialize(EPiServer.Framework.Initialization.InitializationEngine)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.Preload(System.String[])">
            <summary>
            
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:ImageVault.EPiServer.ImageVaultModule.ReadFromXmlFile">
            <summary>
            Reads the ClientConfigurationSection from the imagevault.client.config file
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageVault.EPiServer.PropertyMedia">
            <summary>
            This is a Property that allows the editor to select a Media item from ImageVault
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia.#ctor">
            <summary>
            Initializes a new instance of the <b>PropertyMedia</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia.#ctor(ImageVault.EPiServer.MediaReference)">
            <summary>
            Initializes a new instance of the <b>PropertyMedia</b> class.
            </summary>
            <param name="mediaReference"></param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia.CreatePropertyControl">
            <summary>
            Initializes a new instance of PropertyMediaControl
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageVault.EPiServer.PropertyMediaControl`1">
            <summary>
            Defines the control responsible for displaying the PropertyMedia
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaControl`1.ThumbnailFormatUtil">
            <summary>
            Gets the ThumbnailFormatUtil of the PropertyMediaControl
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControl`1.CreateDefaultControlsInner">
            <summary>
            Creates the view controls
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControl`1.DataToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.EPiServer.PropertyMediaControlBase`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.EPiServer.PropertyMediaControlBase`1"/>.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControl`1.StringToData(System.String)">
            <summary>
            Converts the supplied string to an object
            </summary>
            <param name="value">This string comes from the post back from the edit mode</param>
            <returns>The object that the string represents or null if no data is entered</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControl`1.RenderThumbnails(`0@,System.String,System.String)">
            <summary>
            Renders the thumbnails on the supplied value
            </summary>
            <param name="value">The value to use as </param>
            <param name="virtualPath">The virtualPath of the EPiserver plug-in</param>
            <param name="thumbnailCache">The value retrieved from the thumbnail cache. This list should always be used unless it is null or empty</param>
            <returns>The new value for the thumbnailCache that should be used.</returns>
            <remarks>
            This method is called when the UI should be updated to reflect the current selected media. 
            The value represents the value that should be rendered and the thumbnail cache represents the values for the 
            thumbnails that should be used. If that value is missing, then use the supplied value to calculate the URL:s for the 
            thumbnails.
            </remarks>
        </member>
        <member name="T:ImageVault.EPiServer.PropertyMediaControlBase`1">
            <summary>
            Defines the base class for a PropertyMediaControl
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:ImageVault.EPiServer.PropertyMediaControlBase`1.Log">
            <summary>
            Gets the Log of the <see cref="T:ImageVault.EPiServer.PropertyMediaControlBase`1"/>
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaControlBase`1.EditControlTable">
            <summary>
            Used to store a reference to the edit control collection in the event of validation errors.
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaControlBase`1.Value">
            <summary>
            Gets the Value of the PropertyMediaControlBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaControlBase`1.CurrentSettings">
            <summary>
            Gets the CurrentSettings of the PropertyMediaControlBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaControlBase`1.TargetWidth">
            <summary>
            Gets the TargetWidth of the PropertyMediaControlBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaControlBase`1.TargetHeight">
            <summary>
            Gets the TargetHeight of the PropertyMediaControlBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaControlBase`1.TargetResizeMode">
            <summary>
            Gets the TargetResizeMode of the PropertyMediaControlBase
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.IsEditable(ImageVault.EPiServer.Common.MediaCacheItem)">
            <summary>
            Checks if a specific mediaCache is editable or not.
            </summary>
            <remarks>We can only edit images and only if the image is larger than the target settings (for fit, we allow one dimension to be equal or smaller than the target)</remarks>
            <param name="mediaCache"></param>
            <returns>True if it is editable, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.GetPropertySettingsFromModel">
            <summary>
            Gets the registered PropertySettings for the property
            </summary>
            <returns>The registered settings or null if none where found</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.GetPropertySettingsFromView">
            <summary>
            Checks the attributes from the view and returns a settings object if any settings are found
            </summary>
            <returns>A <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> instance or null if no settings where found in the view</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.GetPublishedMediaHtml(ImageVault.EPiServer.MediaReference,ImageVault.EPiServer.PropertyMediaSettings)">
            <summary>
            Get the media html according to the supplied settings.
            </summary>
            <param name="mediaReference">The <see cref="T:ImageVault.EPiServer.MediaReference"/> to get html for</param>
            <param name="settings">The <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> containing the settings for the output format</param>
            <returns>The html to use for displaying the media or null if no media was found</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.GetInternalMediaHtml(ImageVault.EPiServer.MediaReference,ImageVault.EPiServer.PropertyMediaSettings)">
            <summary>
            Gets the html for the media using the internal urls
            </summary>
            <param name="mediaReference">The <see cref="T:ImageVault.EPiServer.MediaReference"/> to get html for</param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.GetMediaHtml(ImageVault.EPiServer.MediaReference,ImageVault.EPiServer.PropertyMediaSettings,ImageVault.Client.Client)">
            <summary>
            Get the media html according to the supplied settings.
            </summary>
            <param name="mediaReference">The <see cref="T:ImageVault.EPiServer.MediaReference"/> to get html for</param>
            <param name="settings">The <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> containing the settings for the output format</param>
            <param name="client">The <see cref="N:ImageVault.Client"/> to use to request the media</param>
            <returns>The html to use for displaying the media or null if no media was found</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.GetPreviewHtml(ImageVault.EPiServer.MediaReference)">
            <summary>
            Calculates the Html for the preview item
            </summary>
            <param name="mediaReference">The <see cref="T:ImageVault.EPiServer.MediaReference"/> to get html for</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.RegisterCssFile(System.String)">
            <summary>
            Registers the CSS file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.AddErrorValidator(System.String)">
            <summary>
            Does exactly the same thing as the base class implementation with one change.
            It attds the validator control to the _validationCell instead
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.CreateDefaultControls">
            <summary>
            Creates ImageVault default view
            If no valid license for the core service can be found, no image is displayed.
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.CreateDefaultControlsInner">
            <summary>
            Creates ImageVault controls default view
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.DataToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.EPiServer.PropertyMediaControlBase`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.EPiServer.PropertyMediaControlBase`1"/>.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.StringToData(System.String)">
            <summary>
            Converts the supplied string to an object
            </summary>
            <param name="value">This string comes from the postback from the edit mode</param>
            <returns>The object that the string represents or null if no data is entered</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.OnPreRender(System.EventArgs)">
            <summary>
            Thumbnails must be set in this stage. Value can differ from the current value
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.HandleAndDisplayErrorMessage(System.Exception)">
            <summary>
            Handles the supplied error message and displays an error message
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.GetExceptionErrorMessageString(System.Exception)">
            <summary>
            Returns an appropriate error description, based on the exception.
            </summary>
            <param name="ex">The thrown exception</param>
            <returns>Error message</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.DisplayErrorMessage(System.String)">
            <summary>
            Displays the supplied message as an error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.RenderThumbnails(`0@,System.String,System.String)">
            <summary>
            Renders the thumbnails on the supplied value
            </summary>
            <remarks>
            This method is called when the UI should be updated to reflect the current selected media. 
            The value represents the value that should be rendered and the thumbnail cache represents the values for the 
            thumbnails that should be used. If that value is missing, then use the supplied value to calculate the url:s for the 
            thumbnails.
            </remarks>
            <param name="value">The value to use as </param>
            <param name="virtualPath">The virtualPath of the EPiserver plugin</param>
            <param name="thumbnailCache">The value retrieved from the thumbnail cache. This list should always be used unless it is null or empty</param>
            <returns>The new value for the thumbnailCache that should be used.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.CreateMediaCacheItem(ImageVault.Common.Data.MediaItem,System.Nullable{System.Int32})">
            <summary>
            Creates a MediaCacheItem from the supplied mediaItem
            </summary>
            <param name="mediaItem">The <see cref="T:ImageVault.Common.Data.MediaItem"/> to create the item from</param>
            <param name="thumbnailFormatId"></param>
            <returns>The created <see cref="T:ImageVault.EPiServer.Common.MediaCacheItem"/>
            </returns>
            <remarks>The MediaItem must have two MediaConversions where one is the format that is supplied as thumbnail and the other is the original format.</remarks>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.GetThumbnailFormatWithEffect(ImageVault.Common.Data.Effects.Effect)">
            <summary>
            Gets a ThumbnailFormat from the Core that uses the supplied effect.
            </summary>
            <param name="effect">The <see cref="T:ImageVault.Common.Data.Effects.Effect"/> to use</param>
            <returns>The existing <see cref="T:ImageVault.Common.Data.ThumbnailFormat"/> from core.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.CreateOnPageEditControls">
            <summary>
            Create the OnPageEditControls
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaControlBase`1.Translate(System.String)">
            <summary>
            Translates the supplied 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.EPiServer.PropertyMedia`1">
            <summary>
            A property to use for using a media from ImageVault.
            </summary>
            <typeparam name="T">The type of MediaReference that should be stored in the property. Needs to inherit the <see cref="P:ImageVault.EPiServer.PropertyMedia`1.MediaReference"/> class.</typeparam>
            <example>
            <code lang="c#"><![CDATA[
            public class MyMedia : MediaReference {
                //Add your custom implementation here
            }
            [PageDefinitionTypePlugIn(DisplayName = "MyMedia")]
            public class PropertyMyMedia : PropertyMedia<MyMedia> {}
            ]]>
            </code>
            </example>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMedia`1.Value">
            <summary>
            Get/Sets the Value of the PropertyMedia
            </summary>
            <value>Is always of the type <typeparamref name="T"/>. Can return null if it <see cref="P:ImageVault.EPiServer.PropertyMedia`1.IsNull"/></value>
            <exception cref="T:System.ArgumentException">If the value passed to the setter isn't of the correct type or a non parseable string.</exception>
            <exception cref="T:System.NotSupportedException">If setter is called and the property is <see cref="P:EPiServer.Core.PropertyData.IsReadOnly"/> </exception>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMedia`1.Type">
            <summary>
            Gets the Type of the PropertyMedia
            </summary>
            <value>Is always a <see cref="F:EPiServer.Core.PropertyDataType.LongString"/>. Will serialize its value as a Json string.</value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMedia`1.PropertyValueType">
            <summary>
            Gets the PropertyValueType of the PropertyMedia
            </summary>
            <value>Is always the <typeparamref name="T"/> type</value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMedia`1.MediaReference">
            <summary>
            Get/Sets the MediaReference of the PropertyMedia
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMedia`1.IsNull">
            <summary>
            Gets the IsNull of the PropertyMedia
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMedia`1.IsModified">
            <summary>
            Get/Sets the IsModified of the PropertyMedia
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia`1.#ctor">
            <summary>
            Initializes a new instance of the <b>PropertyMedia</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <b>PropertyMedia&lt;T&gt;</b> class.
            </summary>
            <param name="mediaReference"></param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia`1.SetDefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia`1.ParseToObject(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia`1.ParseToSelf(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia`1.ParseMedia(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia`1.CreatePropertyControl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia`1.SaveData(EPiServer.Core.PropertyDataCollection)">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia`1.CreateWritableClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia`1.Copy">
            <summary>
            Creates a copy of the current PropertyData object
            </summary>
            <returns>A copy of the current instance</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMedia`1.MakeReadOnly">
            <summary>
            Makes the instance readonly
            </summary>
        </member>
        <member name="T:ImageVault.EPiServer.PropertyMediaList">
            <summary>
            This is a Property that allows the editor to select multiple Media items from ImageVault
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList.#ctor">
            <summary>
            Initializes a new instance of the <b>PropertyMediaList</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList.#ctor(ImageVault.EPiServer.MediaReferenceList{ImageVault.EPiServer.MediaReference})">
            <summary>
            Initializes a new instance of the <b>PropertyMediaList</b> class.
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:ImageVault.EPiServer.PropertyMediaListControl`1">
            <summary>
            The default control for editing and displaying a PropertyMediaList
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaListControl`1.ThumbnailFormatUtil">
            <summary>
            Gets the ThumbnailFormatUtil of the PropertyMediaControl
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaListControl`1.RowLayout">
            <summary>
            Gets the RowLayout of the PropertyMediaListControl
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaListControl`1.OnPageEditHtml">
            <summary>
            Gets the OnPageEditHtml of the PropertyMediaListControl
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaListControl`1.CreateDefaultControlsInner">
            <summary>
            Creates the view controls
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaListControl`1.GetDefaultThumbnailUrl(System.String)">
            <summary>
            Gets the URL to the default thumbnail image
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaListControl`1.DataToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.EPiServer.PropertyMediaControlBase`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.EPiServer.PropertyMediaControlBase`1"/>.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaListControl`1.StringToData(System.String)">
            <summary>
            Converts the supplied string to an object
            </summary>
            <param name="value">This string comes from the postback from the edit mode</param>
            <returns>The object that the string represents or null if no data is entered</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaListControl`1.RenderThumbnails(ImageVault.EPiServer.MediaReferenceList{`0}@,System.String,System.String)">
            <summary>
            Renders the thumbnails on the supplied value
            </summary>
            <param name="value">The value to use as</param>
            <param name="virtualPath">The virtualPath of the EPiserver plugin</param>
            <param name="thumbnailCache">The value retrieved from the thumbnail cache. This list should always be used unless it is null or empty</param>
            <returns>
            The new value for the thumbnailCache that should be used.
            </returns>
            <remarks>
            This method is called when the UI should be updated to reflect the current selected media.
            The value represents the value that should be rendered and the thumbnail cache represents the values for the
            thumbnails that should be used. If that value is missing, then use the supplied value to calculate the url:s for the
            thumbnails.
            </remarks>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaListControl`1.GetFormatIdList(ImageVault.Client.Client,ImageVault.EPiServer.MediaReferenceList{`0})">
            <summary>
            Gets a list of formatId for the supplied 
            </summary>
            <param name="sdkClient"></param>
            <param name="mediaReferences"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.EPiServer.PropertyMediaList`1">
            <summary>
            Base class for PropertyMediaList types
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaList`1.Value">
            <summary>
            Get/Sets the Value of the PropertyMediaList
            </summary>
            <value>Is always of the type <typeparamref name="T"/>. Can return null if it <see cref="P:ImageVault.EPiServer.PropertyMediaList`1.IsNull"/></value>
            <exception cref="T:System.ArgumentException">If the value passed to the setter isn't of the correct type or a non parseable string.</exception>
            <exception cref="T:System.NotSupportedException">If setter is called and the property is <see cref="P:EPiServer.Core.PropertyData.IsReadOnly"/> </exception>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaList`1.Type">
            <summary>
            Gets the Type of the PropertyMediaList
            </summary>
            <value>Is always a <see cref="F:EPiServer.Core.PropertyDataType.LongString"/>. Will serialize its value as a Json string.</value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaList`1.PropertyValueType">
            <summary>
            Gets the PropertyValueType of the PropertyMediaList
            </summary>
            <value>Is always a <see cref="T:System.Collections.Generic.List`1"/> of <typeparamref name="T"/> type</value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaList`1.MediaReferenceList">
            <summary>
            Get/Sets the MediaReferenceList of the PropertyMediaList
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaList`1.IsNull">
            <summary>
            Gets the IsNull of the PropertyMediaList
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaList`1.IsModified">
            <summary>
            Get/Sets the IsModified of the PropertyMedia
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList`1.#ctor">
            <summary>
            Initializes a new instance of the <b>PropertyMediaList</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList`1.#ctor(ImageVault.EPiServer.MediaReferenceList{`0})">
            <summary>
            Initializes a new instance of the <b>PropertyMediaList</b> class.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList`1.SetDefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList`1.ParseToObject(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList`1.ParseToSelf(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList`1.ParseMedia(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList`1.CreatePropertyControl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList`1.SaveData(EPiServer.Core.PropertyDataCollection)">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList`1.CreateWritableClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList`1.Copy">
            <summary>
            Creates a copy of the current PropertyData object
            </summary>
            <returns>A copy of the current instance</returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaList`1.MakeReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:ImageVault.EPiServer.PropertyMediaSettings">
            <summary>
            Defines the settings for the <see cref="T:ImageVault.EPiServer.PropertyMedia"/>
            </summary>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaSettings.Width">
            <summary>
            Get/Sets the Width of the PropertyMediaSettings
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaSettings.Height">
            <summary>
            Get/Sets the Height of the PropertyMediaSettings
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.PropertyMediaSettings.ResizeMode">
            <summary>
            Get/Sets the ResizeMode of the PropertyMediaSettings
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaSettings.GetDefaultValues">
            <summary>
            Gets the default settings
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageVault.EPiServer.PropertyMediaSettingsUI">
            <summary>
            The UI class for the propertyMediaSettings class
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaSettingsUI.CreateChildControls">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaSettingsUI.Translate(System.String)">
            <summary>
            Translates the supplied 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaSettingsUI.AddLabelWithControl(System.String,System.Web.UI.Control)">
            <summary>
            Creates a div and adds a label associated whith the control and the control to the div.
            The div is then added to the Controls collection
            </summary>
            <param name="text">Text of the label</param>
            <param name="control">The control to add.</param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaSettingsUI.LoadSettingsUI(EPiServer.Core.PropertySettings.IPropertySettings)">
            <summary>
            Load settings to UI
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaSettingsUI.UpdateSettings(EPiServer.Core.PropertySettings.IPropertySettings)">
            <summary>
            Update settings from UI
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:ImageVault.EPiServer.PropertyMediaSettingsUI.ParseInt(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:ImageVault.EPiServer.ThumbnailFormatUtil.DefaultWidth">
            <summary>
            Gets the default width of the Thumbnail
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.ThumbnailFormatUtil.DefaultHeight">
            <summary>
            Gets the default height of the Thumbnail
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.ThumbnailFormatUtil.DefaultResizeMode">
            <summary>
            Gets the Default Resize Mode of the thumbnail
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.EPiServer.ThumbnailFormatUtil.DefaultFormat">
            <summary>
            Gets the Default Format of the Thumbnail
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.EPiServer.ThumbnailFormatUtil.#ctor(System.Int32,System.Int32,ImageVault.Common.Data.ResizeMode)">
            <summary>
            Initializes a new instance of the <b>ThumbnailFormatUtil</b> class.
            </summary>
            <param name="defaultWidth"></param>
            <param name="defaultHeight"></param>
            <param name="defaultResizeMode"></param>
        </member>
        <member name="M:ImageVault.EPiServer.ThumbnailFormatUtil.CalculateTargetResizeEffectForThumbnail(ImageVault.EPiServer.PropertyMediaSettings)">
            <summary>
            Checks if the Target format will affect the thumbnail.
            </summary>
            <remarks>It will only affect the format if the scaleToFill is selected as resize mode</remarks>
            <returns>The <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/> to use if the Target format affects the thumbnail. Null if the standard thumbnail can be used.</returns>
        </member>
        <member name="M:ImageVault.EPiServer.ThumbnailFormatUtil.CanUseDefaultThumbnailEffect(ImageVault.Common.Data.Effects.ResizeEffect@,ImageVault.EPiServer.PropertyMediaSettings)">
            <summary>
            Checks if the default thumbnail can be used or if a custom thumbnail must be used (depending on the property settings of the property)
            </summary>
            <param name="effect">The <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/> to use for the thumbnail. If the default thumbnail can be used, this effect represents the default thumbnail effect.</param>
            <param name="currentSettings"></param>
            <returns>True if the default thumbnail can be used, false if we need to create a new format (using the effect)</returns>
        </member>
        <member name="M:ImageVault.EPiServer.ThumbnailFormatUtil.GetThumbnailFormat(ImageVault.EPiServer.MediaReference,ImageVault.EPiServer.PropertyMediaSettings)">
            <summary>
            Gets the thumbnail format suitable for the supplied value and settings
            </summary>
            <param name="value">The <see cref="T:ImageVault.EPiServer.MediaReference"/> containing the effects for the item or null if no effects should be considered</param>
            <param name="currentSettings">The <see cref="T:ImageVault.EPiServer.PropertyMediaSettings"/> to use</param>
            <returns></returns>
        </member>
    </members>
</doc>
