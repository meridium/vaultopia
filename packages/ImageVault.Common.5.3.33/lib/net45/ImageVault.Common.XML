<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageVault.Common</name>
    </assembly>
    <members>
        <member name="T:ImageVault.Common.Configuration.ApplicationSettings">
            <summary>
            Common Application settings for both client and server of ImageVault
            </summary>
        </member>
        <member name="P:ImageVault.Common.Configuration.ApplicationSettings.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:ImageVault.Common.Configuration.ApplicationSettings"/>
            </summary>
        </member>
        <member name="P:ImageVault.Common.Configuration.ApplicationSettings.IdentityPrefix">
            <summary>
            Gets the identity prefix of the application
            </summary>
            <remarks>Should only be used on the client. To configure individual membership identity services, use configuration for its security manager.</remarks>
        </member>
        <member name="P:ImageVault.Common.Configuration.ApplicationSettings.LegacyUsernameIsValidIdentifier">
            <summary>
            If enabled, the username of a user is a valid identifier (as per ImageVault 4)
            </summary>
        </member>
        <member name="P:ImageVault.Common.Configuration.ApplicationSettings.SecurityProtocolType">
            <summary>
            Gets the security protocol type to use
            </summary>
        </member>
        <member name="P:ImageVault.Common.Configuration.ApplicationSettings.ApplicationInsightsInstrumentationKey">
            <summary>
            Get/Sets the Application insights Instrumentation key
            </summary>
            <remarks>If set, Application insights will be enabled for tracking performance issues</remarks>
        </member>
        <member name="P:ImageVault.Common.Configuration.ApplicationSettings.ApplicationInsightsEnabled">
            <summary>
            Checks if Application insights is enabled or not
            </summary>
        </member>
        <member name="P:ImageVault.Common.Configuration.ApplicationSettings.ApplicationInsightsRoleName">
            <summary>
            Gets the instance name used for identifying a ImageVault instance in application insights
            </summary>
        </member>
        <member name="P:ImageVault.Common.Configuration.ApplicationSettings.ApplicationInsightsDeveloperMode">
            <summary>
            Defines if the developer mode is active when using application insights
            </summary>
            <remarks>Developer mode immediately sends the telemetry when it is created. If disabled, telemetry is sent less often
            to mimimise performance loss.</remarks>
        </member>
        <member name="M:ImageVault.Common.Configuration.ApplicationSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ImageVault.Common.Configuration.ApplicationSettings.Reset">
            <summary>
            Resets the settings runtime values to the configured vaules
            </summary>
        </member>
        <member name="T:ImageVault.Common.Configuration.ApplicationSettingsBase">
            <summary>
            Utilityclass for application settings
            </summary>
        </member>
        <member name="F:ImageVault.Common.Configuration.ApplicationSettingsBase.AppSettingsPrefix">
            <summary>
            The prefix to use for ImageVault app settings
            </summary>
        </member>
        <member name="F:ImageVault.Common.Configuration.ApplicationSettingsBase.ApiPath">
            <summary>
            The local path to the ImageVault Api (Oauth)
            </summary>
        </member>
        <member name="F:ImageVault.Common.Configuration.ApplicationSettingsBase.CurrentUserApiPath">
            <summary>
            The local path to the ImageVault api for authenticated users (same auth as web)
            </summary>
        </member>
        <member name="M:ImageVault.Common.Configuration.ApplicationSettingsBase.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates the ApplicationSettingsBase class
            </summary>
            <param name="appSettings"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ImageVault.Common.Configuration.ApplicationSettingsBase.GetAppSetting(System.String)">
            <summary>
            Gets the app settings value for the given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Configuration.ApplicationSettingsBase.GetAppSettingAsBool(System.String,System.Boolean)">
            <summary>
            Gets the app settings value as a boolean value
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Configuration.ApplicationSettingsBase.GetAppSettingAsLong(System.String,System.Int64)">
            <summary>
            Gets the app settings value as a long value
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Configuration.ApplicationSettingsBase.GetAppSettingAsInt(System.String,System.Int32)">
            <summary>
            Get the app setting value as an int value
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Configuration.CommonConfigurationSection">
            <summary>
            Contains common configuration options for both client and core
            </summary>
        </member>
        <member name="P:ImageVault.Common.Configuration.CommonConfigurationSection.Instance">
            <summary>
            Returns the singleton instance of the <see cref="T:ImageVault.Common.Configuration.CommonConfigurationSection"/> class.
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Configuration.CommonConfigurationSection.ObjectCache">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Common.Configuration.CommonConfigurationSection.ObjectCacheDefaultProviderType">
            <summary>
            Gets the ObjectCache default provider type or null if no one is configured
            </summary>
        </member>
        <member name="M:ImageVault.Common.Configuration.CommonConfigurationSection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:ImageVault.Common.Configuration.MicroCacheConfigurationElement">
            <summary>
            Configures the MicroCache 
            </summary>
        </member>
        <member name="P:ImageVault.Common.Configuration.MicroCacheConfigurationElement.Enabled">
            <summary>
            Controls if the MicroCache should be enabled (default) or not
            </summary>
        </member>
        <member name="T:ImageVault.Common.Configuration.ObjectCacheConfigurationElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Common.Configuration.ObjectCacheConfigurationElement.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>
            The providers.
            </value>
        </member>
        <member name="P:ImageVault.Common.Configuration.ObjectCacheConfigurationElement.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>
            The default provider.
            </value>
        </member>
        <member name="P:ImageVault.Common.Configuration.ObjectCacheConfigurationElement.MicroCache">
            <summary>
            Configures the MicroCache
            </summary>
        </member>
        <member name="T:ImageVault.Common.Constants">
            <summary>
            Contains common constants for ImageVault
            </summary>
        </member>
        <member name="F:ImageVault.Common.Constants.PublishedMediaKey">
            <summary>
            Gets the PublishedMediaKey of the <see cref="T:ImageVault.Common.Constants"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Constants.InternalMediaKey">
            <summary>
            Gets the InternalMediaKey of the <see cref="T:ImageVault.Common.Constants"/>
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.CacheHelper">
            <summary>
            Summary description for CacheHelper.
            </summary>
            <remarks>
            2011-04-01 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="F:ImageVault.Common.Data.Caching.CacheHelper.NoAbsoluteExpiration">
            <summary>
            The value to pass into the absolute timeout parameter to disable absolute objectCache
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Caching.CacheHelper.NoSlidingExpiration">
            <summary>
            The value to pass into the sliding timeout parameter to disable sliding objectCache
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <b>CacheHelper</b> class.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.#ctor(System.Type,ImageVault.Common.Data.Caching.CacheType)">
            <summary>
            Initializes a new instance of the <b>CacheHelper</b> class.
            </summary>
            <param name="type">A type to used for grouping the items</param>
            <param name="cacheType">The type of cache to get</param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.#ctor(ImageVault.Common.Data.Caching.IObjectCache,System.Type)">
            <summary>
            Initializes a new instance of the <b>CacheHelper</b> class.
            </summary>
            <param name="objectCache">The objectCache implementation to use.</param>
            <param name="type"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.GetCache(ImageVault.Common.Data.Caching.CacheType)">
            <summary>
            Gets the IObjectCache instance based on the supplied cache type
            </summary>
            <param name="cacheType"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.Get(System.String)">
            <summary>
            Gets an item from the objectCache
            </summary>
            <param name="name">Name of the item to get</param>
            <returns>The found item or null if no item was found</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.GetKey(System.String)">
            <summary>
            Calculates the key of the cached item
            </summary>
            <param name="name">The public name of the item</param>
            <returns>The internal key of the item</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.Remove(System.String)">
            <summary>
            Removes an item from the objectCache
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.RemoveStartsWith(System.String)">
            <summary>
            Removes items from the objectCache whos names starts with the given prefix
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.Clear">
            <summary>
            Clears all items cached using the CacheHelper for this type
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.GetOrCreate``1(System.String,System.TimeSpan,System.DateTime,System.Func{``0})">
            <summary>
            This provides a threadsafe way to get a value from in-or-out-of-process objectCache or if the cached entry is missing, create it.
            </summary>
            <param name="name">The name of the item to get</param>
            <param name="slidingExpiration">The length of time the item is valid from last reference. <see cref="F:ImageVault.Common.Data.Caching.CacheHelper.NoSlidingExpiration"/> disables sliding expiration.</param>
            <param name="absoluteExpiration">The time when the cached item expires. <see cref="F:ImageVault.Common.Data.Caching.CacheHelper.NoAbsoluteExpiration"/> disables absolute expiration.</param>
            <param name="createAction">The <see cref="T:System.Func`1"/> to call if the value is not present that will create the value to enter in the objectCache</param>
            <typeparam name="T">The type of object to get</typeparam>
            <returns>The retrieved or created value</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.GetOrCreate``1(System.String,System.Func{``0,System.TimeSpan},System.Func{``0,System.DateTime},System.Func{``0})">
            <summary>
            This provides a threadsafe way to get a value from in-or-out-of-process objectCache or if the cached entry is missing, create it.
            </summary>
            <param name="name">The name of the item to get</param>
            <param name="slidingExpirationFunc">The length of time the item is valid from last reference. <see cref="F:ImageVault.Common.Data.Caching.CacheHelper.NoSlidingExpiration"/> disables sliding expiration.</param>
            <param name="absoluteExpirationFunc">The time when the cached item expires. <see cref="F:ImageVault.Common.Data.Caching.CacheHelper.NoAbsoluteExpiration"/> disables absolute expiration.</param>
            <param name="createAction">The <see cref="T:System.Func`1"/> to call if the value is not present that will create the value to enter in the objectCache</param>
            <typeparam name="T">The type of object to get</typeparam>
            <returns>The retrieved or created value</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.AddOrUpdate``1(System.String,System.TimeSpan,System.DateTime,``0)">
            <summary>
            Adds or updates a cached item
            </summary>
            <param name="name">The name of the item to add or update</param>
            <param name="slidingExpiration">The length of time the item is valid from last reference. <see cref="F:ImageVault.Common.Data.Caching.CacheHelper.NoSlidingExpiration"/> disables sliding expiration.</param>
            <param name="absoluteExpiration">The time when the cached item expires. <see cref="F:ImageVault.Common.Data.Caching.CacheHelper.NoAbsoluteExpiration"/> disables absolute expiration.</param>
            <param name="value">The value to update the objectCache with</param>
            <typeparam name="T">The type of object to add or update</typeparam>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelper.AddOrUpdate``1(System.String,``0)">
            <summary>
            Adds or updates a cached item
            </summary>
            <param name="name">The name of the item to add or update</param>
            <param name="value">The value to update the objectCache with</param>
            <typeparam name="T">The type of object to add or update</typeparam>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.CacheHelperExtensionMethods">
            <summary>
            Extension methods for the IObjectCache interface
            </summary>
            <remarks>This is the only construct that allows optional arguments with an implicit interface implementation
            It is not good to use optional parameters with default values in interfaces anyway since they can vary depending on how you call them.</remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelperExtensionMethods.GetOrCreateSlidingCache``1(ImageVault.Common.Data.Caching.CacheHelper,System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            Gets or creates a cache with a sliding expiration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="helper"></param>
            <param name="name"></param>
            <param name="createAction"></param>
            <param name="slidingExpiration"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelperExtensionMethods.GetOrCreateAbsoluteCache``1(ImageVault.Common.Data.Caching.CacheHelper,System.String,System.TimeSpan,System.Func{``0})">
            <summary>
            Gets or creates a cache with an absolute expiration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="helper"></param>
            <param name="name"></param>
            <param name="absoluteExpiration"></param>
            <param name="createAction"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheHelperExtensionMethods.GetOrCreate``1(ImageVault.Common.Data.Caching.CacheHelper,System.String,System.Func{``0})">
            <summary>
            Gets or creates a cache without expiration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="helper"></param>
            <param name="name"></param>
            <param name="createAction"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.CacheStatCounter">
            <summary>
            Class for keeping track of statistics
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Caching.CacheStatCounter.Instance">
            <summary>
            Singelton instnace
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.Enabled">
            <summary>
            Controls if the cache statistics should be enabled or not
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheStatCounter.GetCacheStatistics">
            <summary>
            Gets a list of all collected cache statistics
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheStatCounter.Record(System.Type,System.String)">
            <summary>
            Records a cache request
            </summary>
            <param name="type">Type of the cache to measure</param>
            <param name="name">Name of the item in the cache to measure</param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter">
            <summary>
            Keeps track of the performance samples
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter.Count">
            <summary>
            The number of samples
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter.ElapsedTicks">
            <summary>
            The total number of elapsed ticks for all samples
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter.AverageTime">
            <summary>
            The average number of milliseconds for a sample
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter.MaxTicks">
            <summary>
            The maximum number of ticks for a sample
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter.MaxTime">
            <summary>
            The maximum time in ms for a sample
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter.MinTicks">
            <summary>
            The minimum number of ticks for a sample
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter.MinTime">
            <summary>
            The minimum time in ms for a sample
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter.AddSample(System.Int64)">
            <summary>
            Adds a sample to the counter
            </summary>
            <param name="elapsedTicks"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter.#ctor(ImageVault.Common.Data.Caching.CacheStatCounter.SampleCounter)">
            <summary>
            Copy constructor
            </summary>
            <param name="counter"></param>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.CacheStatCounter.CacheEntryStatistics">
            <summary>
            Keeps track of the statistics of the cache entry
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.CacheEntryStatistics.Key">
            <summary>
            Key of the cache entry
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.CacheEntryStatistics.CacheHits">
            <summary>
            How many times the cache has returned a cached value
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.CacheEntryStatistics.CacheMisses">
            <summary>
            How many times the cache has not been able to deliver a cached item
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.CacheEntryStatistics.CacheGainPerCent">
            <summary>
            Returns the amount of the miss time that is gained when the cache is hit
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.CacheEntryStatistics.CacheGainInTime">
            <summary>
            Compares all requests and estimates the total milliseconds won by the cache.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.CacheEntryStatistics.TotalElapsedTime">
            <summary>
            Total elapsed time in milliseconds for both cache hits and misses
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheStatCounter.CacheEntryStatistics.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.CacheStatCounter.CacheEntryStatistics.#ctor(ImageVault.Common.Data.Caching.CacheStatCounter.CacheEntryStatistics)">
            <summary>
            Copy constructor
            </summary>
            <param name="entry"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.CacheStatCounter.ICacheStatRecord">
            <summary>
            Defines a statistics record that is used to track the statistics of a cache operation
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.CacheStatCounter.ICacheStatRecord.IsHit">
            <summary>
            Set this if the cache was successfully hit
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.CacheType">
            <summary>
            Defines the different types of cache
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Caching.CacheType.Default">
            <summary>
            Unspecified type, the default cache for the system
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Caching.CacheType.InProcess">
            <summary>
            An in process cache
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Caching.CacheType.OutOfProcess">
            <summary>
            An out of process cache
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.IInProcessObjectCache">
            <summary>
            Defines an object cache that is in process 
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.IObjectCache">
            <summary>
            Interface for an object cache
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.IObjectCache.Remove(System.String)">
            <summary>
            Removes an item from the cache
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.IObjectCache.Replace``1(System.String,System.TimeSpan,System.DateTime,``0)">
            <summary>
            Replaces or adds an entry in an in-or-out-of-process cache with the specified name with the provided value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <param name="slidingExpiration">The length of time the item is valid from last reference. <see cref="F:ImageVault.Common.Data.Caching.CacheHelper.NoSlidingExpiration"/> disables sliding expiration.</param>
            <param name="absoluteExpiration">The time when the cached item expires. <see cref="F:ImageVault.Common.Data.Caching.CacheHelper.NoAbsoluteExpiration"/> disables absolute expiration.</param>
            <param name="value">The value to put into the cache.</param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.IObjectCache.RemoveStartsWith(System.String)">
            <summary>
            Removes items from the cache whos names starts with the given prefix
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.IObjectCache.GetOrCreate``1(System.String,System.Func{``0,System.TimeSpan},System.Func{``0,System.DateTime},System.Func{``0})">
            <summary>
            This provides a threadsafe way to get a value from in-or-out-of-process cache or if the cached entry is missing, create it.
            </summary>
            <param name="name">The name of the item to get</param>
            <param name="slidingExpirationFunc">The length of time the item is valid from last reference. <see cref="F:ImageVault.Common.Data.Caching.CacheHelper.NoSlidingExpiration"/> disables sliding expiration.</param>
            <param name="absoluteExpirationFunc">The time when the cached item expires. <see cref="F:ImageVault.Common.Data.Caching.CacheHelper.NoAbsoluteExpiration"/> disables absolute expiration.</param>
            <param name="createAction">The <see cref="T:System.Func`1"/> to call if the value is not present that will create the value to enter in the cache</param>
            <typeparam name="T">The type of object to get</typeparam>
            <returns>The retrieved or created value</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.IObjectCache.Get(System.String)">
            <summary>
            Gets a cached object by a specified key
            </summary>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.IOutOfProcessObjectCache">
            <summary>
            defines an object cache that is out of process
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.MicroCache">
            <summary>
            Summary description for MicroCache.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Caching.MicroCache.Instance">
            <summary>
            Singelton instance
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Caching.MicroCache.Enabled">
            <summary>
            Controls if the cache should be enabled or not.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.MicroCache.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <b>MicroCache</b> class.
            </summary>
            <param name="cacheDuration">The number of seconds that the cache should be valid, defaults to 10 sec.</param>
            <param name="cleanupThreshold">The threshold limit when the items should be cleared to not be an evergrowing pain in the 4$$.</param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.MicroCache.GetOrCreate``1(System.String,System.Func{System.String,``0},System.Nullable{System.TimeSpan})">
            <summary>
            Gets the cache value if it exists, or creates it and populates the cache if it is missing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="creator"></param>
            <param name="cacheDuration">An optional value on how long the value should be cached</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.MicroCache.Invalidate(System.String)">
            <summary>
            invalidates the cache with the supplied key.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.MicroCache.Clear">
            <summary>
            Clears the entire cache
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Caching.HttpRuntimeObjectCache">
            <summary>
            The Windows Web Cache-specfic implementation of ICache
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Caching.HttpRuntimeObjectCache.Default">
            <summary>
            Supplies a default object cache instance
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.HttpRuntimeObjectCache.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.HttpRuntimeObjectCache.Replace``1(System.String,System.TimeSpan,System.DateTime,``0)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.HttpRuntimeObjectCache.RemoveStartsWith(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.HttpRuntimeObjectCache.GetOrCreate``1(System.String,System.Func{``0,System.TimeSpan},System.Func{``0,System.DateTime},System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.HttpRuntimeObjectCache.Get(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Data.Caching.HttpRuntimeObjectCache.ClearAll">
            <summary>
            Removes all cached items in the MasterCache (which might be HttpRuntime.Cache)
            </summary>
            <remarks>May remove objectCache outside the CacheHelper instances.</remarks>
        </member>
        <member name="T:ImageVault.Common.Data.Category">
            <summary>
            Defines a Category in ImageVault
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Category.Name">
            <summary>
            Get/Sets the Name of the Category
            </summary>
            <value>The name of the category</value>
        </member>
        <member name="P:ImageVault.Common.Data.Category.Id">
            <summary>
            Get/Sets the Id of the Category
            </summary>
            <value>The id of the category</value>
        </member>
        <member name="P:ImageVault.Common.Data.Category.ParentId">
            <summary>
            id of the parent category
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Category.Categories">
            <summary>
            Get/Sets the Categories of the Category
            </summary>
            <value>The <see cref="T:System.Collections.Generic.IList`1"/> containing the child categories for the category</value>
        </member>
        <member name="P:ImageVault.Common.Data.Category.IsUsed">
            <summary>
            If the category is assigned to any media item
            Needs to be popualated
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Category.#ctor">
            <summary>
            Initializes a new instance of the <b>Category</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Category.#ctor(ImageVault.Common.Data.Category)">
            <summary>
            Initializes a new instance of the <b>Category</b> class.
            </summary>
            <param name="category"></param>
        </member>
        <member name="T:ImageVault.Common.Data.ClientIdentity">
            <summary>
            Defines a ClientIdentity in ImageVault
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.ClientIdentity.Id">
            <summary>
            The Id of the client (previously known as Username)
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.ClientIdentity.Password">
            <summary>
            Get/Sets the Password of the ClientIdentity
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.ClientIdentity.ApplicationName">
            <summary>
            The name of the registered application
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.ClientIdentity.Author">
            <summary>
            The author of the application
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.ClientIdentity.RedirectUrl">
            <summary>
            The redirect uri to use
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.ClientIdentity.AllowImpersonate">
            <summary>
            Defines if the client is allowed to impersonate other users
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.ClientIdentity.#ctor">
            <summary>
            Initializes a new instance of the <b>ClientIdentity</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.ClientIdentity.#ctor(ImageVault.Common.Data.ClientIdentity)">
            <summary>
            Initializes a new instance of the <b>ClientIdentity</b> class.
            </summary>
            <param name="clientIdentity"></param>
        </member>
        <member name="T:ImageVault.Common.Data.ContentDisplayTypes">
            <summary>
            Defines the different displayoptions that a content can be configured with
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.ContentDisplayTypes.Default">
            <summary>
            Default, contains only content. Content type defines type of display
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.ContentDisplayTypes.ContainsPlayer">
            <summary>
            Content contains player and don't need any other data
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Display.AttributeBindName">
            <summary>
            Enum used to bind values to an attribute with an unknown name
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.AlternateText">
            <summary>
            AlternateText
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.Name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeBindName.Poster">
            <summary>
            Poster of the item
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Display.AttributeValue">
            <summary>
            Represents an attribute value
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeValue.DefaultValue">
            <summary>
            Get/Sets the value of the attribute
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeValue.BindValue">
            <summary>
            Get/Sets the name the value should bind to
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeValue.Required">
            <summary>
            Get/Sets if the attribute is requierd
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.AttributeValue.DisplayIfEmpty">
            <summary>
            Should the attribute be rendered if empty
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.AttributeValue.#ctor">
            <summary>
            Initializes a new instance of the <b>AttributeValue</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.AttributeValue.#ctor(ImageVault.Common.Data.Display.AttributeBindName,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>AttributeValue</b> class.
            </summary>
            <param name="bindValue">the name the value should bind to</param>
            <param name="defaultValue">the value of the attribute</param>
            <param name="required">if the attribute is requierd</param>
            <param name="displayIfEmpty">if the attribute should be rendered if empty</param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.AttributeValue.#ctor(ImageVault.Common.Data.Display.AttributeValue)">
            <summary>
            Initializes a new instance of the <b>AttributeValue</b> class.
            </summary>
            <param name="attributeValue"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="attributeValue"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.Display.AttributeValue.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Display.ElementCloseMode">
            <summary>
            Defines the different Close modes for an HTML element.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.ElementCloseMode.ClosingTag">
            <summary>
            An element with a closing tag
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.ElementCloseMode.SelfClosing">
            <summary>
            A self closing element 
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Display.ElementCloseMode.None">
            <summary>
            None indicates a simple tag without close.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Display.HtmlElement">
            <summary>
            Defines a html elemenet
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Display.HtmlElement.TagName">
            <summary>
            The tag name of the element
            </summary>
            <value></value>
        </member>
        <member name="F:ImageVault.Common.Data.Display.HtmlElement.Attributes">
            <summary>
            the attributes of the element
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Display.HtmlElement.SelfClosing">
            <summary>
            If the element should be self closing.
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Display.HtmlElement.SelfClosingAlternateSetting">
            <summary>
            Sets the SelfClosingAlternateSetting of the HtmlElement
            </summary>
            <value>Only used to read legacy serialize info</value>
        </member>
        <member name="P:ImageVault.Common.Data.Display.HtmlElement.ClosingMode">
            <summary>
            Get/Sets the ClosingMode of the HtmlElement
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Display.HtmlElement.ChildNodes">
            <summary>
            Gets the ChildNodes of the HtmlElement
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.#ctor">
            <summary>
            Initializes a new instance of the <b>HtmlElement</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.#ctor(ImageVault.Common.Data.Display.HtmlElement)">
            <summary>
            Initializes a new instance of the <b>HtmlElement</b> class.
            </summary>
            <param name="htmlElement"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.Bind(ImageVault.Common.Data.Media,ImageVault.Common.Data.MediaItem)">
            <summary>
            Binds the HtmlElement and all its children to the supplied mediaItem
            </summary>
            <param name="info"></param>
            <param name="mediaItem"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.IsValidName(System.String)">
            <summary>
            Check so that the name dont have any special caracters
            </summary>
            <param name="name"></param>
            <returns>True if valid is name, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.ToString">
            <summary>
            Makes a html string out of the element
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Display.HtmlElement"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.BindAttribute(System.String,ImageVault.Common.Data.Display.AttributeBindName)">
            <summary>
            Binds a value to a attribute
            </summary>
            <param name="value"></param>
            <param name="bindValue"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.GetBaseUrl(System.String)">
            <summary>
            Gets the media base url including trailing /
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.HtmlElement.GetMatchingPathSegment(System.String,System.String)">
            <summary>
            searches for the supplied segment in the supplied url and returns the string up to and including the matched segment (and trailing url path separator /)
            </summary>
            <param name="url">The <see cref="T:System.String"/> to search in</param>
            <param name="segment">The path segment to look for</param>
            <returns>The matching path segment or null if no match was found</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Display.DisplayInformation">
            <summary>
            Summary description for DisplayInformation.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Display.DisplayInformation.ContentDisplayType">
            <summary>
            Get/Sets the ContentDisplayType of the DisplayInformation
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Display.DisplayInformation.DefaultEmbedElement">
            <summary>
            Get/Sets the Html of the DisplayInformation
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Display.DisplayInformation.#ctor">
            <summary>
            Initializes a new instance of the <b>DisplayInformation</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.DisplayInformation.#ctor(ImageVault.Common.Data.Display.DisplayInformation)">
            <summary>
            Initializes a new instance of the <b>DisplayInformation</b> class.
            </summary>
            <param name="displayInformation"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.DisplayInformation.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Display.Node">
            <summary>
            Defines a base node for a html segment
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Display.Node.Disabled">
            <summary>
            Get/Sets the Disabled of the Node
            </summary>
            <value>If false (default) the node is active and will be rendered, if true it will not be rendered (or any of it's content)</value>
        </member>
        <member name="M:ImageVault.Common.Data.Display.Node.#ctor">
            <summary>
            Initializes a new instance of the <b>Node</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.Node.#ctor(ImageVault.Common.Data.Display.Node)">
            <summary>
            Initializes a new instance of the <b>Node</b> class.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.Node.BindAttribute(System.String,ImageVault.Common.Data.Display.AttributeBindName)">
            <summary>
            Binds a value to a attribute
            </summary>
            <param name="value"></param>
            <param name="bindValue"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.Node.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.Node.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.Node.Bind(ImageVault.Common.Data.Media,ImageVault.Common.Data.MediaItem)">
            <summary>
            Binds the Node to the supplied mediaItem
            </summary>
            <param name="info"></param>
            <param name="mediaItem"></param>
        </member>
        <member name="T:ImageVault.Common.Data.Display.TextNode">
            <summary>
            A TextNode is a plain text that can be part of a html segment
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Display.TextNode.AttributeBindName">
            <summary>
            Get/Sets the AttributeBindName of the TextNode
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Display.TextNode.Content">
            <summary>
            Get/Sets the Content of the TextNode
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.#ctor">
            <summary>
            Initializes a new instance of the <b>TextNode</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.#ctor(ImageVault.Common.Data.Display.AttributeBindName,System.String)">
            <summary>
            Initializes a new instance of the <b>TextNode</b> class.
            </summary>
            <param name="attributeBindName">The <see cref="P:ImageVault.Common.Data.Display.TextNode.AttributeBindName"/> that should be used as content when the <see cref="M:ImageVault.Common.Data.Display.TextNode.BindAttribute(System.String,ImageVault.Common.Data.Display.AttributeBindName)"/> method is called</param>
            <param name="defaultContent">The default content if no matching value is found</param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.#ctor(ImageVault.Common.Data.Display.TextNode)">
            <summary>
            Initializes a new instance of the <b>TextNode</b> class.
            </summary>
            <param name="textNode"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.BindAttribute(System.String,ImageVault.Common.Data.Display.AttributeBindName)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="bindValue"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Display.TextNode"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Display.TextNode"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.TextNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Display.VideoElement">
            <summary>
            Represents a video HTML tag with an optional poster media key and name that can be assigned.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Display.VideoElement.PosterMediaKeyAndName">
            <summary>
            Get/Sets the PosterMediaKeyAndName of the VideoSourceElement
            </summary>
            <value>Contains the MediaKeyAndName for the ImageVault poster content. MediaKeyAndName is the MediaKey and MediaName separated by a path separator (/).
            MediaKey is the MediaContentReferenceId for internal media and the PublishedMediaContentReferenceId for publishedMedia.
            MediaName is the Name of the MediaContentReference (like the filename).</value>
        </member>
        <member name="M:ImageVault.Common.Data.Display.VideoElement.#ctor">
            <summary>
            Initializes a new instance of the <b>VideoElement</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.VideoElement.#ctor(ImageVault.Common.Data.Display.VideoElement)">
            <summary>
            Initializes a new instance of the <b>VideoElement</b> class.
            </summary>
            <param name="videoElement"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.VideoElement.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.VideoElement.Bind(ImageVault.Common.Data.Media,ImageVault.Common.Data.MediaItem)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="mediaItem"></param>
        </member>
        <member name="T:ImageVault.Common.Data.Display.VideoSourceElement">
            <summary>
            This class will represent a source tag if the request includes a conversion for the specified source type.
            </summary>
            <remarks>By specifying the <see cref="P:ImageVault.Common.Data.Display.VideoSourceElement.Type"/> of the ImageVault content and the <see cref="P:ImageVault.Common.Data.Display.VideoSourceElement.MediaKeyAndName"/> for the content reference (internal or published)
            that it represents, a correct source html element will be displayed.</remarks>
        </member>
        <member name="P:ImageVault.Common.Data.Display.VideoSourceElement.Type">
            <summary>
            Get/Sets the Type of the VideoSourceElement
            </summary>
            <value>The content-type of the data that the source element points to</value>
        </member>
        <member name="P:ImageVault.Common.Data.Display.VideoSourceElement.MediaKeyAndName">
            <summary>
            Get/Sets the MediaKeyAndName of the VideoSourceElement
            </summary>
            <value>Contains the MediaKeyAndName for the ImageVault content. MediaKeyAndName is the MediaKey and MediaName separated by a path separator (/).
            MediaKey is the MediaContentReferenceId for internal media and the PublishedMediaContentReferenceId for publishedMedia.
            MediaName is the Name of the MediaContentReference (like the filename).</value>
        </member>
        <member name="M:ImageVault.Common.Data.Display.VideoSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <b>VideoSourceElement</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Display.VideoSourceElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>VideoSourceElement</b> class.
            </summary>
            <param name="type"></param>
            <param name="mediaKeyAndName"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.VideoSourceElement.#ctor(ImageVault.Common.Data.Display.VideoSourceElement)">
            <summary>
            Initializes a new instance of the <b>VideoSourceElement</b> class.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Display.VideoSourceElement.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Display.VideoSourceElement.Bind(ImageVault.Common.Data.Media,ImageVault.Common.Data.MediaItem)">
            <summary>
            Binds the mediaItem to the element
            </summary>
            <param name="info"></param>
            <param name="mediaItem"></param>
        </member>
        <member name="T:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect">
            <summary>
            The ChangeOutputFormatEffect allows the format to change the output format for the media
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect.ContentType">
            <summary>
            Get/Sets the ContentType of the ChangeOutputFormatEffect
            </summary>
            <value>The content type that the output should be changed to.</value>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect.#ctor">
            <summary>
            Initializes a new instance of the <b>ChangeOutputFormatEffect</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>ChangeOutputFormatEffect</b> class.
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <b>ChangeOutputFormatEffect</b>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <b>ChangeOutputFormatEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect.Equals(ImageVault.Common.Data.Effects.ChangeOutputFormatEffect)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect"/> is equal to the current 
            <b>ChangeOutputFormatEffect</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect"/> is equal to the current <b>ChangeOutputFormatEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Effects.ChangeOutputFormatEffect"/>.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Effects.CropEffect">
            <summary>
            An effect that performs a crop action
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.CropEffect.X">
            <summary>
            Get/Sets the X of the CropEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.CropEffect.Y">
            <summary>
            Get/Sets the Y of the CropEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.CropEffect.Width">
            <summary>
            Get/Sets the width of the CropEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.CropEffect.Height">
            <summary>
            Get/Sets the height of the CropEffect
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.#ctor">
            <summary>
            Initializes a new instance of the <b>CropEffect</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <b>CropEffect</b> class.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <b>CropEffect</b> class.
            </summary>
            <param name="rectangle"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <b>CropEffect</b>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <b>CropEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.Equals(ImageVault.Common.Data.Effects.CropEffect)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/> is equal to the current 
            <b>CropEffect</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/> is equal to the current <b>CropEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.CropEffect.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Effects.CropEffect"/>.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Effects.Effect">
            <summary>
            A base class for any Effects that can be added to a format. 
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.Effect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Effects.ResizeEffect">
            <summary>
            An effect that resizes a media
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.ResizeEffect.Width">
            <summary>
            Get/Sets the Width of the ResizeEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.ResizeEffect.Height">
            <summary>
            Get/Sets the Height of the ResizeEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.ResizeEffect.ResizeMode">
            <summary>
            Get/Sets the ResizeMode of the ResizeEffect
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.ResizeEffect.AspectRatio">
            <summary>
            Gets the AspectRatio of the ResizeEffect
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.#ctor">
            <summary>
            Initializes a new instance of the <b>ResizeEffect</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.#ctor(System.Int32,System.Int32,ImageVault.Common.Data.ResizeMode)">
            <summary>
            Initializes a new instance of the <b>ResizeEffect</b> class.
            </summary>
            <param name="width">The width of the resizeEffect.</param>
            <param name="height">The height of the resizeEffect.</param>
            <param name="resizeMode">The <see cref="T:ImageVault.Common.Data.ResizeMode"/>. Default is <see cref="F:ImageVault.Common.Data.ResizeMode.ScaleToFit"/>.</param>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.#ctor(System.Drawing.Size,ImageVault.Common.Data.ResizeMode)">
            <summary>
            Initializes a new instance of the <b>ResizeEffect</b> class.
            </summary>
            <param name="size"></param>
            <param name="resizeMode"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <b>ResizeEffect</b>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <b>ResizeEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.Equals(ImageVault.Common.Data.Effects.ResizeEffect)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/> is equal to the current 
            <b>ResizeEffect</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/> is equal to the current <b>ResizeEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.ResizeEffect.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Effects.ResizeEffect"/>.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Effects.TrimEffect">
            <summary>
            Trims a media clip in time, allowing the user to cut out a specific part of the media
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.TrimEffect.Start">
            <summary>
            Get/Sets the Start of the TrimEffect
            </summary>
            <value>The number of seconds where the media should start</value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.TrimEffect.Stop">
            <summary>
            Get/Sets the Stop of the TrimEffect
            </summary>
            <value>The number of seconds where the media should stop</value>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.TrimEffect.#ctor">
            <summary>
            Initializes a new instance of the <b>TrimEffect</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.TrimEffect.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <b>TrimEffect</b> class.
            </summary>
            <param name="start">The time (in seconds) where the clip should start</param>
            <param name="stop">The time (in seconds) where the clip should stop</param>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.TrimEffect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.TrimEffect.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <b>TrimEffect</b>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.TrimEffect"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <b>TrimEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.TrimEffect.Equals(ImageVault.Common.Data.Effects.TrimEffect)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.Effects.TrimEffect"/> is equal to the current 
            <b>TrimEffect</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.Effects.TrimEffect"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.TrimEffect"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.Effects.TrimEffect"/> is equal to the current <b>TrimEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.TrimEffect.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ImageVault.Common.Data.Effects.TrimEffect"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.TrimEffect.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Effects.TrimEffect"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Effects.TrimEffect"/>.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Effects.UnsharpMaskEffect">
            <summary>
            The <b>UnsharpMaskEffect</b> sharpens an image by first creating a blurred version of the image. For each pixel in the image, 
            the difference between the original pixel value and the blurred pixel value is determined. If the difference in pixel values 
            exceeds a threshold value, the original pixel value is modified, sharpening the image.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Radius">
            <summary>
            Defines the width of the sharpening effect in pixels
            </summary>
            <remarks>
            Sharpening works on the edges of a subject by increasing the contrast at these points, making these outlines stand out more prominently. 
            The higher the Radius amount, the stronger the sharpening effect. It’s measured in pixels, as this is the width of the sharpening effect.
            <para>Typical setting: 1-8 pixels</para>
            <para>Good starting point: 1 pixel</para>
            </remarks>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Amount">
            <summary>
            Defines the amount of sharpening to apply in pixels.
            </summary>
            <remarks>
            <para>This is like a volume adjustment – the higher the percentage, the stronger the sharpening effect.</para>
            <para>Typical setting: 50-200 %</para>
            <para>Good starting point: 100 %</para>
            </remarks>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Threshold">
            <summary>
            Defines the threshold level of the sharpening effect.
            </summary>
            <remarks>
            <para>The higher the threshold amount is set, the lower the sharpening effect. This value defines what counts as an edge for the sharpening applied
            by the <see cref="P:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Amount"/> and <see cref="P:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Radius"/> values. At '0 levels' each pixel counts as an edge, so it is sharpened. At high values 
            (25 levels and above, for example) only high-contrast edges are sharpened.</para>
            <para>Typical setting: 1-15 levels</para>
            <para>Good starting point: 5 levels</para>
            </remarks>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.UnsharpMaskEffect.#ctor">
            <summary>
            Initializes a new instance of the <b>UnsharpMaskEffect</b> class.
            </summary>
            <remarks>Defaults to <see cref="P:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Radius"/> 1 pixel, <see cref="P:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Amount"/> 100 % and <see cref="P:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Threshold"/> 5 levels</remarks>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.UnsharpMaskEffect.#ctor(System.Double,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UnsharpMaskEffect</b> class.
            </summary>
            <param name="radius"><see cref="P:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Radius"/></param>
            <param name="amount"><see cref="P:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Amount"/></param>
            <param name="threshold"><see cref="P:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Threshold"/></param>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <b>UnsharpMaskEffect</b>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.UnsharpMaskEffect"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <b>UnsharpMaskEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.UnsharpMaskEffect.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ImageVault.Common.Data.Effects.UnsharpMaskEffect"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.UnsharpMaskEffect.Equals(ImageVault.Common.Data.Effects.UnsharpMaskEffect)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.Effects.UnsharpMaskEffect"/> is equal to the current 
            <b>UnsharpMaskEffect</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.Effects.UnsharpMaskEffect"/> to compare with the current <see cref="T:ImageVault.Common.Data.Effects.UnsharpMaskEffect"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.Effects.UnsharpMaskEffect"/> is equal to the current <b>UnsharpMaskEffect</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Effects.UnsharpMaskEffect.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Effects.UnsharpMaskEffect"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.Effects.UnsharpMaskEffect"/>.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.GlobalRoleIdentity">
            <summary>
            Summary description for GlobalRoleIdentity.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.GlobalRoleIdentity.Name">
            <summary>
            Get/Sets the Name of the GlobalRoleIdentity
            </summary>
            <value>The name of the identity</value>
        </member>
        <member name="P:ImageVault.Common.Data.GlobalRoleIdentity.Identity">
            <summary>
            Get/Sets the Identity of the GlobalRoleIdentity
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.GlobalRoleIdentity.Roles">
            <summary>
            Get/Sets the Roles of the GlobalRoleIdentity
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.GlobalRoleIdentity.DisplayName">
            <summary>
            Get/Sets the DisplayName of the GlobalRoleIdentity
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.GlobalRoleIdentity.#ctor">
            <summary>
            Initializes a new instance of the <b>GlobalRoleIdentity</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.GlobalRoleIdentity.#ctor(System.String,ImageVault.Common.Data.GlobalRoles)">
            <summary>
            Initializes a new instance of the <b>GlobalRoleIdentity</b> class.
            </summary>
            <param name="identity"></param>
            <param name="roles"></param>
        </member>
        <member name="M:ImageVault.Common.Data.GlobalRoleIdentity.#ctor(ImageVault.Common.Data.GlobalRoleIdentity)">
            <summary>
            Initializes a new instance of the <b>GlobalRoleIdentity</b> class.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="T:ImageVault.Common.Data.ISizeInformation">
            <summary>
            Defines a format information that contains size information 
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.Width">
            <summary>
            Get/Sets the Width of the Image
            </summary>
            <value>The actual width that the image will be after applying the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.Height">
            <summary>
            Get/Sets the Height of the Image
            </summary>
            <value>The actual heigth that the image will be after applying the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.AspectRatio">
            <summary>
            Get/Sets the AspectRatio of the ExtendedMediaInformation
            </summary>
            <value></value>
            <remarks>If not set and if a valid width and height are presented, the aspect ratio is calculated</remarks>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.FormatWidth">
            <summary>
            Get/Sets the FormatWidth of the Image
            </summary>
            <value>The widht found in the media conversion or 0 if no width is set in the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.FormatHeight">
            <summary>
            Get/Sets the FormatHeight of the Image
            </summary>
            <value>The height found in the media conversion or 0 if no height is set in the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.ISizeInformation.FormatAspectRatio">
            <summary>
            Get/Sets the FormatAspectRatio of the Image
            </summary>
            <value>The AspectRatio found in the media conversion or 0 if n aspect ratio was set in the conversion</value>
        </member>
        <member name="T:ImageVault.Common.Data.IUser">
            <summary>
            Defines a user in the system
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.IUser.Username">
            <summary>
            The username of the user
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.IUser.Roles">
            <summary>
            The roles of the user
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.IUser.GlobalRoles">
            <summary>
            The global roles of the user
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.IUser.Principal">
            <summary>
            The underlying <see cref="T:System.Security.Principal.IPrincipal"/> of the user
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.IUser.Identities">
            <summary>
            Gets the identities of the user
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.IUser.EmailAddress">
            <summary>
            Gets the EmailAddress of the User
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.IUser.NameIdentifier">
            <summary>
            Gets the name identifier for the user
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.MediaContentReference">
            <summary>
            A MediaContentReference defines a conversion of a <see cref="T:ImageVault.Common.Data.MediaItem"/> for a specific format.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.MediaContentReferenceId">
            <summary>
            Get/Sets the MediaContentReferenceId of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.MediaItemId">
            <summary>
            Get/Sets the MediaItemId of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.VersionId">
            <summary>
            Defines the version id of the media item
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.Name">
            <summary>
            Get/Sets the Name of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.MediaFormatId">
            <summary>
            Get/Sets the MediaFormatId of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.MediaStorageTypeId">
            <summary>
            Get/Sets the MediaStorageTypeId of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.MediaStorageId">
            <summary>
            Get/Sets the MediaStorageId of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.MediaStorageValue">
            <summary>
            Get/Sets the MediaStorageValue of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.ContentType">
            <summary>
            Get/Sets the ContentType of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.DateModified">
            <summary>
            Get/Sets the DateModified of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.ETag">
            <summary>
            Get/Sets the ETag of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.Deleted">
            <summary>
            Get/Sets the Deleted of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.MediaConverterTypeId">
            <summary>
            Get/Sets the MediaConverterTypeId of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.MediaInformation">
            <summary>
            Get/Sets the MediaInformation of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaContentReference.PublishedMediaContentReferences">
            <summary>
            Get/Sets the PublishedMediaContentReferences of the MediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.MediaContentReference.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaContentReference</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MediaContentReference.#ctor(ImageVault.Common.Data.MediaContentReference)">
            <summary>
            Initializes a new instance of the <b>MediaContentReference</b> class.
            </summary>
            <param name="m"></param>
        </member>
        <member name="T:ImageVault.Common.Data.MediaFormatOutputTypes">
            <summary>
            Summary description for MediaFormatOutputTypes.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Unknown">
            <summary>
            Defines an unknown format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.WebSafe">
            <summary>
            Image is converted to a WebSafe format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Jpeg">
            <summary>
            Image is converted to Jpeg format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Tiff">
            <summary>
            Image is converted to Tiff format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Png">
            <summary>
            Image is converted to Png format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Gif">
            <summary>
            Image is converted to Gif format
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaFormatOutputTypes.Original">
            <summary>
            Image is not converted to another format, old format is retained.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.MediaFormatTypeAttribute">
            <summary>
            This attribute should be placed on Media classes to point out which type of Format that the Media represents.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatTypeAttribute.FormatType">
            <summary>
            Get/Sets the FormatType of the MediaFormatTypeAttribute
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <b>MediaFormatTypeAttribute</b> class.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:ImageVault.Common.Data.MediaShare">
            <summary>
            The MediaShare class defines a media share
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaShare.Id">
            <summary>
            Get/Sets the Id of the MediaShare
            </summary>
            <value>This id is part of the url for retrieving the share</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaShare.Name">
            <summary>
            Get/Sets the Name of the MediaShare
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaShare.Created">
            <summary>
            Get/Sets the Created of the MediaShare
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaShare.CreatedBy">
            <summary>
            Get/Sets the CreatedBy of the MediaShare
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaShare.MediaFormatId">
            <summary>
            Get/Sets the MediaFormatId of the MediaShare
            </summary>
            <value>The id of the MediaFormat that is selected for the share</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaShare.Items">
            <summary>
            Get/Sets the Items of the MediaShare
            </summary>
            <value>The set of media items that the share consists of. When creating the share, only the Id of the MediaItem is necessary.</value>
        </member>
        <member name="M:ImageVault.Common.Data.MediaShare.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaShare</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MediaShare.#ctor(ImageVault.Common.Data.MediaShare)">
            <summary>
            Initializes a new instance of the <b>MediaShare</b> class and copies the data from the supplied MediaShare.
            </summary>
            <param name="mediaShare">The <see cref="T:ImageVault.Common.Data.MediaShare"/> to copy the information from</param>
        </member>
        <member name="M:ImageVault.Common.Data.MediaShare.CopyFrom(ImageVault.Common.Data.MediaShare)">
            <summary>
            Copies the data from another media share.
            </summary>
            <remarks>No references to the copied object is kept. Reference values are cloned.</remarks>
            <param name="mediaShare">The <see cref="T:ImageVault.Common.Data.MediaShare"/> to copy the information from</param>
        </member>
        <member name="T:ImageVault.Common.Data.MediaVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaVersion.Id">
            <summary>
            Get/Sets the Id
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaVersion.Created">
            <summary>
            Gets or sets the created date.
            </summary>
            <value>
            The created date.
            </value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaVersion.CreatedBy">
            <summary>
            Defines the user that created the version
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaVersion.Name">
            <summary>
            Defines the name of the Version
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaVersion.MediaItemId">
            <summary>
            Defines the id of the media item
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaVersion.MediaItem">
            <summary>
            Gets or sets the media item.
            </summary>
            <value>
            The media item.
            </value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaVersion.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>
            The comment.
            </value>
        </member>
        <member name="M:ImageVault.Common.Data.MediaVersion.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MediaVersion.#ctor(ImageVault.Common.Data.MediaVersion)">
            <summary>
            Copy constructor
            </summary>
            <param name="mv">The item to make a copy of</param>
        </member>
        <member name="T:ImageVault.Common.Data.OAuthAuthorizationToken">
            <summary>
            Defines an oauth authorization token
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.OAuthAuthorizationToken.ClientId">
            <summary>
            The id of the client
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.OAuthAuthorizationToken.RedirectUri">
            <summary>
            The redirect uri
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.OAuthAuthorizationToken.Username">
            <summary>
            The username of the user that the authorization token represents
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.OAuthAuthorizationToken.Roles">
            <summary>
            The roles of the user that the authorization token represents
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.OAuthAuthorizationToken.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.OAuthAuthorizationToken.#ctor(ImageVault.Common.Data.OAuthAuthorizationToken)">
            <summary>
            Copy constructor
            </summary>
            <param name="oAuthAuthorizationToken"></param>
        </member>
        <member name="T:ImageVault.Common.Data.PublishedMediaContentReference">
            <summary>
            A PublishedMediaContentReference defines a published <see cref="T:ImageVault.Common.Data.MediaContentReference"/> of a <see cref="T:ImageVault.Common.Data.MediaItem"/>.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.PublishedMediaContentReference.PublishedMediaContentReferenceId">
            <summary>
            Get/Sets the PublishedMediaContentReferenceId of the PublishedMediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.PublishedMediaContentReference.MediaContentReferenceId">
            <summary>
            Get/Sets the MediaContentReferenceId of the PublishedMediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.PublishedMediaContentReference.PublishingSourceId">
            <summary>
            Get/Sets the PublishingSourceId of the PublishedMediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.PublishedMediaContentReference.PublishingSourceIdentifier">
            <summary>
            Get/Sets the PublishingSourceIdentifier of the PublishedMediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.PublishedMediaContentReference.MediaInformation">
            <summary>
            Get/Sets the MediaInformation of the PublishedMediaContentReference
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.PublishedMediaContentReference.#ctor">
            <summary>
            Initializes a new instance of the <b>PublishedMediaContentReference</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.PublishedMediaContentReference.#ctor(ImageVault.Common.Data.PublishedMediaContentReference)">
            <summary>
            Initializes a new instance of the <b>PublishedMediaContentReference</b> class.
            </summary>
            <param name="p"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="p"/> is null.</exception>
        </member>
        <member name="T:ImageVault.Common.Data.Query.GlobalRoleIdentityFilter">
            <summary>
            Defines the filter for the GlobalRoleIdentityFilter
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Query.GlobalRoleIdentityFilter.Identity">
            <summary>
            Get/Sets the Identity of the GlobalRoleIdentityFilter
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.GlobalRoleIdentityFilter.Roles">
            <summary>
            Get users and groups belonging to a global Role
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.GlobalRoleIdentityFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>IdentityFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.GlobalRoleIdentityFilter.#ctor(ImageVault.Common.Data.Query.GlobalRoleIdentityFilter)">
            <summary>
            Initializes a new instance of the <b>IdentityFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.GlobalRoleIdentityFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.GlobalRoleIdentityQuery">
            <summary>
            The query class for finding GlobalRoleIdentity objects
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Common.Data.Query.VaultStatisticsFilter">
            <summary>
            Summary description for VaultStatisticsFilter.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultStatisticsFilter.Id">
            <summary>
            Get/Sets the Id of the VaultStatisticsFilter
            </summary>
            <value>The id of the vault to get or null to ignore the id of the vault</value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.VaultStatisticsFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>VaultStatisticsFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.VaultStatisticsFilter.#ctor(ImageVault.Common.Data.Query.VaultStatisticsFilter)">
            <summary>
            Initializes a new instance of the <b>VaultStatisticsFilter</b> class.
            </summary>
            <param name="vaultStatisticsFilter"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.VaultStatisticsFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.VaultStatisticsQuery">
            <summary>
            Summary description for VaultStatisticsQuery.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.VaultStatisticsQuery.#ctor">
            <summary>
            Initializes a new instance of the <b>VaultStatisticsQuery</b> class.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.VersionFilter">
            <summary>
            The version filter to use.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.VersionFilter.Current">
            <summary>
            Describes the current version
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.VersionFilter.All">
            <summary>
            Describes all versions
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.CategoryQuery">
            <summary>
            Query used to gat categories
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.CategoryQuery.Populate">
            <summary>
            Get/Sets the Populate of the for CategoryQuery
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.CategoryFilter">
            <summary>
            Filter for filtering categories
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.CategoryFilter.Id">
            <summary>
            Which id to retrive
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.CategoryFilter.ParentId">
            <summary>
            Will retrive all child categorys of the parent id
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.CategoryFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>CategoryFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.CategoryFilter.#ctor(ImageVault.Common.Data.Query.CategoryFilter)">
            <summary>
            Initializes a new instance of the <b>CategoryFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.CategoryFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.CategoryPopulationQuery">
            <summary>
            Populate query for populating category fields 
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.CategoryPopulationQuery.IsUsed">
            <summary>
            Populate information about if the category is used by any image
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IdentityFilter">
            <summary>
            Defines the filter for a Identity query
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IdentityFilter.SearchString">
            <summary>
            Get/Sets the SearchString of the IdentityFilter
            </summary>
            <value>Can contain wildcards (*)</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IdentityFilter.IdentityTypes">
            <summary>
            Get/Sets the IdentityTypes of the IdentityFilter
            </summary>
            <remarks>If you specify <see cref="F:ImageVault.Common.Data.Query.IdentityTypes.Any"/> it will place all matching group identities before adding user identities.</remarks>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IdentityFilter.Name">
            <summary>
            Get/Sets the Name of the IdentityFilter
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IdentityFilter.Roles">
            <summary>
            Get users and groups belonging to a global Role
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IdentityFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>IdentityFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IdentityFilter.#ctor(ImageVault.Common.Data.Query.IdentityFilter)">
            <summary>
            Initializes a new instance of the <b>IdentityFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IdentityFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IdentityTypes">
            <summary>
            Defines the different types of identities
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.IdentityTypes.User">
            <summary>
            Identifies a user identity
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.IdentityTypes.Group">
            <summary>
            Identifies a group identity
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.IdentityTypes.Any">
            <summary>
            Identifies all identity types
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IVFilter">
            <summary>
            Summary description for IVFilter.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IVFilter.Skip">
            <summary>
            Get/Sets the Skip of the MediaItemFilter
            </summary>
            <value>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IVFilter.Take">
            <summary>
            Get/Sets the Take of the MediaItemFilter
            </summary>
            <value>Returns a specified number of contiguous elements from the start of a sequence.</value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IVFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>IVFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IVFilter.#ctor(ImageVault.Common.Data.Query.IVFilter)">
            <summary>
            Initializes a new instance of the <b>IVFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IVFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IVQuery`1">
            <summary>
            Defines a base query object
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IVQuery`1.Filter">
            <summary>
            Gets the Filter of the Query
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IVQuery`1.IgnoreClientCache">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IVQuery`1.#ctor">
            <summary>
            Initializes a new instance of the <b>IVQuery&lt;TFilter&gt;</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.IVQuery`1.#ctor(ImageVault.Common.Data.Query.IVQuery{`0})">
            <summary>
            Initializes a new instance of the <b>IVQuery&lt;TFilter&gt;</b> class.
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaFormatFilter">
            <summary>
            Filter for media conversion query
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaFormatFilter.Format">
            <summary>
            Get/Sets the Format of the MediaFormatFilter
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaFormatFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaFormatFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaFormatFilter.#ctor(ImageVault.Common.Data.Query.MediaFormatFilter)">
            <summary>
            Initializes a new instance of the <b>MediaFormatFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaFormatFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaFormatPopulationQuery">
            <summary>
            Population query for MediaFormats
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaFormatPopulationQuery.IsInUse">
            <summary>
            Populate information about the conversion format being used by any published files
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaItemFilter">
            <summary>
            Defines the filterdata that will be used to perform a query for mediaitems
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.Id">
            <summary>
            Get/Sets the Id of the mediaitem(s) to match.
            </summary>
            <value>Finds a media item by this id(s). If this is set, other search parameters are ignored</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.VersionFilter">
            <summary>
            Describes the version to filter on. Default is <see cref="F:ImageVault.Common.Data.Query.VersionFilter.Current"/>
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.VersionId">
            <summary>
            Instead of requesting the latest version, a set of version id can be specified.
            </summary>
            <remarks>Will override any value set by the <see cref="P:ImageVault.Common.Data.Query.MediaItemFilter.VersionFilter"/> property</remarks>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.SearchString">
            <summary>
            The freetext search string
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.VaultId">
            <summary>
            The id of the vaults to search in (or null/0 if all of the users vaults should be included
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.CategoryId">
            <summary>
            The id of the category to search in (or null/0 if categories shouldn't be included in the filter)
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.MediaItemState">
            <summary>
            Get/Sets the MediaItemState of the MediaItemFilter
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.SortOrder">
            <summary>
            The order to sort the result
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemFilter.Url">
            <summary>
            Get/Sets the Url of the MediaItemFilter
            </summary>
            <value>If no id is entered, the urls is parsed and the media id and format is identified and used in the query. The id as a filter and format as a population</value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaItemFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemFilter.#ctor(ImageVault.Common.Data.Query.MediaItemFilter)">
            <summary>
            Initializes a new instance of the <b>MediaItemFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaItemPopulationQuery">
            <summary>
            Defines the population status for the FindMediaItem query
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.MediaFormats">
            <summary>
            Get/Sets the MediaFormats of the MediaItemPopulationQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.Metadata">
            <summary>
            Get/Sets the Metadata of the MediaItemPopulationQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.Categories">
            <summary>
            Get/Sets the Categories of the MediaItemPopulationQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.CanBeDownloaded">
            <summary>
            Get/Sets the CanBeDownloaded of the MediaItemPopulationQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.Language">
            <summary>
            Get/Sets the Language of the MediaItemPopulationQuery
            </summary>
            <value>The name of the language in the format "&lt;languagecode2&gt;-&lt;country/regioncode2&gt;".</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.StorageInformation">
            <summary>
            Get/Sets the DisplayInformation of the MediaItemPopulationQuery
            </summary>
            <value>True if the Player data for the conversions should be populated</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.PublishIdentifier">
            <summary>
            Get/Sets the PublishIdentifier of the MediaItemPopulationQuery
            </summary>
            <value>If this is set, all url:s that are created refers to published media</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.PublishInformation">
            <summary>
            Get/Sets the PublishInformation of the MediaItemPopulationQuery
            </summary>
            <value>If publish information should be populated or not</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.Access">
            <summary>
            Get/Sets the Access of the MediaItemPopulationQuery
            </summary>
            <value>True if the Access property of the <see cref="T:ImageVault.Common.Data.MediaItem"/> should be populated</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.Shared">
            <summary>
            Get/Sets the Shared of the MediaItemPopulationQuery
            </summary>
            <value>True if share information should be included</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.DuplicateMediaItemId">
            <summary>
            Set this if the <see cref="P:ImageVault.Common.Data.MediaItem.DuplicateVersionId"/> should be populated.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.DuplicateVersionId">
            <summary>
            Set this if the <see cref="P:ImageVault.Common.Data.MediaItem.DuplicateVersionId"/> should be populated.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemPopulationQuery.MediaVersion">
            <summary>
            Set this if the <see cref="P:ImageVault.Common.Data.MediaItem.MediaVersion"/> should be populated.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemPopulationQuery.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaItemPopulationQuery</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemPopulationQuery.#ctor(ImageVault.Common.Data.Query.MediaItemPopulationQuery)">
            <summary>
            Initializes a new instance of the <b>MediaItemPopulationQuery</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemPopulationQuery.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MediaItemPopulationQuery.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IIVFilter">
            <summary>
            Summary description for IIVFilter.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IIVFilter.Take">
            <summary>
            Get/Sets the Take of the IIVFilter
            </summary>
            <value>Returns a specified number of contiguous elements from the start of a sequence.</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IIVFilter.Skip">
            <summary>
            Get/Sets the Skip of the IIVFilter
            </summary>
            <value>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IIVQuery`1">
            <summary>
            Summary description for IIVQuery.
            </summary>
            
        </member>
        <member name="P:ImageVault.Common.Data.Query.IIVQuery`1.Filter">
            <summary>
            Gets the Filter of the IIVQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.IIVQuery`1.IgnoreClientCache">
            <summary>
            Ignores the client cache for the current query
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaItemQuery">
            <summary>
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemQuery.Populate">
            <summary>
            Get/Sets the Populate of the MediaItemQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemQuery.MediaUrlBase">
            <summary>
            Get/Sets the MediaUrlBase of the MediaItemQuery
            </summary>
            <value>If null the <see cref="P:ImageVault.Common.Data.Query.MediaItemQuery.DefaultMediaUrlBase"/> will be used. If <see cref="F:System.String.Empty"/> is used, the core address will be used.
            All other values will use the supplied value.</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemQuery.DefaultMediaUrlBase">
            <summary>
            Get/Sets the DefaultMediaUrlBase of the MediaItemQuery
            </summary>
            <remarks>This will be set by the client and will always have the same value as the ClientConfigurationSection.Instance.DefaultMediaUrlBase</remarks>
            <value>Set this to automatically populate MediaUrlBase for the application</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaItemQuery.DefaultPublishMediaUrlBase">
            <summary>
            Keeps track of the Default MediaUrlBase for queries requesting Published media urls
            </summary>
            <remarks>This will be set by the client and will always have the same value as the ClientConfigurationSection.Instance.DefaultPublishedMediaUrlBase</remarks>
            <value>Set this to automatically populate MediaUrlBase for the application when requesting published media</value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MetadataFilter">
            <summary>
            Defines the filter for finding metadata 
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.MetadataDefinitionId">
            <summary>
            Get/Sets the MetadataDefinitionId of the MetadataQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.Name">
            <summary>
            Get/Sets the Name of the MetadataQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.MetadataDefinitionType">
            <summary>
            Get/Sets the MetadataDefinitionType of the MetadataQuery
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.IsAltText">
            <summary>
            Get/Sets the IsAltText of the MetadataQuery
            </summary>
            <value>Finds metadata that are marked as alt text in the vault</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.IsTitle">
            <summary>
            Get/Sets the IsTitle of the MetadataQuery
            </summary>
            <value>Finds metadata that are marked as title in the vault</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.IsDefinedInVault">
            <summary>
            Inlcude metadata that is defined in each vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataFilter.IsNull">
            <summary>
            Include metadata depending if they have a value or not
            </summary>
            <value>If true, only metadata without value are included. If false only metadata with value. If null, all metadata.</value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataFilter.#ctor(ImageVault.Common.Data.Query.MetadataFilter)">
            <summary>
            Initializes a new instance of the <b>MetadataFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MetadataQuery">
            <summary>
            The query for finding metadata
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataQuery.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataQuery</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataQuery.#ctor(ImageVault.Common.Data.Query.MetadataQuery)">
            <summary>
            Initializes a new instance of the <b>MetadataQuery</b> class.
            </summary>
            <param name="metadataQuery"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataQuery.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataQuery.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.VaultFilter">
            <summary>
            Defines the filter used to find vaults
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultFilter.Id">
            <summary>
            Get/Sets the Id of the VaultFilter
            </summary>
            <value>The id of the vault to get or null to ignore the id of the vault</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultFilter.UserMinAccess">
            <summary>
            Get/Sets the UserMinAccess of the VaultFilter
            </summary>
            <value>The minimum access that the current user should have</value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.VaultFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>VaultFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.VaultFilter.#ctor(ImageVault.Common.Data.Query.VaultFilter)">
            <summary>
            Initializes a new instance of the <b>VaultFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.VaultFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:ImageVault.Common.Data.Query.VaultPopulationQuery">
            <summary>
            The population data for the FindVault query
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultPopulationQuery.AccessList">
            <summary>
            Get/Sets the AccessList of the VaultPopulationQuery
            </summary>
            <value>True if the <see cref="P:ImageVault.Common.Data.Vault.AccessList"/> should be populated</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultPopulationQuery.MetadataDefinitions">
            <summary>
            Get/Sets the MetadataDefinitions of the VaultPopulationQuery
            </summary>
            <value>True if the <see cref="P:ImageVault.Common.Data.Vault.MetadataDefinitions"/> should be populated, false otherwise</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultPopulationQuery.CurrentUserRole">
            <summary>
            Get/Sets the CurrentUserRole of the VaultPopulationQuery
            </summary>
            <value>True if the <see cref="P:ImageVault.Common.Data.Vault.CurrentUserRole"/> should be populated.</value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.VaultQuery">
            <summary>
            Summary description for VaultQuery.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Data.Query.VaultQuery.Populate">
            <summary>
            Get/Sets the Populate of the VaultQuery
            </summary>
            <value>Defines the populate information for the vault</value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MediaFormatQuery">
            <summary>
            Query for selecting media conversion formats
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MediaFormatQuery.Populate">
            <summary>
            Get/Sets the Populate of the MediaFormatQuery
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MetadataDefinitionQuery">
            <summary>
            Summary description for MetadataDefinitionQuery.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataDefinitionQuery.Populate">
            <summary>
            Get/Sets the Populate of the MetadataDefinitionQuery
            </summary>
            <value>The information about what to populate when collecting metadatadefinitions</value>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MetadataDefinitionFilter">
            <summary>
            The filter for finding <see cref="T:ImageVault.Common.Data.MetadataDefinition"/>.
            </summary>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataDefinitionFilter.Id">
            <summary>
            Get/Sets the Id of the MetadataDefinitionFilter
            </summary>
            <value>The id or ids to find metadata definitions for</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataDefinitionFilter.MetadataDefinitionType">
            <summary>
            Get/Sets the MetadataDefinitionType of the MetadataDefinitionFilter
            </summary>
            <value>The <see cref="T:ImageVault.Common.Data.MetadataDefinitionTypes"/> to find metadatadefinitions by</value>
        </member>
        <member name="P:ImageVault.Common.Data.Query.MetadataDefinitionFilter.MetadataType">
            <summary>
            Get/Sets the MetadataType of the MetadataDefinitionFilter
            </summary>
            <value>The <see cref="T:ImageVault.Common.Data.MetadataTypes"/> to find metadata definitions by</value>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataDefinitionFilter.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataDefinitionFilter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataDefinitionFilter.#ctor(ImageVault.Common.Data.Query.MetadataDefinitionFilter)">
            <summary>
            Initializes a new instance of the <b>MetadataDefinitionFilter</b> class.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Query.MetadataDefinitionFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Query.MetadataDefinitionPopulationQuery">
            <summary>
            Summary description for MetadataDefinitionPopulationQuery.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.Query.MetadataDefinitionPopulationQuery.SourceMetadataDefinitions">
            <summary>
            Sets if the mapped information should be populated
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Query.IdentityQuery">
            <summary>
            The query class for finding identities
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="T:ImageVault.Common.Data.ResizeMode">
            <summary>
            A specification for how resizing is done
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.ResizeMode.ScaleToFit">
            <summary>
            Scales the media fit inside the specified width and height, aspect ratio is kept
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.ResizeMode.ScaleToFill">
            <summary>
            Scales the media to fit inside the specified width and height. 
            Cropping will occur if original and target aspect ratio differs.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.StorageLicenseAgreementMessageType">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.StorageLicenseAgreementMessageType.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.StorageLicenseAgreementMessageType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.StorageLicenseAgreementMessageType.Critical">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.SystemMetadata">
            <summary>
            Summary description for SystemMetadata.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.SystemMetadata.Width">
            <summary>
            The width of a media in pixels
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.SystemMetadata.ImageWidth">
            <summary>
            The width of an image in pixels
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.SystemMetadata.ImageHeight">
            <summary>
            The height of an image in pixels
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.SystemMetadata.Height">
            <summary>
            The height of a media in pixels
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.SystemMetadata.FileExtension">
            <summary>
            The file extension of a file
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.SystemMetadata.FileSize">
            <summary>
            The size of a file in bytes
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.SystemMetadata.Duration">
            <summary>
            The duration of a media in seconds
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Thumbnail">
            <summary>
            Defines a thumbnail media
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Thumbnail.#ctor">
            <summary>
            Initializes a new instance of the <b>Thumbnail</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Thumbnail.#ctor(ImageVault.Common.Data.Thumbnail)">
            <summary>
            Initializes a new instance of the <b>Thumbnail</b> class.
            </summary>
            <param name="thumbnail"></param>
        </member>
        <member name="T:ImageVault.Common.Data.TransformableFormat">
            <summary>
            Defines a format that can have effects
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.TransformableFormat.Effects">
            <summary>
            Get/Sets the Effects of the TransformableFormat
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.TransformableFormat.IsEmpty">
            <summary>
            Gets the IsEmpty of the TransformableFormat
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.TransformableFormat.CopyFrom(ImageVault.Common.Data.TransformableFormat)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="format"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.TransformableFormat.Equals(ImageVault.Common.Data.TransformableFormat)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.TransformableFormat"/> is equal to the current 
            <b>TransformableFormat</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.TransformableFormat"/> to compare with the current <see cref="T:ImageVault.Common.Data.TransformableFormat"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.TransformableFormat"/> is equal to the current <b>TransformableFormat</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.TransformableFormat.EffectsEquals(System.Collections.Generic.List{ImageVault.Common.Data.Effects.Effect},System.Collections.Generic.List{ImageVault.Common.Data.Effects.Effect})">
            <summary>
            Determines whether the specified <see cref="T:System.Collections.Generic.List`1"/> instances are considered equal.
            </summary>
            <param name="l1">The first <see cref="T:System.Collections.Generic.List`1"/> to compare.</param>
            <param name="l2">The second <see cref="T:System.Collections.Generic.List`1"/> to compare.</param>
            <returns>true if <i>l1</i> is the same instance as <i>l2</i> 
            or  if both are null references or if <c>l1.Equals(l2)</c> returns true; otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.TransformableFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.TransformableFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ImageVault.Common.Data.UserInfo">
            <summary>
            Summary description for UserInfo.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.UserInfo.Username">
            <summary>
            Get/Sets the Username of the UserInfo
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.UserInfo.Roles">
            <summary>
            Get/Sets the Roles of the UserInfo
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.UserInfo.ImpersonatingClient">
            <summary>
            Get/Sets the ImpersonatingClient of the UserInfo
            </summary>
            <value>If impersonating, the client that allowed the impersonate is contained here</value>
        </member>
        <member name="M:ImageVault.Common.Data.UserInfo.#ctor">
            <summary>
            Initializes a new instance of the <b>UserInfo</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.UserInfo.#ctor(ImageVault.Common.Data.IUser)">
            <summary>
            Initializes a new instance of the <b>UserInfo</b> class.
            </summary>
            <param name="user"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="user"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.UserInfo.#ctor(ImageVault.Common.Data.UserInfo)">
            <summary>
            Initializes a new instance of the <b>UserInfo</b> class.
            </summary>
            <param name="userInfo"></param>
        </member>
        <member name="T:ImageVault.Common.Data.VaultSettings">
            <summary>
            Settings for a vault
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.VaultSettings.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.VaultSettings.#ctor(ImageVault.Common.Data.VaultSettings)">
            <summary>
            Copy constructor
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:ImageVault.Common.Data.VaultSettings.IsPublic">
            <summary>
            If a vault is public (has the public gallery page available)
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.VaultStatistics">
            <summary>
            Contains staticstic for the vault
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.VaultStatistics.Id">
            <summary>
            Get/Sets the Id of the VaultStatistics
            </summary>
            <value>The id of the vault that the statistics belong to</value>
        </member>
        <member name="P:ImageVault.Common.Data.VaultStatistics.NoOfItems">
            <summary>
            Get/Sets the NoOfItems of the Statistics
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.VaultStatistics.NoOfPublishedItems">
            <summary>
            Get/Sets the NoOfPublishedItems of the Statistics
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.VaultStatistics.#ctor">
            <summary>
            Initializes a new instance of the <b>VaultStatistics</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.VaultStatistics.#ctor(ImageVault.Common.Data.VaultStatistics)">
            <summary>
            Initializes a new instance of the <b>VaultStatistics</b> class.
            </summary>
            <param name="vaultStatistics"></param>
        </member>
        <member name="M:ImageVault.Common.Data.VaultStatistics.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.VaultStatistics.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Video">
            <summary>
            Summary description for Video.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Video.#ctor">
            <summary>
            Initializes a new instance of the <b>Video</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Video.#ctor(ImageVault.Common.Data.Video)">
            <summary>
            Initializes a new instance of the <b>Video</b> class.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Video.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.VideoFormat">
            <summary>
            Summary description for VideoFormat.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.VideoFormat.#ctor">
            <summary>
            Initializes a new instance of the <b>VideoFormat</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.VideoFormat.#ctor(ImageVault.Common.Data.VideoFormat)">
            <summary>
            Initializes a new instance of the <b>VideoFormat</b> class.
            </summary>
            <param name="videoFormat"></param>
        </member>
        <member name="M:ImageVault.Common.Data.VideoFormat.CopyFrom(ImageVault.Common.Data.VideoFormat)">
            <summary>
            
            </summary>
            <param name="videoFormat"></param>
        </member>
        <member name="M:ImageVault.Common.Data.VideoFormat.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.WebMediaFormat">
            <summary>
            A WebMediaFormat will keep the source format (image, audio, video) if possible but allow resize operations
            </summary>
            <remarks>
            <para>2011-12-01 dan: Created</para>
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Data.WebMediaFormat.Width">
            <summary>
            Get/Sets the Width of the MediaConversion
            </summary>
            <value>Defines the maximum width of the image</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMediaFormat.Height">
            <summary>
            Get/Sets the Height of the MediaConversion
            </summary>
            <value>Defines the maximum height of the image</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMediaFormat.KeepAspectRatio">
            <summary>
            Get/Sets the KeepAspectRatio of the MediaConversion
            </summary>
            <value>Will keep the original aspect ratio of the image if set to true. If false the image will be the aspect ratio of the target size. Default value is true</value>
            <remarks>If the <see cref="P:ImageVault.Common.Data.WebMediaFormat.AspectRatio"/> is set to anything else than zero, this value has no function since the aspect ratio is already set.</remarks>
        </member>
        <member name="P:ImageVault.Common.Data.WebMediaFormat.AspectRatio">
            <summary>
            Get/Sets the AspectRatio of the MediaConversion
            </summary>
            <value>Defines the aspect ratio of the image. If set the original image will automatically cropped to a size that matches the given aspect ratio 
            (unless the original image already matches the given aspect ratio). Default value is zero. Zero disables the crop function, negative values are illegal.</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMediaFormat.IsEmpty">
            <summary>
            Checks if this is an empty format or not
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.#ctor">
            <summary>
            Initializes a new instance of the <b>WebMediaFormat</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.#ctor(ImageVault.Common.Data.WebMediaFormat)">
            <summary>
            Initializes a new instance of the <b>WebMediaFormat</b> class.
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.CopyFrom(ImageVault.Common.Data.WebMediaFormat)">
            <summary>
            Copies the information from the supplied format to the current instance
            </summary>
            <param name="format">The <see cref="T:ImageVault.Common.Data.WebMediaFormat"/> to copy from</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="format"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.Equals(ImageVault.Common.Data.WebMediaFormat)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.WebMediaFormat"/> is equal to the current 
            <b>WebMediaFormat</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.WebMediaFormat"/> to compare with the current <see cref="T:ImageVault.Common.Data.WebMediaFormat"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.WebMediaFormat"/> is equal to the current <b>WebMediaFormat</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.WebMediaFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ImageVault.Common.Data.WebMedia">
            <summary>
            Summary description for WebMedia.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.Width">
            <summary>
            Get/Sets the Width of the Image
            </summary>
            <value>The actual width that the image will be after applying the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.Height">
            <summary>
            Get/Sets the Height of the Image
            </summary>
            <value>The actual heigth that the image will be after applying the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.AspectRatio">
            <summary>
            Get/Sets the AspectRatio of the ExtendedMediaInformation
            </summary>
            <value></value>
            <remarks>If not set and if a valid width and height are presented, the aspect ratio is calculated</remarks>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.FormatWidth">
            <summary>
            Get/Sets the FormatWidth of the Image
            </summary>
            <value>The widht found in the media conversion or 0 if no width is set in the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.FormatHeight">
            <summary>
            Get/Sets the FormatHeight of the Image
            </summary>
            <value>The height found in the media conversion or 0 if no height is set in the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.WebMedia.FormatAspectRatio">
            <summary>
            Get/Sets the FormatAspectRatio of the Image
            </summary>
            <value>The AspectRatio found in the media conversion or 0 if n aspect ratio was set in the conversion</value>
        </member>
        <member name="M:ImageVault.Common.Data.WebMedia.#ctor">
            <summary>
            Initializes a new instance of the <b>WebMedia</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.WebMedia.#ctor(ImageVault.Common.Data.WebMedia)">
            <summary>
            Initializes a new instance of the <b>WebMedia</b> class.
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:ImageVault.Common.Data.ThumbnailFormat">
            <summary>
            A thumbnail format will always result in an image of the media.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.ThumbnailFormat.IsEmpty">
            <summary>
            Checks if this is an empty format or not
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.#ctor">
            <summary>
            Initializes a new instance of the <b>ThumbnailFormat</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.#ctor(ImageVault.Common.Data.ThumbnailFormat)">
            <summary>
            Initializes a new instance of the <b>ThumbnailFormat</b> class.
            </summary>
            <param name="thumbnailFormat"></param>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.CopyFrom(ImageVault.Common.Data.ThumbnailFormat)">
            <summary>
            Copies the values from the supplied format to the current instance
            </summary>
            <param name="format">The <see cref="T:ImageVault.Common.Data.ImageFormat"/> to copy from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="format"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.Equals(ImageVault.Common.Data.ThumbnailFormat)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.ThumbnailFormat"/> is equal to the current 
            <b>ThumbnailFormat</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.ThumbnailFormat"/> to compare with the current <see cref="T:ImageVault.Common.Data.ThumbnailFormat"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.ThumbnailFormat"/> is equal to the current <b>ThumbnailFormat</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.ThumbnailFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ImageVault.Common.Data.IItem`1">
            <summary>
            The IItem interface defines a data object that has an Id of a specific type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ImageVault.Common.Data.IItem`1.Id">
            <summary>
            Get/Sets the Id of the Category
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.ItemExtensions">
            <summary>
            Extension methods for IEnumerable of IItem of T
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.ItemExtensions.ContainsAll(System.Collections.Generic.IEnumerable{ImageVault.Common.Data.IItem{System.Int32}},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns a value indicating whether the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
             is contained in the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to locate in the 
            <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.</param>
            <param name="ids"></param>
            <returns><b>true</b> if the <i>IEnumerable&lt;Category&gt;</i> parameter is a member 
            of the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ItemExtensions.ContainsAll(System.Collections.Generic.IEnumerable{ImageVault.Common.Data.IItem{System.Int32}},System.Int32[])">
            <summary>
            Returns a value indicating whether the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
             is contained in the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to locate in the 
            <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.</param>
            <param name="ids"></param>
            <returns><b>true</b> if the <i>IEnumerable&lt;Category&gt;</i> parameter is a member 
            of the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ItemExtensions.Contains(System.Collections.Generic.IEnumerable{ImageVault.Common.Data.IItem{System.Int32}},System.Int32)">
            <summary>
            Returns a value indicating whether the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
             is contained in the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.
            </summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to locate in the 
            <see cref="T:ImageVault.Common.Data.ItemExtensions"/>.</param>
            <param name="id"></param>
            <returns><b>true</b> if the <i>IEnumerable&lt;Category&gt;</i> parameter is a member 
            of the <see cref="T:ImageVault.Common.Data.ItemExtensions"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.OriginalFormat">
            <summary>
            Defines the original format of a media item
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.OriginalFormat.OriginalName">
            <summary>
            Gets the OriginalName of the <see cref="T:ImageVault.Common.Data.OriginalFormat"/>
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.OriginalFormat.#ctor">
            <summary>
            Initializes a new instance of the <b>OriginalFormat</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.OriginalFormat.Equals(ImageVault.Common.Data.OriginalFormat)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.OriginalFormat"/> is equal to the current 
            <b>OriginalFormat</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.OriginalFormat"/> to compare with the current <see cref="T:ImageVault.Common.Data.OriginalFormat"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.OriginalFormat"/> is equal to the current <b>OriginalFormat</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.OriginalFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.OriginalFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ImageVault.Common.Data.GlobalRoles">
            <summary>
            Defines all global roles in the system
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.GlobalRoles.None">
            <summary>
            User is not part of a global role
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.GlobalRoles.Administrator">
            <summary>
            The Administrator role. Can administer anything
            </summary>
            
        </member>
        <member name="F:ImageVault.Common.Data.GlobalRoles.MediaFormatAdministrator">
            <summary>
            MediaFormatAdministrator. Can administer conversion formats
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.GlobalRoles.CategoryAdministrator">
            <summary>
            CategoryAdministrator. Can administer categories
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Identity">
            <summary>
            Summary description for Identity.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Identity.Name">
            <summary>
            Get/Sets the Name of the Identity
            </summary>
            <value>The name of the identity</value>
        </member>
        <member name="P:ImageVault.Common.Data.Identity.Type">
            <summary>
            Get/Sets the Type of the Identity
            </summary>
            <value>The <see cref="T:ImageVault.Common.Data.Query.IdentityTypes"/> of the identity</value>
        </member>
        <member name="P:ImageVault.Common.Data.Identity.Roles">
            <summary>
            Get/Sets the Roles of the Identity
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.Identity.#ctor">
            <summary>
            Initializes a new instance of the <b>Identity</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Identity.#ctor(System.String,ImageVault.Common.Data.Query.IdentityTypes)">
            <summary>
            Initializes a new instance of the <b>Identity</b> class.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Identity.#ctor(ImageVault.Common.Data.Identity)">
            <summary>
            Initializes a new instance of the <b>Identity</b> class.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="T:ImageVault.Common.Data.ImageFormat">
            <summary>
            Formats a media to an image.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.ImageFormat.Dpi">
            <summary>
            Get/Sets the Dpi of the MediaConversion
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.ImageFormat.IccProfile">
            <summary>
            Get/Sets the IccProfile of the MediaConversion
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.ImageFormat.CompressionQuality">
            <summary>
            Get/Sets the CompressionQuality of the MediaConversion
            </summary>
            <value>A value from 0 to 100 where 0 is minimum quality and 100 is maximum quality</value>
        </member>
        <member name="P:ImageVault.Common.Data.ImageFormat.IsEmpty">
            <summary>
            Checks if this is an empty format or not
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.#ctor">
            <summary>
            Initializes a new instance of the <b>ImageFormat</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.#ctor(ImageVault.Common.Data.ImageFormat)">
            <summary>
            Initializes a new instance of the <b>ImageFormat</b> class.
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.CopyFrom(ImageVault.Common.Data.ImageFormat)">
            <summary>
            Copies the values from the supplied format to the current instance
            </summary>
            <param name="format">The <see cref="T:ImageVault.Common.Data.ImageFormat"/> to copy from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="format"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.Equals(ImageVault.Common.Data.ImageFormat)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.ImageFormat"/> is equal to the current 
            <b>ImageFormat</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.ImageFormat"/> to compare with the current <see cref="T:ImageVault.Common.Data.ImageFormat"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.ImageFormat"/> is equal to the current <b>ImageFormat</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.ImageFormat.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ImageVault.Common.Data.Image">
            <summary>
            Summary description for Image.
            </summary>
            <remarks>
            </remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Data.Image.#ctor">
            <summary>
            Initializes a new instance of the <b>Image</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Image.#ctor(ImageVault.Common.Data.Image)">
            <summary>
            Initializes a new instance of the <b>Image</b> class.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Image.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.IMediaFormat">
            <summary>
            Summary description for IMediaFormat.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.IMediaFormat.Name">
            <summary>
            Defines the name of the format
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Data.IResizeFormat">
            <summary>
            Defines a conversion format that can performe resize of media
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.IResizeFormat.KeepAspectRatio">
            <summary>
            Get/Sets the KeepAspectRatio of the IResizeFormat
            </summary>
            <value>True if the original aspect ratio should be kept when resizing</value>
        </member>
        <member name="P:ImageVault.Common.Data.IResizeFormat.Width">
            <summary>
            Get/Sets the Width of the IResizeFormat
            </summary>
            <value>If specified, defines the maximum width of the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.IResizeFormat.Height">
            <summary>
            Get/Sets the Height of the IResizeFormat
            </summary>
            <value>If defined, specifies the maximum height of the conversion</value>
        </member>
        <member name="P:ImageVault.Common.Data.IResizeFormat.AspectRatio">
            <summary>
            Get/Sets the AspectRatio of the IResizeFormat
            </summary>
            <value>if larger than 0, defines the target aspect ratio of the image</value>
        </member>
        <member name="T:ImageVault.Common.Data.Language">
            <summary>
            Defines a language in ImageVault
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Language.LanguageCode">
            <summary>
            Get/Sets the LanguageCode of the Language
            </summary>
            <value>The language code for the language in the IETF format http://en.wikipedia.org/wiki/IETF_language_tag </value>
        </member>
        <member name="P:ImageVault.Common.Data.Language.Id">
            <summary>
            Get/Sets the Id of the Language
            </summary>
            <value>The internal id of the language used by ImageVault</value>
        </member>
        <member name="M:ImageVault.Common.Data.Language.#ctor">
            <summary>
            Initializes a new instance of the <b>Language</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Language.#ctor(ImageVault.Common.Data.Language)">
            <summary>
            Initializes a new instance of the <b>Language</b> class.
            </summary>
            <param name="language"></param>
        </member>
        <member name="T:ImageVault.Common.Data.ListExtensions">
            <summary>
            Summary description for ListExtensions.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.ListExtensions.FindCategory(System.Collections.Generic.IList{ImageVault.Common.Data.Category},System.Int32)">
            <summary>
            Finds a category in the list/tree
            </summary>
            <param name="categories"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Data.MediaFormatBase">
            <summary>
            Defines the base class for a conversion format
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.Id">
            <summary>
            Get/Sets the Id of the MediaFormatBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.Name">
            <summary>
            Get/Sets the Name of the MediaFormatBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.MediaFormatOutputType">
            <summary>
            Get/Sets the MediaFormatOutputType of the MediaFormatBase
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.SystemFormat">
            <summary>
            Get/Sets the SystemFormat of the MediaFormatBase
            </summary>
            <value>True if the format is a system format, false if it is a user defined format</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.IsInUse">
            <summary>
            If the conversion format is used by any published files
            this property is not popualted by default
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaFormatBase.IsEmpty">
            <summary>
            Checks if the Format is an empty format
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaFormatBase</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.#ctor(ImageVault.Common.Data.MediaFormatBase)">
            <summary>
            Initializes a new instance of the <b>MediaFormatBase</b> class.
            </summary>
            <param name="mediaFormatBase"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.CopyFrom(ImageVault.Common.Data.MediaFormatBase)">
            <summary>
            Copies the values from the supplied format to the current instance
            </summary>
            <param name="format">The <see cref="T:ImageVault.Common.Data.MediaFormatBase"/> to copy from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="format"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.Equals(ImageVault.Common.Data.MediaFormatBase)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Data.MediaFormatBase"/> is equal to the current 
            <b>MediaFormatBase</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Data.MediaFormatBase"/> to compare with the current <see cref="T:ImageVault.Common.Data.MediaFormatBase"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Data.MediaFormatBase"/> is equal to the current <b>MediaFormatBase</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Data.MediaFormatBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:ImageVault.Common.Data.MediaConversionTypes">
            <summary>
            Defines the different conversion types that we can convert to
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaConversionTypes.Original">
            <summary>
            Original version of the media
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaConversionTypes.Image">
            <summary>
            A conversion to an image
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaConversionTypes.Generic">
            <summary>
            A generic conversion that keeps the original format as much as possible.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Media">
            <summary>
            Defines information about a specific media item for a specific conversion
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Media.MediaFormatName">
            <summary>
            Get/Sets the MediaFormatName of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.Id">
            <summary>
            Get/Sets the Id of the MediaItem that the Media represents
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.MediaFormatId">
            <summary>
            Get/Sets the MediaFormatId of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.Url">
            <summary>
            Get/Sets the Url of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.ContentDisplayType">
            <summary>
            Get/Sets the ContentDisplayType of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.Html">
            <summary>
            Get/Sets the Html of the Media
            </summary>
            <value>If the content has a suggested or required Html, it is supplied here</value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.ContentType">
            <summary>
            Get/Sets the ContentType of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.Name">
            <summary>
            Get/Sets the Name of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.DisplayInformation">
            <summary>
            Get/Sets the DisplayInformation of the Media
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Media.IsFileIcon">
            <summary>
            Is true if the media is a file icon conversion.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Media.#ctor">
            <summary>
            Initializes a new instance of the <b>Media</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Media.#ctor(ImageVault.Common.Data.Media)">
            <summary>
            Initializes a new instance of the <b>Media</b> class.
            </summary>
            <param name="mediaInformation"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Media.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.MediaItem">
            <summary>
            Summary description for MediaItem.
            </summary>
            <remarks>
            </remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.Id">
            <summary>
            Get/Sets the Id of the MediaItem
            </summary>
            <value>The id of the mediaitem</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.VaultId">
            <summary>
            Get/Sets the VaultId of the MediaItem
            </summary>
            <value>The Id of the vault where the item resides</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.Name">
            <summary>
            Get/Sets the Name of the MediaItem
            </summary>
            <value>The name of the media item</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.CanBeDownloaded">
            <summary>
            Get/Sets the CanBeDownloaded of the MediaItem
            </summary>
            <value>If the media item is downloadable</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.MediaConversions">
            <summary>
            Get/Sets the MediaFormats of the MediaItem
            </summary>
            <remarks>Not necessarily in the requested order.</remarks>
            <value>The <see cref="T:System.Collections.Generic.List`1"/> that was populated</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.Metadata">
            <summary>
            Get/Sets the Metadata of the MediaItem
            </summary>
            <value>The populated metadata</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.Categories">
            <summary>
            Get/Sets the Categories of the MediaItem
            </summary>
            <value>The <see cref="T:System.Collections.Generic.List`1"/> of the item (if it is populated)</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.PublishInformation">
            <summary>
            Get/Sets the PublishInformation of the MediaItem
            </summary>
            <value>The <see cref="T:System.Collections.Generic.List`1"/> if it is populated</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.DateAdded">
            <summary>
            Get/Sets the DateAdded of the MediaItem
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.Access">
            <summary>
            Get/Sets the Access of the MediaItem
            </summary>
            <remarks>Not populated by default populated</remarks>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.AddedBy">
            <summary>
            Get/Sets the AddedBy of the MediaItem
            </summary>
            <value>The name of the user that added the image</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.Shared">
            <summary>
            Get/Sets the Shared of the MediaItem
            </summary>
            <value>If populated, contains the information if the file is shared or not</value>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.DuplicateMediaItemId">
            <summary>
            Contains a list of duplicate media item ids
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.DuplicateVersionId">
            <summary>
            Contains a list of duplicate version ids
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.CurrentVersionId">
            <summary>
            Defines the id of the version that is the current selected version for the media item
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.VersionId">
            <summary>
            Defines the id of the version of this media item.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MediaItem.MediaVersion">
            <summary>
            Defines the MediaVersion information
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MediaItem.#ctor">
            <summary>
            Initializes a new instance of the <b>MediaItem</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MediaItem.#ctor(ImageVault.Common.Data.MediaItem)">
            <summary>
            Initializes a new instance of the <b>MediaItem</b> class.
            </summary>
            <param name="mediaItem"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MediaItem.CopyTo(ImageVault.Common.Data.MediaItem)">
            <summary>
            Copies the information from one mediaitem to another...
            </summary>
            <param name="mi"></param>
        </member>
        <member name="T:ImageVault.Common.Data.MediaItemSortOrders">
            <summary>
            Defines the sortorder for a list of media items
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.None">
            <summary>
            items are not sorted
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.Name">
            <summary>
            Sorts by name in an ascending order
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.NameDecending">
            <summary>
            Sorts by name in a descending order
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.DateAdded">
            <summary>
            Sorts by date added in an ascending order
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.DateAddedDecending">
            <summary>
            Sorts by date added in a descending order
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.MediaItemId">
            <summary>
            Sorts by the MediaItemId field in an ascending order
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemSortOrders.MediaItemIdDescending">
            <summary>
            Sorts by the MediaItemId field in a Descending order
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.MediaItemStates">
            <summary>
            Defines the different states that a media item can be in
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.CreatedInCore">
            <summary>
            Media is created but has no content
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.MetadataAnalyzed">
            <summary>
            Metadata has been analysed and stored
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.OriginalContentStored">
            <summary>
            The original content of the media item has been stored in the storage
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.AnalyzedAndStored">
            <summary>
            When metadata has been analyzed and original content has been stored
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.MetadataOrganized">
            <summary>
            DbMetadata has been manunaly organized and stored
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaItemStates.MediaReadyToUse">
            <summary>
            Media item is ready to be used
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.MediaServiceSaveOptions">
            <summary>
            Defines the different Media service save options
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaServiceSaveOptions.Default">
            <summary>
            Stores standard MediaItem properties (Will always do this, regardless of save option)
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaServiceSaveOptions.Metadata">
            <summary>
            Saves the Metadata in the object
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaServiceSaveOptions.Categories">
            <summary>
            Saves the Categories assigned to the mediaitem
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaServiceSaveOptions.MarkAsOrganized">
            <summary>
            Marks the item as organized
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MediaServiceSaveOptions.Vault">
            <summary>
            Saves the vault of the object
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.Metadata">
            <summary>
            Defines a metadata that consistst of one or several metadata values of the same definition.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.Name">
            <summary>
            Get/Sets the Name of the Metadata
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.DefinitionType">
            <summary>
            Get/Sets the DefinitionType of the Metadata
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.LanguageId">
            <summary>
            Get/Sets the LanguageId of the Metadata
            </summary>
            <value>The id of the language of the metadata</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsMandantory">
            <summary>
            Get/Sets the IsMandantory of the Metadata
            </summary>
            <value>If true the metadata is mandantory in at least one vault that it is part of</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsTitle">
            <summary>
            Get/Sets the IsDefaultTitle of the Metadata
            </summary>
            <value>If true this is default title in the vault</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsAltText">
            <summary>
            Get/Sets the IsDefaultAltText of the Metadata
            </summary>
            <value>If true this is the default alt text in the vault</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.InnerValue">
            <summary>
            Get/Sets the InnerValue of the Metadata
            </summary>
            <value>The value for all metadata objects. If <see cref="P:ImageVault.Common.Data.Metadata.IsCoherent"/> is false this only contains the value of the first item</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.Value">
            <summary>
            Get/Sets the Value of the Metadata
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsCoherent">
            <summary>
            Get/Sets the IsCoherent of the Metadata
            </summary>
            <value>If true all metadata that was used to create the condensed value has the same value</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.MetadataDefinitionId">
            <summary>
            Get/Sets the MetadataDefinitionId of the Metadata
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsNull">
            <summary>
            Get/Sets the IsNull of the Metadata
            </summary>
            <value>If true the value is not set, false if it is set to a non null value</value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsReadOnly">
            <summary>
            If user can change metadata
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsMultilingual">
            <summary>
            If the matadata can existis for multiple languages
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Metadata.IsDefinedInVault">
            <summary>
            Get/Sets the IsDefinedInVault of the Metadata
            </summary>
            <value>True if this metadata is defined in the vault that the item resides in.</value>
        </member>
        <member name="M:ImageVault.Common.Data.Metadata.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>Metadata</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Metadata.#ctor">
            <summary>
            Initializes a new instance of the <b>Metadata</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Metadata.#ctor(ImageVault.Common.Data.Metadata)">
            <summary>
            Initializes a new instance of the <b>Metadata</b> class.
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:ImageVault.Common.Data.Metadata.CreateInstance(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of a metadata that matches the supplied definition
            </summary>
            <param name="definition">The <see cref="T:ImageVault.Common.Data.MetadataDefinition"/> to use as a base for creating the <see cref="T:ImageVault.Common.Data.Metadata"/></param>
            <param name="languageId">The id of the language to use for creating the metadata</param>
            <param name="isMandantory">If the metadata is mandantory or not</param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="definition"/> is null.</exception>
            <exception cref="T:System.NotImplementedException">If not implemented Metadata for type .</exception>
        </member>
        <member name="M:ImageVault.Common.Data.Metadata.Parse(System.String)">
            <summary>
            Parses the supplied value and assigns it to the metadata
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataBoolean">
            <summary>
            Summary description for MetadataBoolean.
            </summary>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataBoolean.InnerValue">
            <summary>
            Get/Sets the InnerValue of the Metadata
            </summary>
            <value>The value for all metadata objects. If <see cref="P:ImageVault.Common.Data.Metadata.IsCoherent"/> is false this only contains the value of the first item</value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataBoolean.BooleanValue">
            <summary>
            Get/Sets the BooleanValue of the MetadataBoolean
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataBoolean.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataBoolean</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataBoolean.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataBoolean</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataBoolean.#ctor(ImageVault.Common.Data.MetadataBoolean)">
            <summary>
            Initializes a new instance of the <b>MetadataBoolean</b> class.
            </summary>
            <param name="metadataBoolean"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataBoolean.Parse(System.String)">
            <summary>
            Parses the supplied value and assigns it to the metadata
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If the value was is a valid boolean.</exception>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataDateTime">
            <summary>
            Summary description for MetadataDateTime.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDateTime.InnerValue">
            <summary>
            Get/Sets the InnerValue of the Metadata
            </summary>
            <value>The value for all metadata objects. If <see cref="P:ImageVault.Common.Data.Metadata.IsCoherent"/> is false this only contains the value of the first item</value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDateTime.DateTimeValue">
            <summary>
            Get/Sets the DateTimeValue of the MetadataBoolean
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDateTime.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataDateTime</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDateTime.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataDateTime</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDateTime.#ctor(ImageVault.Common.Data.MetadataDateTime)">
            <summary>
            Initializes a new instance of the <b>MetadataDateTime</b> class.
            </summary>
            <param name="metadataDateTime"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDateTime.Parse(System.String)">
            <summary>
            Parses the supplied value and assigns it to the metadata
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If the value is not a valid DateTime.</exception>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataDecimal">
            <summary>
            Summary description for MetadataDecimal.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDecimal.DecimalValue">
            <summary>
            Get/Sets the DecimalValue of the MetadataDecimal
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDecimal.InnerValue">
            <summary>
            Get/Sets the InnerValue of the MetadataDecimal
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDecimal.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataDecimal</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDecimal.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataDecimal</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDecimal.#ctor(ImageVault.Common.Data.MetadataDecimal)">
            <summary>
            Initializes a new instance of the <b>MetadataDecimal</b> class.
            </summary>
            <param name="metadataDecimal"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDecimal.Parse(System.String)">
            <summary>
            Parses the supplied value and assigns it to the metadata
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If the value is not a valid decimal.</exception>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataDefinition">
            <summary>
            Defines a metadata definition
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.Id">
            <summary>
            Get/Sets the Id of the MetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.Name">
            <summary>
            Get/Sets the Name of the MetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.MetadataType">
            <summary>
            Get/Sets the MetadataType of the MetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.MetadataDefinitionType">
            <summary>
            Get/Sets the MetadataDefinitionType of the MetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.Description">
            <summary>
            Get/Sets the Description of the MetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.IsReadOnly">
            <summary>
            Get/Sets the IsReadOnly of the MetadataDefinition
            </summary>
            <value>If true, the value of the metadata cannot be changed</value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.IsMultilingual">
            <summary>
            Get/Sets the IsMultilingual of the MetadataDefinition
            </summary>
            <value>If true, the value can be translated to other languages</value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinition.SourceMetadataDefinitions">
            <summary>
            Get/Sets the SourceMetadataDefinitions of the <see cref="T:ImageVault.Common.Data.MetadataDefinition"/>
            </summary>
            <value>Defines the list of metadatadefinitions that will be mapped to this metadata definition</value>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDefinition.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataDefinition</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDefinition.#ctor(ImageVault.Common.Data.MetadataDefinition)">
            <summary>
            Initializes a new instance of the <b>MetadataDefinition</b> class.
            </summary>
            <param name="metadataDefinition">The <see cref="T:ImageVault.Common.Data.MetadataDefinition"/> to copy the values from</param>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataDefinitionMapping">
            <summary>
            Defines the mapping for a metadata definition
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinitionMapping.Priority">
            <summary>
            Get/Sets the Priority of the DbMetadataDefinitionMapping
            </summary>
            <value>The priority order of the mapping. Lower values goes first.</value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataDefinitionMapping.MetadataDefinition">
            <summary>
            Get/Sets the MetadataDefinition of the <see cref="T:ImageVault.Common.Data.MetadataDefinitionMapping"/>
            </summary>
            <value>The mapped <see cref="P:ImageVault.Common.Data.MetadataDefinitionMapping.MetadataDefinition"/> </value>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDefinitionMapping.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataDefinitionMapping</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataDefinitionMapping.#ctor(ImageVault.Common.Data.MetadataDefinitionMapping)">
            <summary>
            Initializes a new instance of the <b>MetadataDefinitionMapping</b> class.
            </summary>
            <param name="metadataDefinitionMapping"></param>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataDefinitionTypes">
            <summary>
            Defines the different types of meta data definitions that exists
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.System">
            <summary>
            A System DbMetadata definition type defines a meta data that is defined by the ImageVault system
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.User">
            <summary>
            Defines a User defined meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Iptc">
            <summary>
            Defines an IPTC meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Exif">
            <summary>
            Defines an EXIF meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Xmp">
            <summary>
            Defines the XMP meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Id3V1">
            <summary>
            Defines the Id3v1 meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Id3V2">
            <summary>
            Defines the Id3v1 meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Riff">
            <summary>
            Defines the Riff meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Jfif">
            <summary>
            Defines the JFIF meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Gps">
            <summary>
            Defines the GPS meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.PhotoshopIrb">
            <summary>
            Defines the Photoshop IRB meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.FlashPix">
            <summary>
            Defines the FlashPix meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Afcp">
            <summary>
            Defines the AFCP meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.GeoTiff">
            <summary>
            Defines the GeoTIFF meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.IccProfile">
            <summary>
            Defines the ICC Profile meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.WindowsMedia">
            <summary>
            Defines the Windows Media meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.PdfDocInfo">
            <summary>
            PdfDocument info
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Dicom">
            <summary>
            Leadtools specific meta data
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.ThirdParty">
            <summary>
            ThirdParty specific meta data
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.YouTube">
            <summary>
            YouTube specific meta data
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Vidispine">
            <summary>
            Vidispine specific meta data
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Spotify">
            <summary>
            Spotify specific meta data
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Custom">
            <summary>
            Custom specific meta data
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Image">
            <summary>
            Image specific meta data
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Video">
            <summary>
            Video specific meta data
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Audio">
            <summary>
            Audio specific meta data
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.Document">
            <summary>
            Document specific meta data
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesCanon">
            <summary>
            Defines the MakerNotes Canon meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesCasio">
            <summary>
            Defines the MakerNotes Casio meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesFujiFilm">
            <summary>
            Defines the MakerNotes FujiFilm meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesGe">
            <summary>
            Defines the MakerNotes GE meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesHp">
            <summary>
            Defines the MakerNotes HP meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesJvcVictor">
            <summary>
            Defines the MakerNotes JVC/Victor meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesKodak">
            <summary>
            Defines the MakerNotes Kodak meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesLeaf">
            <summary>
            Defines the MakerNotes Leaf meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesMinoltaKonicaMinolta">
            <summary>
            Defines the MakerNotes Minolta/Konica-Minolta meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesNikon">
            <summary>
            Defines the MakerNotes Nikon meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesOlympusEpson">
            <summary>
            Defines the MakerNotes Olympus/Epson meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.MakerNotesPanasonicLeica">
            <summary>
            Defines the MakerNotes Panasonic/Leica meta data type
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined1">
            <summary>
            UserDefined1
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined2">
            <summary>
            UserDefined2
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined3">
            <summary>
            UserDefined3
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined4">
            <summary>
            UserDefined4
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined5">
            <summary>
            UserDefined5
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined6">
            <summary>
            UserDefined6
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined7">
            <summary>
            UserDefined7
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined8">
            <summary>
            UserDefined8
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataDefinitionTypes.UserDefined9">
            <summary>
            UserDefined9
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataInteger">
            <summary>
            Summary description for MetadataInteger.
            </summary>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataInteger.IntegerValue">
            <summary>
            Get/Sets the IntegerValue of the MetadataInteger
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataInteger.InnerValue">
            <summary>
            Get/Sets the InnerValue of the DbMetadataString
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataInteger.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataInteger</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataInteger.#ctor(ImageVault.Common.Data.MetadataInteger)">
            <summary>
            Initializes a new instance of the <b>MetadataInteger</b> class.
            </summary>
            <param name="metadataInteger"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataInteger.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataInteger</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataInteger.Parse(System.String)">
            <summary>
            Parses the string to a MetadataInteger
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">If the value is not a valid int.</exception>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataLongString">
            <summary>
            Defines a metadatastring that is maximum 8190 characters of length
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataLongString.LongStringValue">
            <summary>
            Get/Sets the LongStringValue of the MetadataLongString
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataLongString.InnerValue">
            <summary>
            Get/Sets the InnerValue of the DbMetadataString
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataLongString.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataLongString</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataLongString.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataLongString</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataLongString.#ctor(ImageVault.Common.Data.MetadataLongString)">
            <summary>
            Initializes a new instance of the <b>MetadataLongString</b> class.
            </summary>
            <param name="metadataLongString"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataLongString.Parse(System.String)">
            <summary>
            Parses the supplied value as a MetadataLongString
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataString">
            <summary>
            Defines a metadata string that is maximum 250 characters of length
            </summary>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataString.StringValue">
            <summary>
            Get/Sets the StringValue of the MetadataString
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.MetadataString.InnerValue">
            <summary>
            Get/Sets the Value of the DbMetadataString
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataString.#ctor(ImageVault.Common.Data.MetadataDefinition,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MetadataString</b> class.
            </summary>
            <param name="definition"></param>
            <param name="languageId"></param>
            <param name="isMandantory"></param>
            <param name="isTitle"></param>
            <param name="isAltText"></param>
            <param name="isDefinedInVault"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataString.#ctor">
            <summary>
            Initializes a new instance of the <b>MetadataString</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataString.#ctor(ImageVault.Common.Data.MetadataString)">
            <summary>
            Initializes a new instance of the <b>MetadataString</b> class.
            </summary>
            <param name="metadataString"></param>
        </member>
        <member name="M:ImageVault.Common.Data.MetadataString.Parse(System.String)">
            <summary>
            Parses the supplied value and assigns it to the metadata
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:ImageVault.Common.Data.MetadataTypes">
            <summary>
            Enum that matches rows in table MetadataTypes
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.Integer">
            <summary>
            Integer
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.LongString">
            <summary>
            LongString
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.MetadataTypes.Decimal">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.PopulateFields">
            <summary>
            Defines which fields that should be populated
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.PopulateFields.None">
            <summary>
            None, don't populate any extra fields
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.PopulateFields.CanBeDownloaded">
            <summary>
            Populates the <see cref="P:ImageVault.Common.Data.MediaItem.CanBeDownloaded"/> field
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.PopulateFields.Categories">
            <summary>
            Populates the <see cref="P:ImageVault.Common.Data.MediaItem.Categories"/> field
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.PopulateFields.StorageInformation">
            <summary>
            Populates the <see cref="P:ImageVault.Common.Data.Media.Html"/> field of the <see cref="P:ImageVault.Common.Data.MediaItem.MediaConversions"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.PopulateFields.Access">
            <summary>
            Populates the <see cref="P:ImageVault.Common.Data.MediaItem.Access"/> field
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.PopulateFields.Shared">
            <summary>
            Populates the <see cref="P:ImageVault.Common.Data.MediaItem.Shared"/> field
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.PublishInformation">
            <summary>
            The Publishing source information for a specific media item
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.PublishInformation.PublishingSourceId">
            <summary>
            Get/Sets the PublishingSourceId of the PublishInformation
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.PublishInformation.PublishingSourceIdentifier">
            <summary>
            Get/Sets the PublishingSourceIdentifier of the PublishInformation
            </summary>
            <value>The identifier of the publishing source</value>
        </member>
        <member name="M:ImageVault.Common.Data.PublishInformation.#ctor">
            <summary>
            Initializes a new instance of the <b>PublishInformation</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.PublishInformation.#ctor(ImageVault.Common.Data.PublishInformation)">
            <summary>
            Initializes a new instance of the <b>PublishInformation</b> class.
            </summary>
            <param name="publishInformation"></param>
        </member>
        <member name="M:ImageVault.Common.Data.PublishInformation.Equals(ImageVault.Common.Data.PublishInformation)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="other">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Data.PublishInformation.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:ImageVault.Common.Data.PublishInformation.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.StorageInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.StorageInfo.Name">
            <summary>
            Storage Name
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.StorageInfo.CanDeleteContent">
            <summary>
            If files can be deleted from storage
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.StorageInfo.#ctor">
            <summary>
            Initializes a new instance of the <b>StorageInfo</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.StorageInfo.#ctor(ImageVault.Common.Data.StorageInfo)">
            <summary>
            Initializes a new instance of the <b>StorageInfo</b> class.
            </summary>
            <param name="si"></param>
        </member>
        <member name="T:ImageVault.Common.Data.StorageLicenseAgreement">
            <summary>
            The Storage license agreement for a specific storage
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.StorageLicenseAgreement.UploadLicenseMessage">
            <summary>
            Get/Sets the UploadLicenseMessage of the StorageLicenseAgreement
            </summary>
            <value>This html will be presented in the upload dialog.</value>
        </member>
        <member name="P:ImageVault.Common.Data.StorageLicenseAgreement.MessageType">
            <summary>
            Get/Sets the MessageType of the StorageLicenseAgreement
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Data.StorageLicenseAgreement.#ctor">
            <summary>
            Initializes a new instance of the <b>StorageLicenseAgreement</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.StorageLicenseAgreement.#ctor(ImageVault.Common.Data.StorageLicenseAgreement)">
            <summary>
            Initializes a new instance of the <b>StorageLicenseAgreement</b> class.
            </summary>
            <param name="storageLicenseAgreement"></param>
        </member>
        <member name="T:ImageVault.Common.Data.User">
            <summary>
            Summary description for User.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.User.Username">
            <summary>
            Get/Sets the Username of the User
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.User.EmailAddress">
            <summary>
            Get/Sets the EmailAddress of the User
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.User.NameIdentifier">
            <summary>
            Gets the name identifier for the user
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.User.Roles">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Data.User.Identities">
            <summary>
            Gets the Identities of the User
            </summary>
            <value>a <see cref="T:System.Collections.Generic.IList`1"/> containing the users username and all roles</value>
        </member>
        <member name="P:ImageVault.Common.Data.User.Principal">
            <summary>
            Get/Sets the Principal of the User
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.User.GlobalRoles">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Data.User.#ctor">
            <summary>
            Initializes a new instance of the <b>User</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.User.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>User</b> class.
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:ImageVault.Common.Data.User.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <b>User</b> class.
            </summary>
            <param name="username"></param>
            <param name="roles"></param>
        </member>
        <member name="M:ImageVault.Common.Data.User.#ctor(System.Security.Principal.IPrincipal)">
            <summary>
            Initializes a new instance of the <b>User</b> class.
            </summary>
            <param name="principal"></param>
        </member>
        <member name="M:ImageVault.Common.Data.User.#ctor(ImageVault.Common.Data.User)">
            <summary>
            Initializes a new instance of the <b>User</b> class.
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:ImageVault.Common.Data.User.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.User"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Data.User"/>.</returns>
        </member>
        <member name="T:ImageVault.Common.Data.Vault">
            <summary>
            Defines a Vault where Media is stored
            </summary>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.Id">
            <summary>
            Get/Sets the Id of the Vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.Name">
            <summary>
            Get/Sets the Name of the Vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.Description">
            <summary>
            Get/Sets the Description of the Vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.MetadataDefinitions">
            <summary>
            Get/Sets the MetadataDefinitions of the Vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.AccessList">
            <summary>
            Get/Sets the AccessList of the Vault
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.CurrentUserRole">
            <summary>
            Get/Sets the CurrentUserRole of the Vault
            </summary>
            <remarks>Only populated if the <see cref="P:ImageVault.Common.Data.Query.VaultPopulationQuery.CurrentUserRole"/> is true</remarks>
            <value>The current user role</value>
        </member>
        <member name="P:ImageVault.Common.Data.Vault.Settings">
            <summary>
            Keeps track of custom settings for the vault
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Vault.#ctor">
            <summary>
            Initializes a new instance of the <b>Vault</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.Vault.#ctor(ImageVault.Common.Data.Vault)">
            <summary>
            Initializes a new instance of the <b>Vault</b> class.
            </summary>
            <param name="vault"></param>
        </member>
        <member name="T:ImageVault.Common.Data.VaultAccess">
            <summary>
            Defines the access for a specific identity in a vault
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.VaultAccess.Identity">
            <summary>
            Get/Sets the Identity of the VaultAccess
            </summary>
            <value>The name of the user/group who has the access</value>
        </member>
        <member name="P:ImageVault.Common.Data.VaultAccess.DisplayName">
            <summary>
            Get/Sets the DisplayName of the VaultAccess
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.VaultAccess.Role">
            <summary>
            Get/Sets the Role of the VaultAccess
            </summary>
            <value>The <see cref="T:ImageVault.Common.Data.VaultRoles"/> for the identity</value>
        </member>
        <member name="M:ImageVault.Common.Data.VaultAccess.#ctor">
            <summary>
            Initializes a new instance of the <b>VaultAccess</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.VaultAccess.#ctor(ImageVault.Common.Data.VaultAccess)">
            <summary>
            Initializes a new instance of the <b>VaultAccess</b> class.
            </summary>
            <param name="vaultAccess"></param>
        </member>
        <member name="T:ImageVault.Common.Data.VaultMetadataDefinition">
            <summary>
            Defines the VaultMetadataDefinition 
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Data.VaultMetadataDefinition.MetadataDefinition">
            <summary>
            Get/Sets the MetadataDefinition of the VaultMetadataDefinition
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Data.VaultMetadataDefinition.IsMandatory">
            <summary>
            Get/Sets the IsMandatory of the VaultMetadataDefinition
            </summary>
            <value>True if this metadata is mandatory in the vault</value>
        </member>
        <member name="M:ImageVault.Common.Data.VaultMetadataDefinition.#ctor">
            <summary>
            Initializes a new instance of the <b>VaultMetadataDefinition</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Data.VaultMetadataDefinition.#ctor(ImageVault.Common.Data.VaultMetadataDefinition)">
            <summary>
            Initializes a new instance of the <b>VaultMetadataDefinition</b> class.
            </summary>
            <param name="vaultMetadataDefinition"></param>
        </member>
        <member name="T:ImageVault.Common.Data.VaultRoles">
            <summary>
            Defines all vault roles in the system
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultRoles.FullControl">
            <summary>
            User can perform all actions on a vault 
            Includes the Contribute role
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultRoles.Contribute">
            <summary>
            User can contribute to the vault, upload, delete, modify metadata
            Includes the view role
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultRoles.View">
            <summary>
            User has read access to the vault, can view images and metadata
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultRoles.None">
            <summary>
            User has no access to the vault
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultRoles.AccessRightsWrite">
            <summary>
            AccessRightsWrite
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultRoles.AccessRightsAdmin">
            <summary>
            AccessRightsAdmin
            </summary>
        </member>
        <member name="T:ImageVault.Common.Data.VaultServiceSaveOptions">
            <summary>
            Defines the different Vault service save options
            Combine one or more options with |
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultServiceSaveOptions.Vault">
            <summary>
            Saves basic Vault information
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultServiceSaveOptions.MetadataDefinitions">
            <summary>
            Saves MetadataDefinitions for the vault
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultServiceSaveOptions.AccessRights">
            <summary>
            Saves AccessRights for the vault
            </summary>
        </member>
        <member name="F:ImageVault.Common.Data.VaultServiceSaveOptions.All">
            <summary>
            Saves All information
            </summary>
        </member>
        <member name="T:ImageVault.Common.ImageVaultConfigurationException">
            <summary>
            An exception describing a Configuration error
            </summary>
        </member>
        <member name="M:ImageVault.Common.ImageVaultConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <b>ImageVaultException</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.ImageVaultConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>ImageVaultException</b> class with a specified error message.
            </summary>
            <param name="message">a message that describes the exception</param>
        </member>
        <member name="M:ImageVault.Common.ImageVaultConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <b>ImageVaultException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">a message that describes the exception</param>
            <param name="innerException">The exception that caused this exception</param>
        </member>
        <member name="T:ImageVault.Common.ImageVaultException">
            <summary>
            General exception for ImageVault components.
            </summary>
        </member>
        <member name="M:ImageVault.Common.ImageVaultException.#ctor">
            <summary>
            Initializes a new instance of the <b>ImageVaultException</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.ImageVaultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>ImageVaultException</b> class with a specified error message.
            </summary>
            <param name="message">a message that describes the exception</param>
        </member>
        <member name="M:ImageVault.Common.ImageVaultException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <b>ImageVaultException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">a message that describes the exception</param>
            <param name="innerException">The exception that caused this exception</param>
        </member>
        <member name="M:ImageVault.Common.ImageVaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>ImageVaultException</b> class with serialized data. 		/// </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination.</param>
        </member>
        <member name="M:ImageVault.Common.ImageVaultException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <b>ImageVaultException</b> class with a specified formatted error message.		/// </summary>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items. </param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
        </member>
        <member name="T:ImageVault.Common.Lib.ActivatorUtil">
            <summary>
            Summary description for ActivatorUtil.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.ActivatorUtil.CreateInstance``1(System.String)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ApplicationException">If cannot find type named 
             or if error instancing type .</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.BaseException">
            <summary>
            Summary description for BaseException.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.BaseException.#ctor(System.String)">
            <summary>
            Creates an instance of the BaseException class.
            </summary>
            <param name="message">Message for the exception</param>
        </member>
        <member name="M:ImageVault.Common.Lib.BaseException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the BaseException class.
            </summary>
            <param name="message">Message for the exception</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:ImageVault.Common.Lib.BaseException.#ctor">
            <summary>
            Creates an instance of the BaseException class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.BaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>BaseException</b> class.
            </summary>
            <param name="info">The object that holds the serialized object data. </param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.BaseException.ToString">
            <summary>
            Converts the exception to a descriptive text
            </summary>
            <returns>A descriptive text</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.BaseException.ToString(System.String)">
            <summary>
            Converts the exception to a descriptive text
            </summary>
            <param name="innerMessage">An inner message to be prepended to the description</param>
            <returns>A descriptive text</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.BaseException.ExceptionToString(System.Exception)">
            <summary>
            Creates a string of the exception that is a combination of all inner exceptions found, 
            plus the stacktrace
            </summary>
            <param name="ex">The exception to read from </param>
            <returns>A descriptive text</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.BaseException.ExceptionToString(System.Exception,System.String)">
            <summary>
            Creates a string of the exception that is a combination of all inner exceptions found, 
            plus the stacktrace
            </summary>
            <param name="ex">The exception to read from </param>
            <param name="innerMessage">An inner message to be prepended to the list of messages</param>
            <returns>A descriptive text</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Collections.Generic.EnumerableExtensions">
            <summary>
            Extension methods for the IEnumerable of T class
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns a distinct enumerable of the input enumerable
            </summary>
            <typeparam name="TSource">The type to enumerate</typeparam>
            <typeparam name="TKey">The key to filter by</typeparam>
            <param name="source">The source enumerable to parse</param>
            <param name="keySelector">The selector for checking for distinct keys</param>
            <returns>Enumerates all items from the source that are unique according to the keySelector.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.EqualEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <b>EqualEqualityComparer&lt;T&gt;</b> class.
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.EqualEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.EqualEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>
            A hash code for the specified object.
            </returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.Collections.Generic.IListFactory`2">
            <summary>
            interface for managing lists
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TList"></typeparam>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.IListFactory`2.Create(System.Int32)">
            <summary>
            Creates a list with the supplied capacity
            </summary>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.IListFactory`2.FindIndex(`1,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="list"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Collections.Generic.ListFactory`1">
            <summary>
            ListFactory implementation for <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ListFactory`1.Create(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ListFactory`1.FindIndex(System.Collections.Generic.List{`0},System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="list"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1">
            <summary>
            Summary description for ModifiedList.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.DefaultCapacity">
            <summary>
            Default capacity of new created lists if not specified
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.IsModified">
            <summary>
            Get/Sets the IsModified of the ModifiedList
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.Count">
            <summary>
            Gets the Count of the ModifiedList
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.IsReadOnly">
            <summary>
            Gets the IsReadOnly of the ModifiedList
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.Item(System.Int32)">
            <summary>
            Get/Sets the <typeparamref name="T"/> item identified by the given arguments of the ModifiedList
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.#ctor">
            <summary>
            Initializes a new instance of the <b>ModifiedList</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>ModifiedList</b> class.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.Contains(`0)">
            <summary>
            Returns a value indicating whether the specified <typeparamref name="T"/>
             is contained in the <see cref="T:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1"/>.
            </summary>
            <param name="item">The <typeparamref name="T"/> to locate in the 
            <see cref="T:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1"/>.</param>
            <returns><b>true</b> if the <i>T</i> parameter is a member 
            of the <see cref="T:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1.FindIndex(System.Predicate{`0})">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.Collections.Generic.ModifiedListFactory`1">
            <summary>
            List factory for <see cref="T:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedListFactory`1.Create(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.ModifiedListFactory`1.FindIndex(ImageVault.Common.Lib.Collections.Generic.ModifiedList{`0},System.Predicate{`0})">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3">
            <summary>
            This is a list containing unique items. You can specify what list type that you would use as Inner list
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.DefaultCapacity">
            <summary>
            Default capacity of new created lists if not specified
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.DefaultQuiet">
            <summary>
            Default value for the quiet parameter
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.InnerList">
            <summary>
            Get/Sets the InnerList of the UniqueList
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.Quiet">
            <summary>
            Get/Sets the Quiet of the UniqueList
            </summary>
            <value>If set to true, this will not throw any exception on duplicate inserts, only ignore the insert.</value>
        </member>
        <member name="P:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.Item(System.Int32)">
            <summary>
            Get/Sets the  item identified by the given arguments of the UniqueList
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.Count">
            <summary>
            Gets the Count of the UniqueList
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.IsReadOnly">
            <summary>
            Gets the IsReadOnly of the UniqueList
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.Comparer">
            <summary>
            Get/Sets the Comparer of the UniqueList
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="capacity">The number of items the list initially can store</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="capacity"></param>
            <param name="quiet"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.#ctor(System.Func{`0,`0,System.Boolean},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="comparer"></param>
            <param name="quiet"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="comparer"></param>
            <param name="quiet"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.Contains(`0)">
            <summary>
            Returns a value indicating whether the specified <paramref name="item"/>
             is contained in the <see cref="T:ImageVault.Common.Lib.Collections.Generic.UniqueList`1"/>.
            </summary>
            <param name="item">The item to locate in the 
            <see cref="T:ImageVault.Common.Lib.Collections.Generic.UniqueList`1"/>.</param>
            <returns><b>true</b> if the <i>T</i> parameter is a member 
            of the <see cref="T:ImageVault.Common.Lib.Collections.Generic.UniqueList`1"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.IndexOf(`0)">
            <summary>
            Searches for the item and returns the zero-based index of the first occurance of the item
            </summary>
            <param name="item">The item to search for</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.Insert(System.Int32,`0)">
            <summary>
            Inserts an item in the list
            </summary>
            <param name="index">The zero-based index at which the item should be inserted</param>
            <param name="item">The item to insert</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index">The index of the item to remove</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.Add(`0)">
            <summary>
            Adds an item to the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items to the list
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.Clear">
            <summary>
            Clears the items from the list
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list to a typed array
            </summary>
            <param name="array">The array to copy to</param>
            <param name="arrayIndex">The zero-based index in array where the copy starts</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.Remove(`0)">
            <summary>
            Removes an item from the list
            </summary>
            <param name="item">The <typeparamref name="T"/> item to remove</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the UniqueList&lt;T&gt;
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueListBase`3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Lib.Collections.Generic.UniqueList`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Lib.Collections.Generic.UniqueList`1"/>.</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Collections.Generic.UniqueList`1">
            <summary>
            This is a list containing unique items.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="capacity">The number of items the list initially can store</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueList`1.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="capacity"></param>
            <param name="quiet"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueList`1.#ctor(System.Func{`0,`0,System.Boolean},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="comparer"></param>
            <param name="quiet"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="comparer"></param>
            <param name="quiet"></param>
            <param name="capacity"></param>
        </member>
        <member name="T:ImageVault.Common.Lib.Collections.Generic.UniqueModifiedList`1">
            <summary>
            Defines a unique list that can detect if it has been modified
            A <see cref="T:ImageVault.Common.Lib.Collections.Generic.UniqueList`1"/> that wraps a <see cref="T:ImageVault.Common.Lib.Collections.Generic.ModifiedList`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueModifiedList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="capacity">The number of items the list initially can store</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueModifiedList`1.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="capacity"></param>
            <param name="quiet"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueModifiedList`1.#ctor(System.Func{`0,`0,System.Boolean},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="comparer"></param>
            <param name="quiet"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Generic.UniqueModifiedList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <b>UniqueList&lt;T&gt;</b> class.
            </summary>
            <param name="comparer"></param>
            <param name="quiet"></param>
            <param name="capacity"></param>
        </member>
        <member name="P:ImageVault.Common.Lib.Collections.Generic.UniqueModifiedList`1.IsModified">
            <summary>
            Get/sets the modified status of the list
            </summary>
        </member>
        <member name="T:ImageVault.Common.Lib.Collections.NameValueCollectionExtensions">
            <summary>
            Summary description for NameValueCollectionExtensions.
            </summary>
            <remarks>
            2011-08-10 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.NameValueCollectionExtensions.GetBool(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            
            </summary>
            <param name="col"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Collections.ReferenceEqualsHashtable">
            <summary>
            This hashtable compares the keys depending on their reference values
            </summary>
            <remarks>
            2008-05-30 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.ReferenceEqualsHashtable.#ctor">
            <summary>
            Initializes a new instance of the <b>ReferenceEqualsHashtable</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.ReferenceEqualsHashtable.ReferenceEqualsEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">x and y are of different types and neither one can handle comparisons with the other.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.ReferenceEqualsHashtable.ReferenceEqualsEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>
            A hash code for the specified object.
            </returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.Collections.Specialized.NameVauleCollectionExtensions">
            <summary>
            Summary description for NameVauleCollectionExtensions.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Specialized.NameVauleCollectionExtensions.GetAsInt(System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="appSettings"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Specialized.NameVauleCollectionExtensions.GetAsBool(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            Gets an appsettings as a boolean value
            </summary>
            <param name="appSettings">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to use</param>
            <param name="key">The key of the appsettings value to get</param>
            <param name="defaultValue">If no value is defined, the default value will be returned</param>
            <returns>The value as a booelan. False is anything that isn't true. True is (true, yes, on, 1 (ignoring case)).</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Collections.Specialized.NameVauleCollectionExtensions.GetAsTimeSpan(System.Collections.Specialized.NameValueCollection,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Gets an appsettings value as a TimeSpan
            </summary>
            <remarks>If an integer is found, this is interpreted as the number of minutes.</remarks>
            <param name="appSettings">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to use</param>
            <param name="key">The key of the appsettings value to get</param>
            <param name="defaultValue">The default value to return if the value is unparseable or missing. If no default value, <see cref="F:System.TimeSpan.Zero"/> will be used</param>
            <returns>The parsed value</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.ComponentModel.EnumDefaultNullValueAttribute">
            <summary>
            Marks the default null value of the enum
            </summary>
            <remarks>
            2007-03-02 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Lib.ComponentModel.EnumDefaultNullValueAttribute.DefaultNullValue">
            <summary>
            Gets the DefaultNullValue of the EnumDefaultNullValueAttribute
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.ComponentModel.EnumDefaultNullValueAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>EnumDefaultNullValueAttribute</b> class.
            </summary>
            <param name="defaultNullValue">The name of the enum item that is the default null value.</param>
        </member>
        <member name="T:ImageVault.Common.Lib.ComponentModel.EnumDescriptor">
            <summary>
            The EnumDescriptor wraps an Enum item and provides metadata for the item.
            </summary>
            <remarks>
            2007-02-28 dan: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.Empty">
            <summary>
            Defines an empty descriptor
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.EnumDescriptors">
            <summary>
            This <see cref="T:System.Collections.Generic.Dictionary`2"/> contains a cache of all default values found
            in the enum declarations.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.DefaultValue">
            <summary>
            Get/Sets the DefaultValue of the <see cref="T:ImageVault.Common.Lib.ComponentModel.EnumDescriptor"/>
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.Description">
            <summary>
            Get/Sets the Description of the EnumDescriptor
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.DisplayName">
            <summary>
            Get/Sets the DisplayName of the EnumDescriptor
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.Browsable">
            <summary>
            Get/Sets the Browsable of the EnumDescriptor
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.Enum">
            <summary>
            Gets the Enum that the EnumDescriptor describes
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.#ctor(System.Enum)">
            <summary>
            Initializes a new instance of the <b>EnumDescriptor</b> class.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.GetAttribute``1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.GetAttributes``1">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.Parse(System.Enum)">
            <summary>
            Parses an enum and returns its descriptor
            </summary>
            <param name="item">The <see cref="P:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.Enum"/> to parse</param>
            <returns>The parsed <see cref="T:ImageVault.Common.Lib.ComponentModel.EnumDescriptor"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.Parse(System.Type)">
            <summary>
            Parses a type and returns all descriptors for the enum
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of enum to get descriptors for</param>
            <returns>The found <see cref="T:System.Collections.Generic.IList`1"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.Parse(System.Array)">
            <summary>
            Parses an array of enums and returns a list of enum descriptors
            </summary>
            <param name="enums">The <see cref="P:ImageVault.Common.Lib.ComponentModel.EnumDescriptor.Enum"/> array to parse</param>
            <returns>The found <see cref="T:System.Collections.Generic.IList`1"/>
            </returns>
        </member>
        <member name="T:ImageVault.Common.Lib.ComponentModel.EnumDisplayNameAttribute">
            <summary>
            This attribute allows enum items to declare a DisplayName 
            </summary>
            <remarks>
            2007-03-02 dan: Created
            </remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Lib.ComponentModel.EnumDisplayNameAttribute.#ctor">
            <summary>
            Initializes a new instance of the <b>EnumDisplayNameAttribute</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.ComponentModel.EnumDisplayNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>EnumDisplayNameAttribute</b> class.
            </summary>
            <param name="displayName"></param>
        </member>
        <member name="T:ImageVault.Common.Lib.ComponentModel.SimpleTypeNameConverter">
            <summary>
            Converts to/from a string/type using short type names (without assembly version and public key).
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.ComponentModel.SimpleTypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed. </param>
            <param name="value">The <see cref="T:System.Object" /> to convert. </param>
            <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType" /> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:ImageVault.Common.Lib.ComponentModel.SimpleTypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
            <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
            <param name="value">The <see cref="T:System.Object" /> to convert. </param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:ImageVault.Common.Lib.Configuration.ClientConfigurationWithAppSettingsExtensions">
            <summary>
            Summary description for ClientConfigurationWithAppSettingsExtensions.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.ClientConfigurationWithAppSettingsExtensions.GetAppSettingAsBool(ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase,System.String)">
            <summary>
            Gets an appsettings as a boolean value
            </summary>
            <param name="config">The <see cref="T:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase"/> to use</param>
            <param name="key">The key of the appsettings value to get</param>
            <returns>The value as a booelan. False is anything that isn't true. True is (true, yes, on, 1 (ignoring case)).</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineParametersBase">
            <summary>
            The CommandLineParametersBase is a baseclass for creating a application specific command line parameters class.
            </summary>
            <remarks>
            2009-06-23 dan: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineParametersBase.DisplayHelp">
            <summary>
            Get/Sets the DisplayHelp of the CommandLineParameters
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineParametersBase.AnswerYes">
            <summary>
            Get/Sets the AnswerYes of the CommandLineParameters
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineParametersBase.Errors">
            <summary>
            Gets the Errors of the BaseOperation
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineParametersBase.HelpMessage">
            <summary>
            Get/Sets the HelpMessage of the CommandLineParametersBase
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineParametersBase.#ctor">
            <summary>
            Initializes a new instance of the <b>CommandLineParameters</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineParametersBase.AskYesNo(System.String)">
            <summary>
            Displays a question and waits for the user to enter y or n
            </summary>
            <param name="question">The question to display</param>
            <returns>True if y was pressed, false if n was pressed</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineParametersBase.ShowHelp">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineParametersBase.Execute">
            <summary>
            Executes the commandLine
            </summary>
            <returns>The return code of the operation where 0 means success and anything else is an error. (should be returned to the console and will be 
            visible as the %ERRORLEVEL% environment variable.</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineSwitchAttribute">
            <summary>Implements a basic command-line switch by taking the
            switching name and the associated description.</summary>
            <remarks>Author: Ray Hayes, http://www.codeproject.com/KB/recipes/commandlineparser.aspx</remarks>
            <example></example>
            <remark>Only currently is implemented for properties, so all
            auto-switching variables should have a get/set method supplied.</remark>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineSwitchAttribute.Name">
            <summary>Accessor for retrieving the switch-name for an associated
            property.</summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineSwitchAttribute.Description">
            <summary>Accessor for retrieving the description for a switch of
            an associated property.</summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineSwitchAttribute.#ctor(System.String,System.String)">
            <summary>Attribute constructor.</summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="T:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineAliasAttribute">
            <summary>
            This class implements an alias attribute to work in conjunction
            with the <see cref="T:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineSwitchAttribute">CommandLineSwitchAttribute</see>
            attribute.  If the CommandLineSwitchAttribute exists, then this attribute
            defines an alias for it.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineAliasAttribute.Alias">
            <summary>
            Gets the Alias of the CommandLineAliasAttribute
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.CommandLineAliasAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>CommandLineAliasAttribute</b> class.
            </summary>
            <param name="alias"></param>
        </member>
        <member name="T:ImageVault.Common.Lib.Configuration.CommandLine.Parser">
            <summary>Implementation of a command-line parsing class.  Is capable of
            having switches registered with it directly or can examine a registered
            class for any properties with the appropriate attributes appended to
            them.</summary>
            <remarks>Author: Ray Hayes, http://www.codeproject.com/KB/recipes/commandlineparser.aspx</remarks>
        </member>
        <member name="T:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchInfo">
            <summary>A simple internal class for passing back to the caller
            some information about the switch.  The internals/implementation
            of this class has privillaged access to the contents of the
            SwitchRecord class.</summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchInfo.Name">
            <summary>
            Gets the Name of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchInfo.Description">
            <summary>
            Gets the Description of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchInfo.Aliases">
            <summary>
            Gets the Aliases of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchInfo.Type">
            <summary>
            Gets the Type of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchInfo.Value">
            <summary>
            Gets the Value of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchInfo.InternalValue">
            <summary>
            Gets the InternalValue of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchInfo.IsEnum">
            <summary>
            Gets the IsEnum of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchInfo.Enumerations">
            <summary>
            Gets the Enumerations of the SwitchInfo
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchInfo.#ctor(System.Object)">
            <summary>
            Constructor for the SwitchInfo class.  Note, in order to hide to the outside world
            information not necessary to know, the constructor takes a System.Object (aka
            object) as it's registering type.  If the type isn't of the correct type, an exception
            is thrown.
            </summary>
            <param name="rec">The SwitchRecord for which this class store information.</param>
            <exception cref="T:System.ArgumentException">Thrown if the rec parameter is not of
            the type SwitchRecord.</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord">
            <summary>
            The SwitchRecord is stored within the parser's collection of registered
            switches.  This class is private to the outside world.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.Value">
            <summary>
            Gets the Value of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.InternalValue">
            <summary>
            Gets the InternalValue of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.Name">
            <summary>
            Get/Sets the Name of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.Description">
            <summary>
            Get/Sets the Description of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.Type">
            <summary>
            Gets the Type of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.Aliases">
            <summary>
            Gets the Aliases of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.Pattern">
            <summary>
            Gets the Pattern of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.SetMethod">
            <summary>
            Sets the SetMethod of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.GetMethod">
            <summary>
            Sets the GetMethod of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.PropertyOwner">
            <summary>
            Sets the PropertyOwner of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.ReadValue">
            <summary>
            Gets the ReadValue of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.Enumerations">
            <summary>
            Gets the Enumerations of the SwitchRecord
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>SwitchRecord</b> class.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <b>SwitchRecord</b> class.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="type"></param>
            <exception cref="T:System.ArgumentException">If currently only Ints, Bool and Strings are supported.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.Initialize(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.BuildPattern">
            <summary>
            
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.AddAlias(System.String)">
            <summary>
            
            </summary>
            <param name="alias"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.SwitchRecord.Notify(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.ApplicationName">
            <summary>
            Gets the ApplicationName of the Parser
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.Parameters">
            <summary>
            Gets the Parameters of the Parser
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.Switches">
            <summary>
            Gets the Switches of the Parser
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> item identified by the given arguments of the Parser
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.ExtractApplicationName">
            <summary>
            Extracts the application name from the commandline
            </summary>
            <exception cref="T:System.ApplicationException">If unable to parse commandline to extract application name .</exception>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.CommandLine.Parser.UnhandledSwitches">
            <summary>This function returns a list of the unhandled switches
            that the parser has seen, but not processed.</summary>
            <value></value>
            <remark>The unhandled switches are not removed from the remainder
            of the command-line.</remark>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.AddSwitch(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="description"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.AddSwitch(System.String[],System.String)">
            <summary>
            
            </summary>
            <param name="names"></param>
            <param name="description"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.Parse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.InternalValue(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>Parser</b> class.
            </summary>
            <param name="commandLine"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <b>Parser</b> class.
            </summary>
            <param name="commandLine"></param>
            <param name="classForAutoAttributes"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.CommandLine.Parser.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Lib.Configuration.CommandLine.Parser"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Lib.Configuration.CommandLine.Parser"/>.</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase">
            <summary>
            Summary description for ConfigurationSectionWithAppSettingsBase.
            </summary>
            <remarks>
            2011-08-10 dan: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.ApplicationSettings">
            <summary>
            Get/Sets the ApplicationSettings of the CoreConfigurationSection
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.AppSettings">
            <summary>
            Gets the AppSettings of the CoreConfigurationSection
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.IsReadOnly">
            <summary>
            
            </summary>
            <returns>True if read is only, otherwise false.</returns>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.SectionName">
            <summary>
            Get/Sets the SectionName of the ConfigurationSectionWithAppSettingsBase
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>ConfigurationSectionWithAppSettingsBase</b> class.
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.GetAppSettingAsUri(System.String)">
            <summary>
            Gets the app settings value as an Uri
            </summary>
            <param name="key">The key of the appsettings to get</param>
            <returns>The found uri or null if no uri was entered.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">if unable to parse url .</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.GetXPathForAppSettingValue(System.String)">
            <summary>
            Gets the XPath expression for a specific app settings value
            </summary>
            <param name="key">The name(key) of the app setting</param>
            <returns>The xpath epression pointing to the value of the specific app setting</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.ReadFromConfiguration``1">
            <summary>
            Reads the configuration section from the current configuration or returns a newed up instance if it is missing
            </summary>
            <typeparam name="T">The type of configuration section to read</typeparam>
            <returns>The read or newed up instance.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.GetAppSettingAsBool(System.String)">
            <summary>
            Gets the app settings value as a boolean
            </summary>
            <param name="key">The key of the appsettings to get</param>
            <returns>The found boolean or null if no boolean was entered.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">if unable to parse value to boolean.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.ConfigurationSectionWithAppSettingsBase.ReplaceApplicationSettingValue(System.String,System.String)">
            <summary>
            Replaces the current AppSettings value with the given key/value pair.
            If an existing key is found, it is removed and replaced with the supplied one.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:ImageVault.Common.Lib.Configuration.NameValueConfigurationCollectionWrapper">
            <summary>
            Wraps a KeyValueConfigurationCollection for ease of access to the value
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Lib.Configuration.NameValueConfigurationCollectionWrapper.Item(System.String)">
            <summary>
            Get/Sets the <see cref="T:System.String"/> item identified by the given arguments of the NameValueConfigurationCollectionWrapper
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Configuration.NameValueConfigurationCollectionWrapper.#ctor(System.Configuration.KeyValueConfigurationCollection)">
            <summary>
            Initializes a new instance of the <b>NameValueConfigurationCollectionWrapper</b> class.
            </summary>
            <param name="collection"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="collection"/> is null.</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.Context`1">
            <summary>
            A generic context class for allowing nested contexts.
            </summary>
            <remarks>
            2008-05-14 Administrator: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Lib.Context`1.CurrentContext">
            <summary>
            Gets the CurrentContext of the Context
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Context`1.CurrentInstance">
            <summary>
            Gets the CurrentInstance of the Context
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentException">If no CurrentContext exist.</exception>
        </member>
        <member name="P:ImageVault.Common.Lib.Context`1.Instance">
            <summary>
            Gets the Instance of the Context
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Context`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <b>Context</b> class.
            </summary>
            <param name="instance">The instance to populate the context with</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Context`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Lib.Context`1.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <b>Context&lt;T&gt;</b>.
            </summary>
            <param name="disposing">Set to <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Context`1.CurrentInstanceOrDefault(`0)">
            <summary>
            Gets the current instance (if any exists) or the default one if no context exists.
            </summary>
            <param name="defaultInstance">The instance to return if no current context exists.</param>
            <returns>The <see cref="P:ImageVault.Common.Lib.Context`1.CurrentInstance"/> if a <see cref="P:ImageVault.Common.Lib.Context`1.CurrentContext"/> exists; otherwize the <paramref name="defaultInstance"/> is returned</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Context`1.Clear">
            <summary>
            Clears all present contexts 
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Context`1.Add(`0)">
            <summary>
            Adds a instance to the context
            </summary>
            <remarks>Equivalent to creating a new Context&lt;T&gt;(item)</remarks>
            <param name="item">The item to add</param>
            <returns>The created <see cref="T:ImageVault.Common.Lib.Context`1"/> </returns>
        </member>
        <member name="T:ImageVault.Common.Lib.IO.FileSystemFolder">
            <summary>
            Wrapper for the DirectoryInfo
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.FileSystemFolder.#ctor(System.IO.DirectoryInfo)">
            <summary>
            
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.FileSystemFolder.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.FileSystemFolder.Exists">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.FileSystemFolder.GetFiles(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.FileSystemFolder.GetSubFolder(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.IO.FileSystemFolderItem">
            <summary>
            Wrapper for the FileInfo
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.FileSystemFolderItem.Name">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.FileSystemFolderItem.#ctor(System.IO.FileInfo)">
            <summary>
            
            </summary>
            <param name="fileInfo"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.FileSystemFolderItem.ReadText">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.IO.IFolder">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.IFolder.Exists">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IFolder.GetFiles(System.String)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IFolder.GetSubFolder(System.String)">
            <summary>
            Gets a subfolder
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.IO.IFolderItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.IFolderItem.Name">
            <summary>
            The name of the item
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IFolderItem.ReadText">
            <summary>
            Reads the contents from the item as text
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.IO.PartialBufferedStream">
            <summary>
            Summary description for PartialBufferedStream.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.PartialBufferedStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.PartialBufferedStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.PartialBufferedStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.PartialBufferedStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.PartialBufferedStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialBufferedStream.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <b>PartialBufferedStream</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialBufferedStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialBufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialBufferedStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialBufferedStream.ReadFromBaseStream(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the underlying stream and updates the Position accordingly
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialBufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialBufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialBufferedStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialBufferedStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Lib.IO.ResourceFolder">
            <summary>
            Folder implementation that wraps an embedded resource
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.ResourceFolder.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a resource wrapper
            </summary>
            <param name="resourceAssembly"></param>
            <param name="path"></param>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.ResourceFolder.Exists">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.ResourceFolder.GetFiles(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.ResourceFolder.GetSubFolder(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.IO.ResourceFolderItem">
            <summary>
            Wrapper for a Resource item
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.ResourceFolderItem.Name">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.ResourceFolderItem.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Creates a resource folder item for the given embedded resource
            </summary>
            <param name="resourceAssembly"></param>
            <param name="path"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.ResourceFolderItem.ReadText">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.IO.IOUtil">
            <summary>
            Summary description for IOUtil.
            </summary>
            <remarks>
            2011-04-04 dan: Created
            </remarks>
        </member>
        <member name="F:ImageVault.Common.Lib.IO.IOUtil.AllowedFilenameChars">
            <summary>
            Contains the allowed characters in a filename
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies data from one stream to another
            </summary>
            <param name="inStream">The <see cref="T:System.IO.Stream"/> to read from</param>
            <param name="outStream">The <see cref="T:System.IO.Stream"/> to write to</param>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.ReadStream(System.IO.Stream)">
            <summary>
            Reads a stream and returns the data
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.GetNewUniqueFileInfo(System.String,System.Int32,System.String)">
            <summary>
            Returns a FileInfo to a file in the supplied directory that doesn't exists. The filename is randomized 
            and is <code>nrOfCharacters</code> long with the same extension that the supplied one.
            </summary>
            <param name="path">The path of the target folder</param>
            <param name="nrOfCharacters">length of the filename (excluding extension)</param>
            <param name="extension">extension of the file</param>
            <returns>A unique FileInfo</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.GetNewUniqueFileInfo(System.IO.DirectoryInfo,System.Int32,System.String)">
            <summary>
            Returns a FileInfo to a file in the supplied directory that doesn't exists. The filename is randomized 
            and is <code>nrOfCharacters</code> long with the same extension that the supplied one.
            </summary>
            <param name="dir">The target folder</param>
            <param name="nrOfCharacters">length of the filename (excluding extension)</param>
            <param name="extension">extension of the file, or null if extension should be omitted</param>
            <returns>A unique FileInfo</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.GetNewUniqueDirectoryInfo(System.IO.DirectoryInfo,System.Int32)">
            <summary>
            Creates a new DirectoryInfo in the supplied parent folder
            </summary>
            <param name="parent"></param>
            <param name="nrOfCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.RandomizeFileName(System.Int32)">
            <summary>
            Returns a randomized filename of the number of characters that is supplied.
            </summary>
            <param name="nrOfCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.GetRandomFileCharacter">
            <summary>
            Returns a random coosen filename character
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.EmptyDirectory(System.String,System.Boolean)">
            <summary>
            Empties the supplied directory of files and subdirectories (if recursive)
            </summary>
            <param name="dir">The directory to empty</param>
            <param name="recursive">If subdirs should be removed as well as the files..</param>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.EmptyDirectory(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Empties the supplied directory of files and subdirectories (if recursive)
            </summary>
            <param name="dir">The <see cref="T:System.IO.DirectoryInfo"/> to empty</param>
            <param name="recursive">If subdirs should be removed as well as the files..</param>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.EmptyDirectory(System.String,System.Boolean,System.Boolean)">
            <summary>
            Empties the supplied directory of files and subdirectories (if recursive)
            </summary>
            <param name="dir">The directory to empty</param>
            <param name="recursive">If subdirs should be removed as well as the files..</param>
            <param name="ignoreAttributes">If all items attribute should be set to <see cref="F:System.IO.FileAttributes.Normal"/> before deleting.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.EmptyDirectory(System.IO.DirectoryInfo,System.Boolean,System.Boolean)">
            <summary>
            Empties the supplied directory of files and subdirectories (if recursive)
            </summary>
            <param name="dir">The <see cref="T:System.IO.DirectoryInfo"/> to empty</param>
            <param name="recursive">If subdirs should be removed as well as the files..</param>
            <param name="ignoreAttributes">If all items attribute should be set to <see cref="F:System.IO.FileAttributes.Normal"/> before deleting.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.FindDirectoryByName(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Returns a DirectoryInfo to a file in the supplied directory that doesn't exists. The filename is randomized 
            and is <code>nrOfCharacters</code> long with the same extension that the supplied one.
            </summary>
            <param name="dir">The root folder to start searching in</param>
            <param name="directoryName">The directoryName to search for</param>
            <param name="recursive">If subdirs should be searched</param>
            <returns>A DirectoryInfo if there is at match, null otherwise</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.RemoveIllegalFileNameCharacters(System.String)">
            <summary>
            Parses the given string and removes all characters that is not allowed in filenames.
            Even the dot (.) is stripped.
            </summary>
            <param name="name">The name to parse</param>
            <returns>The parsed string</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.GetTextFileEncoding(System.String)">
            <summary>
            Calculates the encoding of the text file based on the byte order mark (bom) found in the beginning of the file.
            </summary>
            <param name="filePath">The path to the file to examine.</param>
            <returns>The found encoding</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.IOUtil.ValidateUtf8Bytes(System.Byte[])">
            <summary>
            Validates the buffer and checks if it is a valid utf-8 encoding or not.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
            <remarks>See http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8 for spec.
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Lib.IO.PartialStream">
            <summary>
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.PartialStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <value></value>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.PartialStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.PartialStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.PartialStream.Length">
            <summary>
            Gets the length of the stream.
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.IO.PartialStream.Position">
            <summary>
            Gets or sets the current position of the stream.
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <b>PartialStream</b> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to wrap</param>
            <param name="start">The start position of the partial stream</param>
            <param name="length">The length of the partial stream</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="start"/> is out of range
             or if <paramref name="length"/> is out of range.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the new position in the stream.
            </summary>
            <param name="offset">
            A byte offset relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.
            </param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.ApplicationException">If unable to handle SeekOrigin.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the partial stream
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. 
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <exception cref="T:System.IO.IOException">If unable to write to stream, would write past end of partial stream.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialStream.SetLength(System.Int64)">
            <summary>
            Attempts to set a new length, but since the length of the partial stream was locked when the stream was
            constructed, this method will throw a <see cref="T:System.NotSupportedException"/> exception.
            </summary>
            <param name="value">
            The new length of the stream. This parameter is ignored.
            </param>
            <exception cref="T:System.NotSupportedException">
            	<para>Thrown in all cases because the length is fixed.</para>
            </exception>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.PartialStream.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <b>PartialStream</b>.
            </summary>
            <param name="disposing">Set to <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="T:ImageVault.Common.Lib.IO.StreamExtensions">
            <summary>
            Summary description for StreamExtensions.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.StreamExtensions.WriteIntAsHex(System.IO.Stream,System.Int32)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="val"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.IO.StreamExtensions.WriteNewLine(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:ImageVault.Common.Lib.Data.SqlUtil">
            <summary>
            A Wrapper utity class for a SqlDataReader. Supports getting data from a column by specifying the columnname.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Data.SqlUtil._dataSet">
            <summary>
            DataSet is used to cache the response
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Data.SqlUtil._dataTable">
            <summary>
            DataTable contains the resulting query if cached.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Data.SqlUtil._dataTablePosition">
            <summary>
            The current dataTable in the dataSet
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Data.SqlUtil._position">
            <summary>
            _position keeps track of the current read _position if cached.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Data.SqlUtil.Count">
            <summary>
            Returns the number of rows in a cached SqlUtil.
            If the Util isn't cached -1 is returned
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.#ctor(System.Data.IDataReader)">
            <summary>
            Creates the SqlUtil wrapper around the supplied _reader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.#ctor(System.Data.IDbCommand)">
            <summary>
            Creates a cached SqlUtil, the connection is closed after creating the util and the data is contained 
            within the SqlUtil class.
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.#ctor(System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            Creates a cached SqlUtil, the connection is closed after creating the util and the data is contained 
            within the SqlUtil class.
            </summary>
            <param name="cmd"></param>
            <param name="cached"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.#ctor(System.Data.OleDb.OleDbCommand,System.Boolean)">
            <summary>
            Creates a cached SqlUtil, the connection is closed after creating the util and the data is contained 
            within the SqlUtil class.
            </summary>
            <param name="cmd"></param>
            <param name="cached"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            Creates the SqlUtil Wrapper around the supplied query and connection.
            </summary>
            <param name="query"></param>
            <param name="con"></param>
            <param name="cached"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.#ctor(System.String,System.Data.OleDb.OleDbConnection,System.Boolean)">
            <summary>
            Creates the SqlUtil wrapper around the supplied query and connection
            </summary>
            <param name="query"></param>
            <param name="con"></param>
            <param name="cached"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before 
            the <b>SqlUtil</b> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.ConnectReader(System.Data.IDbCommand)">
            <summary>
            Creates and opens a reader from the command
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.FillCachedDataTable(System.Data.IDataAdapter)">
            <summary>
            Fills the cached dataTable from the adapter.
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.Read">
            <summary>
            Reads next post from the _reader
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.Close">
            <summary>
            Closes the _reader
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.NextResult">
            <summary>
            Advances the datareader to the next result
            </summary>
            <returns>True if there was a next result, false otherwize.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.Reset">
            <summary>
            Resets a cached SqlUtil to point at the beginning of the result
            </summary>
            <remarks>Has no affect on not cached SqlUtils</remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetOrdinal(System.String)">
            <summary>
            Gets the index of the column with the specified name
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.IsDBNull(System.Int32)">
            <summary>
            Checks if ths value in the column is null
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.IsDBNull(System.String)">
            <summary>
            Checks if ths value in the column is null
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetString(System.Int32)">
            <summary>
            Gets a string value from the specified column. If the column is null an exception is thrown.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetString(System.Int32,System.String)">
            <summary>
            Gets a string value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetString(System.String)">
            <summary>
            Gets a string value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetByte(System.Int32)">
            <summary>
            Gets a byte value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetByte(System.Int32,System.Byte)">
            <summary>
            Gets a byte value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetByte(System.String)">
            <summary>
            Gets a byte value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetByte(System.String,System.Byte)">
            <summary>
            Gets a byte value from the specified column
            </summary>
            <param name="columnName"></param>
            <param name="valueIfNull">If the value is null, this value will be returned instead</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetTinyInt(System.Int32)">
            <summary>
            Gets a byte value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetTinyInt(System.Int32,System.Byte)">
            <summary>
            Gets a byte value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="valueIfNull">If the value is null, this value will be returned instead</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetTinyInt(System.String)">
            <summary>
            Gets a byte value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetTinyInt(System.String,System.Byte)">
            <summary>
            Gets a byte value from the specified column
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="valueIfNull">If the value is null, this value will be returned instead</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt16(System.Int32)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt16(System.Int32,System.Int16)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="valueIfNull">if the value is null, return this value instead</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt16(System.String)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt16(System.String,System.Int16)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="valueIfNull">if the value is null, return this value instead</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt(System.Int32)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt(System.Int32,System.Int32)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="valueIfNull">if the value is null, return this value instead</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt(System.String,System.Int32)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="columnName"></param>
            <param name="valueIfNull">if the value is null, return this value instead</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt(System.String)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetShort(System.Int32)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetShort(System.String,System.Int16)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="columnName"></param>
            <param name="valueIfNull">if the value is null, return this value instead</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetShort(System.Int32,System.Int16)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="valueIfNull">if the value is null, return this value instead</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetShort(System.String)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt32(System.Int32)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt32(System.Int32,System.Int32)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="valueIfNull">if the value is null, return this value instead</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt32(System.String)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt32(System.String,System.Int32)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="valueIfNull">if the value is null, return this value instead</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt64(System.Int32)">
            <summary>
            Gets an Int64 (long) value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetInt64(System.String)">
            <summary>
            Gets an Int64 (long) value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetLong(System.Int32,System.Int64)">
            <summary>
            Gets a Long value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetLong(System.Int32)">
            <summary>
            Gets a Long value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetLong(System.String,System.Int64)">
            <summary>
            Gets an integer value from the specified column
            </summary>
            <param name="columnName"></param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetLong(System.String)">
            <summary>
            Gets a Long value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetBit(System.Int32)">
            <summary>
            Gets a bit value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetBit(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetBit(System.String)">
            <summary>
            Gets a bit value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetBit(System.String,System.Boolean)">
            <summary>
            Gets a bit (bool) from the specified column
            </summary>
            <param name="columnName">Name of the column</param>
            <param name="valueIfNull">Value to return if column-value is null</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetDateTime(System.Int32)">
            <summary>
            Gets a DateTime value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetDateTime(System.Int32,System.DateTime)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetDateTime(System.String)">
            <summary>
            Gets a DateTime value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetDateTime(System.String,System.DateTime)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
            <param name="valueIfNull"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetDecimal(System.Int32)">
            <summary>
            Gets a decimal from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetDecimal(System.String)">
            <summary>
            Gets a decimal from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetNullableDateTime(System.Int32)">
            <summary>
            Gets a NullableDateTime value from the specified column
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetNullableDateTime(System.String)">
            <summary>
            Gets a NullableDateTime value from the specified column
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetDouble(System.Int32,System.Double)">
            <summary>
            Gets a double from the specified column.
            </summary>
            <param name="i">The column</param>
            <param name="valueIfNull">The value to return if the column contains null</param>
            <returns>The value from the specified column if it is not null, valueIfNull otherwise</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetDouble(System.Int32)">
            <summary>
            Gets a double from the specified column.
            </summary>
            <param name="i">The column</param>
            <returns>The value from the specified column. If the value is null, an exception is thrown</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetDouble(System.String)">
            <summary>
            Gets a double from the column with the specified name
            </summary>
            <param name="columnName">The name of the column</param>
            <returns>The value from the specified column</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetDouble(System.String,System.Double)">
            <summary>
            Gets a double from the column with the specified name
            </summary>
            <param name="columnName">The name of the column</param>
            <param name="valueIfNull">The value to return if the specified column contains null</param>
            <returns>The value from the specified column if it is not null, valueIfNull otherwise</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.SqlEncode(System.String)">
            <summary>
            Encodes a string and replaces all single quotes (') with two single quotes('')
            </summary>
            <param name="text">The string to encode</param>
            <returns>The encoded result.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.SqlQuote(System.String)">
            <summary>
            Quotes and encodes a literal string in sql
            </summary>
            <param name="text">The text to quote</param>
            <returns>The quoted <see cref="T:System.String"/></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.SqlEncodeDateTime(System.DateTime,System.Boolean)">
            <summary>
            Returns a Sql server suitable value representation for a datetime.
            Requires that the SqlServer supports the Convert function and supports date format 112 (ISO) and 121 (ODBC) (includeTime)
            </summary>
            <param name="date">The date value to convert</param>
            <param name="includeTime">If the time should be parsed, if false only the day part is converted.</param>
            <returns></returns>
        </member>
        <member name="F:ImageVault.Common.Lib.Data.SqlUtil.SqlscriptPreBegin">
            <summary>
            Defines the Constants for using in Installation scripts
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.RunBatchScript(System.Data.IDbConnection,System.Collections.Generic.IList{ImageVault.Common.Lib.Data.ScriptPart},System.Int32,ImageVault.Common.Lib.Data.IScriptLog)">
            <summary>
            Runs a batch script where the different sql statements is separated with the word GO on a single line
            </summary>
            <param name="con">the connection where the batch should be run</param>
            <param name="queries">The sql statements separated by the word GO on a line</param>
            <param name="commandTimeout"></param>
            <param name="log"></param>
            <returns>True if batch was run successfully.</returns>
            <exception cref="T:System.ApplicationException">If section: .</exception>
            <exception cref="T:System.Exception">If an error in the batch occurs, these are thrown</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.RunInstallationScript(System.Data.IDbConnection,System.IO.DirectoryInfo,ImageVault.Common.Lib.Data.IScriptLog)">
            <summary>
            Runs the installation scripts found in the supplied base folder.
            The method will search for a subfolder called procedures and one called tables and execute all scripts in these folders.
            Scripts can be devided into 3 parts Pre, main and post installation.
            The execution order is as follows.
            Pre procedure
            Pre table
            main table
            main procedure
            post procedure
            post table
            </summary>
            <param name="con"></param>
            <param name="baseFolder"></param>
            <param name="log"></param>
            <returns>True if installation was run successfully.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.RunInstallationScript(System.Data.IDbConnection,ImageVault.Common.Lib.IO.IFolder,ImageVault.Common.Lib.Data.IScriptLog)">
             <summary>
             Runs the installation scripts found in the supplied base folder.
             The method will search for a subfolder called procedures and one called tables and execute all scripts in these folders.
             Scripts can be devided into 3 parts Pre, main and post installation.
            
             The execution order is as follows.
             pre general
             pre procedure
             pre table
             main table
             main general
             main procedure
             post procedure
             post table
             post general
             
             </summary>
             <param name="con"></param>
             <param name="baseFolder"></param>
            <param name="log"></param>
            <returns>True if installation was run successfully.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.RunInstallationScript(System.Data.IDbConnection,System.IO.DirectoryInfo,System.Int32,ImageVault.Common.Lib.Data.IScriptLog)">
             <summary>
             Runs the installation scripts found in the supplied base folder.
             The method will search for a subfolder called procedures and one called tables and execute all scripts in these folders.
             Scripts can be devided into 3 parts Pre, main and post installation.
            
             The execution order is as follows.
             pre general
             pre procedure
             pre table
             main table
             main general
             main procedure
             post procedure
             post table
             post general
             
             </summary>
             <param name="con"></param>
             <param name="baseFolder"></param>
             <param name="commandTimeout"></param>
            <param name="log"></param>
            <returns>True if installation was run successfully.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.RunInstallationScript(System.Data.IDbConnection,ImageVault.Common.Lib.IO.IFolder,System.Int32,ImageVault.Common.Lib.Data.IScriptLog)">
             <summary>
             Runs the installation scripts found in the supplied base folder.
             The method will search for a subfolder called procedures and one called tables and execute all scripts in these folders.
             Scripts can be devided into 3 parts Pre, main and post installation.
            
             The execution order is as follows.
             pre general
             pre procedure
             pre table
             main table
             main general
             main procedure
             post procedure
             post table
             post general
             
             </summary>
             <param name="con"></param>
             <param name="baseFolder"></param>
             <param name="commandTimeout"></param>
            <param name="log"></param>
            <returns>True if installation was run successfully.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.SplitSqlScriptIntoParts(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Splits the supplied script into three parts, Pre, main and post script
            </summary>
            <param name="script"></param>
            <param name="preScript"></param>
            <param name="mainScript"></param>
            <param name="postScript"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetScalarIntValue(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            Returns the first value returned (first recordset, first field) as an Int32.
            </summary>
            <param name="sql">The sql query to execute</param>
            <param name="con">The <see cref="T:System.Data.SqlClient.SqlConnection"/> to execute the query on.</param>
            <returns>The first column of the first row in the result set, 
            converted to an <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetScalarIntValue(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the first value returned (first recordset, first field) as an Int32.
            </summary>
            <param name="cmd">The <see cref="T:System.Data.SqlClient.SqlCommand"/> to execute</param>
            <returns>The first column of the first row in the result set, 
            converted to an <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.GetScalarStringValue(System.Data.SqlClient.SqlCommand)">
            <summary>
            Returns the first value returned (first recordset, first field) as an string
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.ExecuteNonQuery(System.Data.SqlClient.SqlCommand)">
            <summary>
            Executes a command and returns the number of rows affected.
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.ExecuteQuery(System.String,System.String)">
            <summary>
            Returns a cached SqlUtil from based on the query 
            </summary>
            <param name="query"></param>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.Dispose">
            <summary>
            Releases the resources used by the <b>SqlUtil</b>.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.SqlUtil.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <b>SqlUtil</b>.
            </summary>
            <param name="disposing">If true we are called from the Dispose method, if false we are called from the destructor</param>
        </member>
        <member name="T:ImageVault.Common.Lib.Data.ScriptPart">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Data.ScriptPart.Segment">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Data.ScriptPart.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Data.ScriptPart.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Data.ScriptPart.Script">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.ScriptPart.#ctor(System.String,System.String,ImageVault.Common.Lib.Data.ScriptSegment,ImageVault.Common.Lib.Data.ScriptType)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="script"></param>
            <param name="segment"></param>
            <param name="type"></param>
        </member>
        <member name="T:ImageVault.Common.Lib.Data.ScriptSegment">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Data.ScriptSegment.Pre">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Data.ScriptSegment.Main">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Data.ScriptSegment.Post">
            <summary>
            
            </summary>
        </member>
        <member name="T:ImageVault.Common.Lib.Data.ScriptType">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Data.ScriptType.General">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Data.ScriptType.Table">
            <summary>
            
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Data.ScriptType.Procedure">
            <summary>
            
            </summary>
        </member>
        <member name="T:ImageVault.Common.Lib.Data.IScriptLog">
            <summary>
            Interface for logging script output
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.IScriptLog.Info(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.IScriptLog.Succeeded(ImageVault.Common.Lib.Data.ScriptPart)">
            <summary>
            
            </summary>
            <param name="scriptPart"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Data.IScriptLog.Failed(ImageVault.Common.Lib.Data.ScriptPart,System.Data.SqlClient.SqlException)">
            <summary>
            
            </summary>
            <param name="scriptPart"></param>
            <param name="sex"></param>
        </member>
        <member name="T:ImageVault.Common.Lib.Drawing.SizeUtil">
            <summary>
            Size calculating functions
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Drawing.SizeUtil.FitInsideBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Calculates the size that the oringinal image needs to be to fit inside the supplied bounds while retaining it's original aspect ratio.
            </summary>
            <param name="imageWidth">The width of the original image</param>
            <param name="imageHeight">The height of the original image</param>
            <param name="boundsWidth">The width of the outer bounds to fit inside</param>
            <param name="boundsHeight">The height of the outer bounds to fit inside</param>
            <param name="allowGrowth">True if we allow expanding the image to fit inside the bounds, false if we only allow shrink</param>
            <returns>The resulting size<see cref="T:System.Drawing.Size"/> </returns>
        </member>
        <member name="T:ImageVault.Common.Lib.EnumExtensions">
            <summary>
            Extension methods for enums
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumExtensions.GetName(System.Enum)">
            <summary>
            Gets the description for the supplied enum
            </summary>
            <remarks>If the enum value has a <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>, the <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/> property is used. Otherwize the <see cref="M:System.Enum.ToString"/> method is used.</remarks>
            <param name="val">The enum value to get the description for</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumExtensions.GetNames``1(``0)">
            <summary>
            Gets the names of the enum. If the enum is a <see cref="T:System.FlagsAttribute"/> enum, then each flag is parsed
            individually and if set, the Name of the flag is included in the list.
            Gets the name by using the <see cref="M:ImageVault.Common.Lib.EnumExtensions.GetName(System.Enum)"/> method to include names specified by the <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>.
            </summary>
            <param name="val">The enum to get the names for</param>
            <typeparam name="TEnum">The type of Enum to get values for</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.String"/> containing the names of the enum</returns>
            <exception cref="T:System.ArgumentException">If val is not an enum.</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.EnumUtil">
            <summary>
            A helper class for handling enums
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumUtil.ParseValidEnum(System.Type,System.String)">
            <summary>
            Parses the supplied enum value
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of enum to parse</param>
            <param name="value">The string value of the enum</param>
            <returns>The found enum value or null if no matchin enum was found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumUtil.ParseValidEnum(System.Type,System.String,System.Object)">
            <summary>
            Parses the supplied enum value
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of enum to parse</param>
            <param name="value">The string value of the enum</param>
            <param name="defaultValue">The value to return if parsing was not successful</param>
            <returns>The found enum value or null if no matchin enum was found.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumUtil.GetEnumInfo(System.Enum)">
            <summary>
            Gets the <see cref="T:System.Reflection.FieldInfo"/> for the supplied enum value
            </summary>
            <param name="value">The <see cref="T:System.Enum"/> to get the info for</param>
            <returns>The found <see cref="T:System.Reflection.FieldInfo"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumUtil.GetDisplayName(System.Enum)">
            <summary>
            Gets the DisplayName from the enum
            </summary>
            <param name="value">The <see cref="T:System.Enum"/> value to get the DisplayName from</param>
            <returns>The displayName of the enum value</returns>
            <exception cref="T:System.ArgumentException">If the enum misses the <see cref="T:System.ComponentModel.DisplayNameAttribute"/></exception>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumUtil.Parse(System.Type,System.String)">
            <summary>
            Parses the supplied string as the supplied enum type
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of enum to parse as</param>
            <param name="stringToParse">The string to parse</param>
            <returns>The parsed enum value</returns>
            <remarks>Also supports flag enums with | separating the different values</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stringToParse"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumUtil.AddValue(System.Object,System.Object)">
            <summary>
            Adds an enum value to the original value
            </summary>
            <param name="originalValue">The original enum value</param>
            <param name="valueToAdd">The value to add</param>
            <returns>The sum of the values</returns>
            <exception cref="T:System.NotSupportedException">If cannot Add values of type .</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumUtil.ToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the supplied enumValue.
            </summary>
            <param name="enumValue">The enum value to parse</param>
            <returns>A <see cref="T:System.String"/> that represents the supplied <paramref name="enumValue"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="enumValue"/> is null.</exception>
            <remarks>Flag values are separated by |</remarks>
        </member>
        <member name="T:ImageVault.Common.Lib.ExceptionExtensions">
            <summary>
            Summary description for ExceptionExtensions.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.ExceptionExtensions.ToSimpleExceptionString(System.Exception)">
            <summary>
            Generates a simpler message stating the message and type of the exception
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.ExceptionExtensions.ToFullExceptionString(System.Exception)">
            <summary>
            Creates a string of the exception that is a combination of all inner exceptions found,
            plus the stacktrace
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.ExceptionExtensions.FindException``1(System.Exception)">
            <summary>
            Finds an exception of the supplied type. Parses the InnnerException tree until a match is found.
            </summary>
            <param name="e">The <see cref="T:System.Exception"/> to look in</param>
            <typeparam name="T">The exception type to search for.</typeparam>
            <returns>The found exception or null if no matching exception was found</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.ExceptionExtensions.FindSqlError(System.Exception,System.Int32)">
            <summary>
            Finds a matching error in the supplied Exception 
            </summary>
            <param name="e"></param>
            <param name="errorNumber"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.ExceptionExtensions.FindSqlError(System.Data.SqlClient.SqlException,System.Int32)">
            <summary>
            Finds a matching error in the supplied SqlException 
            </summary>
            <param name="e">The <see cref="T:System.Data.SqlClient.SqlException"/> to search in</param>
            <param name="errorNumber">The error number to look for</param>
            <returns>The found <see cref="T:System.Data.SqlClient.SqlError"/> or null.</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.IReferenceObjectComparer">
            <summary>
            Defines an comparer that takes two instances and determines if they are based on the same object.
            </summary>
            <remarks>
            This is useful for classes that wraps other classes and we want to compare the original instance with the
            wrapped instance.
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.IReferenceObjectComparer.AreSameReferenceObject(System.Object,System.Object)">
            <summary>
            Compares two objects and compares if they are based on the same reference object.
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>True if they originates from the same instance, false otherwize.</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.LambdaComparer`1">
            <summary>
            Summary description for LambdaComparer.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of the <b>LambdaComparer</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A 32-bit signed integer that indicates the relative order 
            of the objects being compared. The return value has these meanings: 
            <table>
            		<tr><th>Value</th><th>Meaning</th></tr>
            		<tr><td>Less than zero</td><td>x less than y.</td></tr>
            		<tr><td>Zero</td><td>x is equal to y.</td></tr>
            		<tr><td>Greater than zero</td><td>x is greater than y.</td></tr>
            	</table>
            </returns>
        </member>
        <member name="T:ImageVault.Common.Lib.LambdaEqualityComparer`1">
            <summary>
            An IEqualityComparer that uses a lambda expression for comparing two instances.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaEqualityComparer`1.#ctor(System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <b>LambdaEqualityComparer&lt;T&gt;</b> class.
            </summary>
            <param name="hashMethod">If this function returns the same integer for two instances, then those instances are considered equal.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <b>LambdaEqualityComparer&lt;T&gt;</b> class.
            </summary>
            <param name="comparer"></param>
            <param name="hashMethod"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.LambdaEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>
            A hash code for the specified object.
            </returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.EnumerableExtensions">
            <summary>
            Extension methods for ease of access
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Lib.EnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Returns distinct elements from a sequence by using a specified hashmethod to compare values.
            </summary>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="hashMethod">If this function returns the same integer for two instances, then those instances are considered equal and the last one is removed.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>  that contains distinct elements from the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is null
             or if <paramref name="hashMethod"/> is null.</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.EventLogManager">
            <summary>
            An log manager that triggers event when a logging occurs
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.EventLogManager.GetLogger(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.EventLogManager.LogLevel">
            <summary>
            Gets the log level that we should filter on
            </summary>
        </member>
        <member name="E:ImageVault.Common.Lib.Logging.EventLogManager.Log">
            <summary>
            The event that triggers logging
            </summary>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.LogEventArgs">
            <summary>
            The arguments for a log entry
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogEventArgs.DateTime">
            <summary>
            Time of the log event
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogEventArgs.Name">
            <summary>
            Name of the logger
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogEventArgs.ThreadId">
            <summary>
            The thread id that the log event occurred on
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogEventArgs.Level">
            <summary>
            Level of the log event
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogEventArgs.Message">
            <summary>
            The message of the log event
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogEventArgs.Exception">
            <summary>
            Any exception of the log event
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.LogEventArgs.#ctor(System.String,ImageVault.Common.Lib.Logging.Level,System.Int32,System.Object,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="level"></param>
            <param name="threadId"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.FileLogManager">
            <summary>
            Creates a log manager that logs to disk
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.FileLogManager.GetLogger(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.FileLogManager.FileLogger">
            <summary>
            Defines a basic <see cref="T:ImageVault.Common.Lib.Logging.ILogger"/> that logs to disc
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.FileLogManager.FileLogger.#ctor(System.String,System.String,ImageVault.Common.Lib.Logging.Level)">
            <summary>
            Creates a logger that logs to a file
            </summary>
            <param name="name"></param>
            <param name="logPath"></param>
            <param name="logLevel"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.FileLogManager.FileLogger.IsEnabled(ImageVault.Common.Lib.Logging.Level)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.FileLogManager.FileLogger.Log(ImageVault.Common.Lib.Logging.Level,System.Object,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.ILog">
            <summary>
            An interface for a Log writing class
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.ILog.IsVerboseEnabled">
            <summary>
            Gets the IsVerboseEnabled of the Log4NetLog
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.ILog.IsDebugEnabled">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.ILog.IsWarnEnabled">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.ILog.IsErrorEnabled">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.ILog.IsInfoEnabled">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.ILog.IsCriticalEnabled">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Verbose(System.Func{System.Object},System.Exception)">
            <summary>
            Logs a message object with the Verbose level. 
            Only invokes the message func if Verbose is enabled
            </summary>
            <param name="messageFunc">The function that returns the message object to log.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to log</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Debug(System.Func{System.Object},System.Exception)">
            <summary>
            Logs a message object with the Debug level. 
            Only invokes the message func if debug is enabled
            </summary>
            <param name="messageFunc">The function that returns the message object to log.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to log</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Info(System.Func{System.Object},System.Exception)">
            <summary>
            Logs a message object with the Info level. 
            Only invokes the message func if Info is enabled
            </summary>
            <param name="messageFunc">The function that returns the message object to log.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to log</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Warn(System.Func{System.Object},System.Exception)">
            <summary>
            Logs a message object with the Warn level. 
            Only invokes the message func if Warn is enabled
            </summary>
            <param name="messageFunc">The function that returns the message object to log.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to log</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Error(System.Func{System.Object},System.Exception)">
            <summary>
            Logs a message object with the Error level. 
            Only invokes the message func if Error is enabled
            </summary>
            <param name="messageFunc">The function that returns the message object to log.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to log</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Critical(System.Func{System.Object},System.Exception)">
            <summary>
            Logs a message object with the Critical level. 
            Only invokes the message func if Critical is enabled
            </summary>
            <param name="messageFunc">The function that returns the message object to log.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to log</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Logs a message object with the Debug level. 
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to log</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Logs a message object with the Warn level. 
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Logs a message object with the Error level. 
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to log</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Critical(System.Object,System.Exception)">
            <summary>
            Logs a message object with the Critical level. 
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The <see cref="T:System.Exception"/> to log</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Verbose(System.Object,System.Exception)">
            <summary>
            Logs a message object with the Verbose level. 
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Logs a message with the Info level
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Debug(System.Object)">
            <summary>
            Logs a message object with the Debug level. 
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Warn(System.Object)">
            <summary>
            Logs a message object with the Warn level. 
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Error(System.Object)">
            <summary>
            Logs a message object with the Error level. 
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Info(System.Object)">
            <summary>
            Logs a message object with the Info level. 
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Verbose(System.Object)">
            <summary>
            Logs a message object with the Verbose level. 
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILog.Critical(System.Object)">
            <summary>
            Logs a message object with the Critical level. 
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.ILogger">
            <summary>
            Defines the interface for a log method implementation.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILogger.IsEnabled(ImageVault.Common.Lib.Logging.Level)">
            <summary>
            Checks if the supplied <see cref="T:ImageVault.Common.Lib.Logging.Level"/> is enabled or not
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILogger.Log(ImageVault.Common.Lib.Logging.Level,System.Object,System.Exception)">
            <summary>
            Logs a message and or an exception
            </summary>
            <param name="level">The <see cref="T:ImageVault.Common.Lib.Logging.Level"/> of the message</param>
            <param name="message">The message to log</param>
            <param name="exception">An optional <see cref="T:System.Exception"/> to log</param>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.ILogManager">
            <summary>
            Summary description for ILogManager.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.ILogManager.GetLogger(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.Level">
            <summary>
            Defines the different logging levels
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Logging.Level.Verbose">
            <summary>
            Verbose logging is the most talkative level. Shows all logging messages.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Logging.Level.Debug">
            <summary>
            Less verbose than <see cref="F:ImageVault.Common.Lib.Logging.Level.Verbose"/>. Contains debugging messages
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Logging.Level.Info">
            <summary>
            Informational information, less verbose than <see cref="F:ImageVault.Common.Lib.Logging.Level.Debug"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Logging.Level.Warn">
            <summary>
            A warning defines a logging message that is less verbose than <see cref="F:ImageVault.Common.Lib.Logging.Level.Info"/>.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Logging.Level.Error">
            <summary>
            This level defines a logged error. Less verbose than <see cref="F:ImageVault.Common.Lib.Logging.Level.Warn"/>.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Logging.Level.Critical">
            <summary>
            Critical logging errors. Less verbose than <see cref="F:ImageVault.Common.Lib.Logging.Level.Error"/>.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Logging.Level.All">
            <summary>
            Logs all data
            </summary>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.Log">
            <summary>
            Defines a abstract implementation of the ILog interface
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.Log.IsVerboseEnabled">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.Log.IsDebugEnabled">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.Log.IsInfoEnabled">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.Log.IsWarnEnabled">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.Log.IsErrorEnabled">
            <inheritdoc/>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.Log.IsCriticalEnabled">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.IsEnabled(ImageVault.Common.Lib.Logging.Level)">
            <summary>
            Checks if the supplied logging level is enabled
            </summary>
            <param name="level">The level to check</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.#ctor(System.Type)">
            <summary>
            Creates a <see cref="T:ImageVault.Common.Lib.Logging.Log"/> instance for the specified type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:ImageVault.Common.Lib.Logging.Log"/> instance for the specified name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Verbose(System.Func{System.Object},System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Debug(System.Func{System.Object},System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Info(System.Func{System.Object},System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Warn(System.Func{System.Object},System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Error(System.Func{System.Object},System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Critical(System.Func{System.Object},System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Verbose(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Debug(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Info(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Warn(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Error(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Critical(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Verbose(System.Object,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Debug(System.Object,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Info(System.Object,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Warn(System.Object,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Error(System.Object,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.Log.Critical(System.Object,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.LogManager">
            <summary>
            The LogManager is used to get/set the system log manager.
            </summary>
            <example>
            Setup log manager implementation by configuration <see cref="T:ImageVault.Common.Lib.Logging.LogManagerConfigurationSection"/> or in code 
            <code>
            LogManager.SystemLogManager = new Log4NetLogManager();
            </code>
            </example>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogManager.SystemLogManagers">
            <summary>
            Get/Sets the SystemLogManager of the LogManager
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogManager.ConfigRevision">
            <summary>
            Gets the Config revision that signals if the configuration has changed
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.LogManager.GetLogger(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.LogManager.SetLogManagers(ImageVault.Common.Lib.Logging.ILogManager[])">
            <summary>
            Sets the current log managers
            </summary>
            <param name="logManagers"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.LogManager.ResetLogManagers">
            <summary>
            Resets the log managers to it's original configuration
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.LogManager.AddConfiguredLogManagers">
            <summary>
            Adds the configured log managers system log manager list
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.LogManager.TryToGetLogManagerFromConfiguration">
            <summary>
            Reads the configuration for the LogManager and returns the log manager there
            </summary>
            <returns></returns>
            <exception cref="T:System.ApplicationException">If a LogManager is configured but isn't found</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.LogManagerConfigurationSection">
            <summary>
            Configures the LogManager class
            </summary>
            <remarks>If not configured, will use the first implementation of the <see cref="T:ImageVault.Common.Lib.Logging.ILogManager"/> as LogManager</remarks>
            <example>
            The example below configures the LogManager
            <code language="xml"><![CDATA[
             <configSections>
               <section name="meriworks.logging" type ="ImageVault.Common.Lib.Logging.LogManagerConfigurationSection,ImageVault.Common"/>
             </configSections>
             <meriworks.logging logManager="MyLogManager.LogManager,MyLogManager">
               <appSettings>
                 <add key="ThresholdLevel" value="Debug"/>
               </appSettings>
             </meriworks.logging>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:ImageVault.Common.Lib.Logging.LogManagerConfigurationSection.SectionName">
            <summary>
            Defines the sectionName for the <see cref="T:ImageVault.Common.Lib.Logging.LogManagerConfigurationSection"/>
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogManagerConfigurationSection.Instance">
            <summary>
            Returns the singleton instance of the <see cref="T:ImageVault.Common.Lib.Logging.LogManagerConfigurationSection"/> class.
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogManagerConfigurationSection.LogManagerType">
            <summary>
            Get/Sets the LogManagerType of the ClientConfigurationSection
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogManagerConfigurationSection.Verbose">
            <summary>
            Gets the Verbose of the LogManagerConfigurationSection
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Logging.LogManagerConfigurationSection.ThresholdLevel">
            <summary>
            Returns the log level to filter by
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.LogManagerConfigurationSection.#ctor">
            <summary>
            Initializes a new instance of the <b>LogManagerConfigurationSection</b> class.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.TraceLogManager">
            <summary>
            A log manager using Trace for log output
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.TraceLogManager.GetLogger(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.Logging.TraceLogManager.TraceLogger">
            <summary>
            Defines a logger that uses Trace
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.TraceLogManager.TraceLogger.#ctor(System.String)">
            <summary>
            Creates a TraceLogger with the supplied name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.TraceLogManager.TraceLogger.IsEnabled(ImageVault.Common.Lib.Logging.Level)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Lib.Logging.TraceLogManager.TraceLogger.Log(ImageVault.Common.Lib.Logging.Level,System.Object,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.MacAddressUtil">
            <summary>
            Summary description for MacAddressUtil.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.MacAddressUtil.GetMacAddress">
            <summary>
            Gets the first macadress on the computer
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.MacAddressUtil.ValidateMacAddress(System.String)">
            <summary>
            Checks if the supplied mac address exists on the machine.
            </summary>
            <param name="macAddress"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.RandomUtil">
            <summary>
            Summary description for RandomUtil.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:ImageVault.Common.Lib.RandomUtil.DefaultStringLength">
            <summary>
            Gets the DefaultStringLength of the <see cref="T:ImageVault.Common.Lib.RandomUtil"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.RandomUtil.DefaultStringLengthVariation">
            <summary>
            Gets the DefaultStringLengthVariation of the <see cref="T:ImageVault.Common.Lib.RandomUtil"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.RandomUtil.DefaultArrayLength">
            <summary>
            Gets the DefaultArrayLength of the <see cref="T:ImageVault.Common.Lib.RandomUtil"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.RandomUtil.DefaultPercentageNullableNullOccurrance">
            <summary>
            Gets the DefaultPercentageNullableNullOccurrance of the <see cref="T:ImageVault.Common.Lib.RandomUtil"/>
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomBoolean">
            <summary>
            Gets a random boolean value
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomNullableBoolean">
            <summary>
            Gets a random nullable boolean
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomString">
            <summary>
            Gets a randomized string of default length
            </summary>
            <returns>The randomized length</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomString(System.Int32)">
            <summary>
            Gets a randomized string of the approximate length
            </summary>
            <param name="length">The approximate length of the string</param>
            <returns>The randomized string</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomString(System.Int32,System.Int32)">
            <summary>
            Gets a randomized string of the approximate length
            </summary>
            <param name="length">The approximate length of the string</param>
            <param name="delta">The variation delta.</param>
            <returns>The randomized length</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomLetterAndDigitString(System.Int32)">
            <summary>
            Generates a string of randomized letters and digits of the supplied length
            </summary>
            <param name="length">The length of the randomized string</param>
            <returns>The randomized <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomLetterAndDigitString(System.String[])">
            <summary>
            Generates a string of randomized letters and digits
            </summary>
            <param name="notValidValues">The <see cref="T:System.String"/> array that contains the values that the randomized string shouldn't have.</param>
            <returns>The randomized <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomLetterAndDigitString(System.Int32,System.String[])">
            <summary>
            Generates a string of randomized letters and digits of the supplied length
            </summary>
            <param name="length">The length of the randomized string</param>
            <param name="notValidValues">The <see cref="T:System.String"/> array that contains the values that the randomized string shouldn't have.</param>
            <returns>The randomized <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomLetterString(System.Int32,System.Int32)">
            <summary>
            Gets a randomized letter string
            </summary>
            <param name="length">The approximate length of the string</param>
            <param name="delta">The variation delta.</param>
            <returns>The randomized <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomLetterAndDigit">
            <summary>
            Gets a randomized letter or digit sign.
            </summary>
            <returns>The randomized letter or digit sign.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.IsValidValue(System.String,System.String[])">
            <summary>
            Checks if the supplied value is a valid one
            </summary>
            <param name="value">The value to check</param>
            <param name="notValidValues">The list of non valid values</param>
            <returns>True if valid is value, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomString(System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            Returns a randomized string of the number of characters that is supplied.
            </summary>
            <param name="length">The approximate length of the string</param>
            <param name="delta">The variation delta.</param>
            <param name="validCharacters">A string containing the possible characters in the string</param>
            <param name="notValidValues">The <see cref="T:System.String"/> array that contains the values that the randomized string shouldn't have.</param>
            <returns>The randomized <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomString(System.Int32,System.String)">
            <summary>
            Returns a randomized string of the number of characters that is supplied.
            </summary>
            <param name="length">The approximate length of the string</param>
            <param name="validCharacters">A string containing the possible characters in the string</param>
            <returns>The randomized <see cref="T:System.String"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomInt32">
            <summary>
            Returns a random <see cref="T:System.Int32"/>
            </summary>
            <returns>The random <see cref="T:System.Int32"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomInt32(System.Int32)">
            <summary>
            Returns a non negative random number in the given interval 
            </summary>
            <param name="maxValue">The exclusive upper bound of the random numer returned. 
            maxValue must be greater than or equal to 0.</param>
            <returns>The random <see cref="T:System.Int32"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomInt32(System.Int32,System.Int32)">
            <summary>
            Returns a random number in the given interval 
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned</param>
            <param name="maxValue">The exclusive upper bound of the random numer returned. 
            maxValue must be greater than or equal to minvalue.</param>
            <returns>The random <see cref="T:System.Int32"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomInt32(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns a random number in the given interval 
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned</param>
            <param name="maxValue">The exclusive upper bound of the random numer returned. 
            maxValue must be greater than or equal to minvalue.</param>
            <param name="notValidValues">A <see cref="T:System.Int32"/> array of non valid values</param>
            <returns>The random <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomInt32Except(System.Int32[])">
            <summary>
            Returns a random integer that is not one of the supplied ones
            </summary>
            <param name="notValidValues">A <see cref="T:System.Int32"/> array of non valid values</param>
            <returns>The random <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomSByte">
            <summary>
            Returns a random <see cref="T:System.SByte"/>
            </summary>
            <returns>The random <see cref="T:System.SByte"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomSByte(System.SByte)">
            <summary>
            Returns a non negative random number in the given interval 
            </summary>
            <param name="maxValue">The exclusive upper bound of the random numer returned. 
            maxValue must be greater than or equal to 0.</param>
            <returns>The random <see cref="T:System.SByte"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomSByte(System.SByte,System.SByte)">
            <summary>
            Returns a random number in the given interval 
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned</param>
            <param name="maxValue">The exclusive upper bound of the random numer returned. 
            maxValue must be greater than or equal to minvalue.</param>
            <returns>The random <see cref="T:System.SByte"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomEnum(System.Type)">
            <summary>
            Gets a randomized enum value
            </summary>
            <param name="type">The type of enum to randomize a value from</param>
            <returns>The randomized <see cref="T:System.Enum"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomDecimal">
            <summary>
            Gets a randomized decimal
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomDouble">
            <summary>
            Gets a randomized double
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomDouble(System.Double)">
            <summary>
            Gets a random double value from zero to the supplied maxvalue
            </summary>
            <param name="maxValue">The limit of the returned value</param>
            <returns>The randomized <see cref="T:System.Double"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.IsTrue(System.Int32)">
            <summary>
            Returns true if a randomized number from 1 to 100 is less or equal to the given value.
            </summary>
            <param name="percent">The percentage that this method will return true</param>
            <returns>True if it is true, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomChar">
            <summary>
            Returns a random character
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomByte">
            <summary>
            Returns a random byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomSingle">
            <summary>
            Returns a random single
            </summary>
            <returns>The random <see cref="T:System.Single"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomSingle(System.Single)">
            <summary>
            Returns a random single
            </summary>
            <param name="maxValue">The maximum <see cref="T:System.Single"/> to return</param>
            <returns>The random <see cref="T:System.Single"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomSingle(System.Single,System.Single)">
            <summary>
            Returns a random value between minValue and maxValue
            </summary>
            <param name="minValue">The minimum <see cref="T:System.Single"/> value to return</param>
            <param name="maxValue">The maximum <see cref="T:System.Single"/> value to return</param>
            <returns>The randomized <see cref="T:System.Single"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomInt64">
            <summary>
            returns a random Int64
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomInt64(System.Int64,System.Int64)">
            <summary>
            Returns a random value between minValue and maxValue
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomInt64(System.Int64)">
            <summary>
            Returns a random value between 0 and maxValue
            </summary>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomInt16">
            <summary>
            Returns a random Int16
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomTimeSpan">
            <summary>
            Gets a randomized TimeSpan
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomDateTime">
            <summary>
            Returns a randomized DateTime
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomColor">
            <summary>
            Gets a random color
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.InstanceArrayItems(System.Array,System.Type,System.Int32[])">
            <summary>
            Fills the array with random instances
            </summary>
            <param name="array">The <see cref="T:System.Array"/> to fill</param>
            <param name="type">The <see cref="T:System.Type"/> of object to instance in the array</param>
            <param name="indices">The current indicies that points to the iteration location</param>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomObject(System.Type)">
            <summary>
            Gets a random object instance of the specified type
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of object to instance</param>
            <returns>The instanced object</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomItem``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Gets a random item from the list
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/> to get the item from</param>
            <param name="startIndex">The start position where we should start our selection</param>
            <param name="length">The number of items to include in the selection</param>
            <typeparam name="T">The type of item contained in the list</typeparam>
            <returns>The selected <typeparamref name="T"/> or default(T) if the list is null or empty</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="length"/> is out of range (<em>Has to be a non negative value</em>).</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomItem``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets a random item from the list
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/> to get the item from</param>
            <returns>The selected <typeparamref name="T"/> or default(T) if the list is null or empty</returns>
            <typeparam name="T">The type of item to get.</typeparam>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomItem(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Gets a random item from the list
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/> to get the item from</param>
            <param name="startIndex">The start position where we should start our selection</param>
            <param name="length">The number of items to include in the selection</param>
            <returns>The selected item or null if the list is null or empty</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="length"/> is out of range (<em>Has to be a non negative value</em>).</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomItem(System.Collections.IList)">
            <summary>
            Gets a random item from the supplied list
            </summary>
            <param name="list">The <see cref="T:System.Collections.IList"/> to get the item from.</param>
            <returns>The selected item or null if the list is null or empty</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomItem(System.String)">
            <summary>
            Gets a random character from a string
            </summary>
            <param name="s">The string to randomize an item from</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If cannot get a random char in a null or empty string.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomItems``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="no"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="items"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If cannot get .</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.Random``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="count"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.Random``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Selects a random item from the list and calls the supplied function
            </summary>
            <param name="list"></param>
            <param name="func"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If cannot select a random item on an empty list.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.Random``1(System.Collections.Generic.IList{``0})">
            <summary>
            
            </summary>
            <param name="list"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If cannot select a random item on an empty list.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.Random``2(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0,``1})">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="count"></param>
            <param name="func"></param>
            <typeparam name="TItem"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If cannot select a random item on an empty list.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomDateTime(System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="minDate"></param>
            <param name="maxDate"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.RandomUtil.GetRandomString(System.Nullable{System.Int32})">
            <summary>
            Gets a random string with an exact length
            </summary>
            <param name="exactLength">The length of the string, null will return null, 0 will return <see cref="F:System.String.Empty"/>.</param>
            <returns>The random string</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.ReferenceObjectComparer">
            <summary>
            A object comparer that compares two objects and sees if they are based on the same reference.
            </summary>
            <remarks>
            This is useful for classes that wraps other classes and we want to compare the original instance with the
            wrapped instance.
            2010-09-28 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.ReferenceObjectComparer.AreSameReferenceObject(System.Object,System.Object)">
            <summary>
            Compares two objects and compares if they are based on the same reference object.
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>True if they originates from the same instance, false otherwize.</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Reflection.MemberInfoExtensions">
            <summary>
            Summary description for MemberInfoExtensions.
            </summary>
            <remarks>
            2011-09-16 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.MemberInfoExtensions.GetFullName(System.Reflection.MemberInfo)">
            <summary>
            Gets the full name on the current member info
            </summary>
            <param name="info">The <see cref="T:System.Reflection.MemberInfo"/> to get the full name for</param>
            <returns>The full name including declaring type</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Reflection.MemberReflectionException">
            <summary>
            Summary description for MemberReflectionException.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Reflection.MemberReflectionException.Member">
            <summary>
            Get/Sets the Member of the <see cref="T:ImageVault.Common.Lib.Reflection.MemberReflectionException"/>
            The member defines the 
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.MemberReflectionException.#ctor(System.Reflection.MemberInfo,System.String)">
            <summary>
            Creates an instance of the MemberReflectionException class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.MemberReflectionException.#ctor(System.Reflection.MemberInfo,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <b>MemberReflectionException</b> class.
            </summary>
            <param name="member">The <see cref="T:System.Reflection.MemberInfo"/> that the exception refers to.</param>
            <param name="message">The message of the exception</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> </param>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.MemberReflectionException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Lib.Reflection.MemberReflectionException"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Lib.Reflection.MemberReflectionException"/>.</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Reflection.ReflectionUtil">
            <summary>
            Summary description for ReflectionUtil2.
            </summary>
            <remarks>
            2011-02-16 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.FindAllConcreteImplementations(System.Reflection.Assembly,System.Type)">
            <summary>
            Iterates all types in the assembly and returns a dictionary containing of all interfaces and concrete implementations inheriting from the baseInterface
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to search in</param>
            <param name="baseInterface">The <see cref="T:System.Type"/> of the interface</param>
            <remarks>Will only find interfaces that implements the <paramref name="baseInterface"/> and their concrete implementations</remarks>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetShortTypeAndAssemblyName(System.Type)">
            <summary>
            Gets the short type and assemblyname of the specified type
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.InvokeMethod(System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Invokes the method of the type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the method</param>
            <param name="name">The name of the method to invoke</param>
            <param name="instance">The instance to invoke the method on</param>
            <param name="parameters">The parameters to pass to the method</param>
            <returns>The returnvalue from the method call</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetProperty(System.Type,System.String,System.Object)">
            <summary>
            Gets the property from the instance
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the property</param>
            <param name="name">The name of the property</param>
            <param name="instance">The instance to get the value from</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.SetProperty(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Sets the property in the instance
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the property</param>
            <param name="name">The name of the property</param>
            <param name="instance">The instance to set the value to</param>
            <param name="value">The value to set</param>
            <returns>null</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetField(System.Type,System.String,System.Object)">
            <summary>
            Gets the field from the instance
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the field</param>
            <param name="name">The name of the field</param>
            <param name="instance">The instance to get the value from</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.SetField(System.Type,System.String,System.Object,System.Object)">
            <summary>
            Sets the field in the instance
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the field</param>
            <param name="name">The name of the field</param>
            <param name="instance">The instance to set the value to</param>
            <param name="value">The value to set</param>
            <returns>null</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invokes the static method of the type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the method</param>
            <param name="name">The name of the method to invoke</param>
            <param name="parameters">The parameters to pass to the method</param>
            <returns>The returnvalue from the method call</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.InvokeMember(System.Type,System.String,System.Object,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            Invokes the member
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the member</param>
            <param name="name">The name of the member</param>
            <param name="instance">The instance to invoke on</param>
            <param name="flags">The <see cref="T:System.Reflection.BindingFlags"/> to use</param>
            <param name="parameters">The <see cref="T:System.Object"/> array to pass as parameters</param>
            <returns>The returnvalue</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the attribute from the supplied memberinfo that is of the supplied attribute type.
            </summary>
            <remarks>This will only search the supplied memberInfo, not inherited ones.</remarks>
            <exception cref="T:ImageVault.Common.Lib.Reflection.MemberReflectionException">If the member has more than one instance of the attribute.</exception>
            <param name="memberInfo">The memberinfo to get the attribute from</param>
            <param name="attributeType">The type of attribute to get, if null type of attribute is irrelevant.</param>
            <returns>The first attribute of the matching type</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets the attribute from the supplied memberinfo that is of the supplied attribute type.
            </summary>
            <exception cref="T:ImageVault.Common.Lib.Reflection.MemberReflectionException">If the member has more than one instance of the attribute.</exception>
            <param name="memberInfo">The memberinfo to get the attribute from</param>
            <param name="attributeType">The type of attribute to get, if null type of attribute is irrelevant.</param>
            <param name="inherit">If the types inheritance chain should be searched for attributes</param>
            <returns>The first attribute of the matching type</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the attribute from the supplied memberinfo that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attribute from</param>
            <returns>The first attribute of the matching type</returns>
            <typeparam name="TAttribute">The type of attribute to get</typeparam>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attribute from the supplied memberinfo that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attribute from</param>
            <param name="inherit">If the types inheritance chain should be searched for attributes</param>
            <returns>The first attribute of the matching type</returns>
            <typeparam name="TAttribute">The type of attribute to get</typeparam>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetAttributes(System.Reflection.MemberInfo)">
            <summary>
            Gets the attributes from the supplied type that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attributes from</param>
            <returns>An array of attributes</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attributes from the supplied type that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attributes from</param>
            <param name="inherit">If the types inheritance chain should be searched for attributes</param>
            <returns>An array of attributes</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets the attributes from the supplied type that is of the supplied attribute type.
            </summary>
            <remarks>This will only search the supplied memberInfo, not inherited ones.</remarks>
            <param name="memberInfo">The memberinfo to get the attributes from</param>
            <param name="attributeType">The type of attribute to get, if null type of attribute is irrelevant.</param>
            <returns>An array of attributes</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets the attributes from the supplied type that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attributes from</param>
            <param name="attributeType">The type of attribute to get, if null type of attribute is irrelevant.</param>
            <param name="inherit">If the types inheritance chain should be searched for attributes</param>
            <returns>An array of attributes</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attributes from the supplied type that is of the supplied attribute type.
            </summary>
            <param name="memberInfo">The memberinfo to get the attributes from</param>
            <param name="inherit">If the types inheritance chain should be searched for attributes</param>
            <returns>An array of attributes</returns>
            <typeparam name="TAttribute">The type of attribute to get</typeparam>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetNullableValueType(System.Type)">
            <summary>
            Gets the nullable type if the supplied type is a nullable
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check for nullable</param>
            <returns>The underlying type if the supplied type is a <see cref="T:System.Nullable`1"/>;
            otherwize the supplied type is returned.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.IsNullable(System.Type)">
            <summary>
            Checks if the supplied type is a <see cref="T:System.Nullable`1"/>
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check</param>
            <returns>True if it is <see cref="T:System.Nullable`1"/>, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.ConvertValueFromNullable(System.Object)">
            <summary>
            Converts a value from a <see cref="T:System.Nullable`1"/> value
            </summary>
            <param name="value">The value to convert</param>
            <returns>The converted value or if the value is not a <see cref="T:System.Nullable`1"/>, the original value.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetMethodFullName">
            <summary>
            Gets the full name of the calling method.
            for instance, 
            
            string ImageVault.Common.Lib.Reflection.ReflectionUtil.GetMethodFullName()
            </summary>
            <returns>The methods full name on the format <c>returnType methodName(parameters)</c></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetMethodFullName(System.Reflection.MethodBase)">
            <summary>
            Gets the full name of the method
            for instance, 
            
            string ImageVault.Common.Lib.Reflection.ReflectionUtil.GetMethodFullName()
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/> to get the full name for</param>
            <returns>The methods full name on the format <c>returnType methodName(parameters)</c></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetCallerTypeMethodFullName(System.Type)">
            <summary>
            Gets the full name of the caller types method
            </summary>
            <returns>The methods full name on the format <c>returnType methodName(parameters)</c></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetCallerTypeFrame(System.Type)">
            <summary>
            Gets the stack frame of the closest callee type. (the frame that called the method that calls this method)
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetCallerTypeFrameIndex(System.Diagnostics.StackTrace,System.Type)">
            <summary>
            Finds the closest stackframe that belongs to the type that called the
            boundary type.
            </summary>
            <param name="trace"></param>
            <param name="boundaryType">The <see cref="T:System.Type"/> to use as boundary item. If omitted, ReflectionUtil will be used</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetCalleeAssembly">
            <summary>
            Gets the assembly of the class that called the assembly of the method that calls 
            this method. :)
            </summary>
            <returns>The <see cref="T:System.Reflection.Assembly"/> of the method that called the assembly of the
            method that we call this method fromor null if the call started from the calling assembly</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetDerivedTypes(System.Type)">
            <summary>
            Gets all types that is directly or indirectly derived from the supplied baseType in the basetypes assembly.
            </summary>
            <param name="baseType">the baseType to use as a reference</param>
            <returns>An array of derived types in the assembly</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetDerivedTypes(System.Reflection.Assembly,System.Type)">
            <summary>
            Gets all types from the assembly that is directly or indirectly derived from the supplied baseType
            </summary>
            <param name="assembly">The assembly to search</param>
            <param name="baseType">the baseType to use as a reference</param>
            <returns>An array of derived types in the assembly</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetTypes(System.Reflection.Assembly)">
            <summary>
            Gets the loadable types from the assembly
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to load the types from.</param>
            <returns>An <see cref="T:System.Type"/> array of the loadable types in the assembly.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetDefaultValue(System.Type)">
            <summary>
            Gets the default uninitialized value of the specific type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the value for</param>
            <returns>The default value of the specified type</returns>
            <remarks>The default value is for reference types null, and for value types it's the same as the call to the
            default constructor.</remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.IsNonPrimitiveStruct(System.Type)">
            <summary>
            Checks if the supplied type is a Struct (primitives are ignored)
            </summary>
            <param name="type">The type to check</param>
            <returns>True if it is struct, otherwise false. Primitives (Int32, Single etc) are not passed.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetMemberInfoType(System.Reflection.MemberInfo)">
            <summary>
            Finds the Type of the supplied <see cref="T:System.Reflection.MemberInfo"/>
            </summary>
            <param name="info">The <see cref="T:System.Reflection.MemberInfo"/> to get the type for (can be a <see cref="T:System.Reflection.FieldInfo"/> or a <see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns>The found <see cref="T:System.Type"/> </returns>
            <exception cref="T:System.Exception">If cannot get the Type from the supplied memberInfo.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> that matches the name in the type
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to search for the property in</param>
            <param name="name">The name of the property</param>
            <returns>The found <see cref="T:System.Reflection.PropertyInfo"/> or null if no match was found.</returns>
            <remarks>If we find multiple properties with the same name in the object (inherited and declared with new), 
            we will get the topmost PropertyInfo in the inheritance chain</remarks>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null
             or if <paramref name="name"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.LookupType(System.String,System.Type)">
            <summary>
            Looks up the typename and finds a corresponding type
            </summary>
            <param name="typeName">The name of the type to find</param>
            <param name="baseType">The <see cref="T:System.Type"/> that the type inherits from</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of types that matches</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ReflectionUtil.LookupType(System.String,System.Type,System.Reflection.Assembly)">
            <summary>
            Looks up the typename and finds a corresponding type
            </summary>
            <param name="typeName">The name of the type to find</param>
            <param name="baseType">The <see cref="T:System.Type"/> that the type inherits from</param>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to search in</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> of types that matches</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Reflection.ResourceUtil">
            <summary>
            Summary description for ResourceUtil.
            </summary>
            <remarks>
            2011-03-21 dan: Created
            </remarks>
        </member>
        <member name="P:ImageVault.Common.Lib.Reflection.ResourceUtil.BaseType">
            <summary>
            Get/Sets the BaseType of the ResourceUtil
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ResourceUtil.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <b>ResourceUtil</b> class.
            </summary>
            <param name="baseType"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ResourceUtil.GetEmbeddedBinaryData(System.String)">
            <summary>
            Retrieves the embedded resource as a byte array
            </summary>
            <param name="resourceName">The case-sensitive name of the manifest resource being requested. </param>
            <returns>The retrieved <see cref="T:System.Byte"/> array </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ResourceUtil.GetEmbeddedBinaryData(System.Type,System.String)">
            <summary>
            Retrieves the embedded resource as a byte array
            </summary>
            <param name="baseType">The <see cref="T:System.Type"/> whose namespace is used to scope the manifest resource name.</param>
            <param name="resourceName">The case-sensitive name of the manifest resource being requested. </param>
            <returns>The retrieved <see cref="T:System.Byte"/> array </returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="baseType"/> is null
             or if <paramref name="resourceName"/> is null.</exception>
            <exception cref="T:System.ApplicationException">If resource stream couldn't be opened</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ResourceUtil.GetManifestResourceStream(System.Type,System.String)">
            <summary>
            Gets a manifest resource stream
            </summary>
            <param name="baseType">The <see cref="T:System.Type"/> whos assembly and namespace that should be used as base.</param>
            <param name="resourceName">The name of the resource (omitting the basetypes namespace)</param>
            <returns>A <see cref="T:System.IO.Stream"/> representing the manifest resource; null if no resources were specified during compilation or if the resource is not visible to the caller.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="baseType"/> is null
             or if <paramref name="resourceName"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ResourceUtil.GetResourceNames(System.Type)">
            <summary>
            Gets the resourcenames from the same folder as the supplied baseType
            </summary>
            <param name="baseType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="baseType"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ResourceUtil.GetManifestResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the stream for the embedded resource
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> where the resource exists</param>
            <param name="resourceName">The name of the resource</param>
            <returns>The found <see cref="T:System.IO.Stream"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ResourceUtil.SaveEmbeddedFile(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Saves an embedded resource as a file
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> that contains the resource</param>
            <param name="resourceName">The name of the resource</param>
            <param name="filename">The output filename to write the resource to.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.ResourceUtil.ReadStringResource(System.Type,System.String)">
            <summary>
            Reads an embedded resource as a string
            </summary>
            <param name="baseType">The <see cref="T:System.Type"/> whos assembly and namespace that should be used as base.</param>
            <param name="resourceName">The name of the resource (omitting the basetypes namespace)</param>
            <returns>The embedded resource in text format</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Reflection.TypeExtensions">
            <summary>
            Extension methods for System.Type
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.TypeExtensions.AssemblyUnqualifiedName(System.Type)">
            <summary>
            Gets the the name of the unqualifed type, consisting only of namespace.type, simpleassemblyname.
            </summary>
            <param name="type">The type.</param>
            <returns>A string with the unqualified name</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Reflection.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            Checks if the supplied type is an anonymous type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.StringConverterUtil">
            <summary>
            Summary description for StringConverterUtil.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.StringConverterUtil.ConvertToBool(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="defaultValue">If no value is defined, the default value will be returned</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringConverterUtil.ConvertToTimeSpan(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringConverterUtil.ConvertToInt(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringConverterUtil.ConvertToLong(System.String,System.Int64)">
            <summary>
            Convert the supplied string value to a long value
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringConverterUtil.ConvertBytesToString(System.Int64)">
            <summary>
            Converts the supplied byte count to a suitable string representation with 3 significant numbers at the 
            best suitable prefix
            </summary>
            <param name="bytes"></param>
            <example>
            1310720 => 1,25 Mb
            1649267441664 => 2 Tb
            </example>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringConverterUtil.ConvertBytesToString(System.UInt64)">
            <summary>
            Converts the supplied byte count to a suitable string representation with 3 significant numbers at the 
            best suitable prefix
            </summary>
            <param name="bytes"></param>
            <example>
            1310720 => 1,25 Mb
            1649267441664 => 2 Tb
            </example>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringConverterUtil.ParseByteString(System.String)">
            <summary>
            Parses the supplied string for a byte expression including prefix and unit and returns the number of bytes represented
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.StringUtil">
            <summary>
            Summary description for StringUtil.
            </summary>
            <remarks>
            2011-10-06 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.StringUtil.FilterCharactersFromString(System.String,System.String)">
            <summary>
            Parses the given string and removes all characters that are present in the characters string
            </summary>
            <param name="name">The name to parse</param>
            <param name="characters">The characters to remove</param>
            <returns>The filtered string</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringUtil.FilterCharactersFromString(System.String,System.String,System.Boolean)">
            <summary>
            Parses the given string and filters it according to the parameter settings
            </summary>
            <param name="name">The name to parse</param>
            <param name="characters">The character filter</param>
            <param name="remove">If true, all characters found in the characters string will be removed, all others
            will be kept. If false all characters found in the characters string will be kept, 
            all others will be removed.</param>
            <returns>The filtered string</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringUtil.FixNewLine(System.String)">
            <summary>
            Analyses the input string and checks for any NewLine markers and converts the 
            present NewLine markers with the one in Environment.NewLine
            </summary>
            <param name="data">The string to fix</param>
            <returns>The fixed string</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringUtil.IsNewlineCharacter(System.Char)">
            <summary>
            Checks if the supplied character is a newline character
            </summary>
            <param name="c"></param>
            <returns><b>true</b> if the char is a newline character, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringUtil.FindText(System.String,System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Finds the the text between the two delimiters.
            </summary>
            <param name="source">The source text to search in</param>
            <param name="startDelimiter">the string that marks the start delimiter</param>
            <param name="endDelimiter">the string that marks the end delimiter</param>
            <param name="startAfterNewline">If true, the delimiters are ended with a linefeed. text is parsed after that.</param>
            <param name="foundText">The text that was found between the delimiters or an empty string if no text or delimiters where found</param>
            <returns>The source text without found text and delimiters</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringUtil.IsMacintosh(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Checks for mac specific bytes
            </summary>
            <param name="bytes"></param>
            <returns>True if it is macintosh, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringUtil.IsUtf7(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            NOTE: this is not entirely correct. This sometimes indicates that we don't have an utf-7 encoding but decoding using Encoding.Utf7 works anyway.
            This method seems not reliable.
            (Based on the UTF-7 RFC though. http://tools.ietf.org/html/rfc2152)
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.StringUtil.IsUtf8(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Checks if the supplied data is valid utf-8 data
            </summary>
            <param name="bytes">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Byte"/> to check</param>
            <returns>True if it contains only valid utf-8 data</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Threading.ThreadUtil">
            <summary>
            Summary description for ThreadUtil.
            </summary>
            <remarks>
            2011-05-13 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Threading.ThreadUtil.StartThread(System.Threading.ThreadStart,System.Action{System.Exception})">
            <summary>
            Creates and starts a thread 
            </summary>
            <param name="threadStart">The <see cref="T:System.Threading.ThreadStart"/> to use</param>
            <param name="exceptionHandler">An <see cref="T:System.Action`1"/> handling an exception for the threadStart</param>
            <returns>The running <see cref="T:System.Threading.Thread"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="threadStart"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Threading.ThreadUtil.AbortThreadIfRunning(System.Threading.Thread)">
            <summary>
            Aborts the supplied thread if it is running
            </summary>
            <param name="thread">The <see cref="T:System.Threading.Thread"/> to abort</param>
            <returns>True if the thread is stopped, false if abort failed after timeout</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Wcf.WebFaultDetailHelper">
            <summary>
            Summary description for WebFaultDetailHelper.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Wcf.WebFaultDetailHelper.DefaultExceptionType">
            <summary>
            Get/Sets the DefaultExceptionType of the WebFaultDetailHelper
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Wcf.WebFaultDetailHelper.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <b>WebFaultDetailHelper</b> class.
            </summary>
            <param name="defaultExceptionType"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Wcf.WebFaultDetailHelper.RegisterException(System.Type)">
            <summary>
            Registers an Exception as avaliable for the helper
            </summary>
            <param name="exceptionType"></param>
            <exception cref="T:System.ArgumentException">If supplied exception must have a constructor taking a string as argument.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Wcf.WebFaultDetailHelper.CreateException(ImageVault.Common.Lib.Wcf.WebFaultDetail)">
            <summary>
            Creates an exception based on the supplied detail
            </summary>
            <param name="detail"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="detail"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Wcf.WebFaultDetailHelper.GetExceptionType(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Wcf.WebFaultDetail">
            <summary>
            Summary description for WebFaultDetail.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Wcf.WebFaultDetail.Message">
            <summary>
            Gets the Message of the WebFaultDetail
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Wcf.WebFaultDetail.Type">
            <summary>
            Get/Sets the Type of the WebFaultDetail
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Wcf.WebFaultDetail.#ctor">
            <summary>
            Initializes a new instance of the <b>WebFaultDetail</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Wcf.WebFaultDetail.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <b>WebFaultDetail</b> class.
            </summary>
            <param name="exception"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="exception"/> is null.</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.AuthKeyValidator">
            <summary>
            Uses MAC address as key if no app setting is found.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:ImageVault.Common.Lib.Web.AuthKeyValidator._authKeyReader">
            <summary>
            Gets the authKeyReader of the <see cref="T:ImageVault.Common.Lib.Web.AuthKeyValidator"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Web.AuthKeyValidator.Log">
            <summary>
            Get/Sets the Log of the <see cref="T:ImageVault.Common.Lib.Web.AuthKeyValidator"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Web.AuthKeyValidator._authKey">
            <summary>
            Get/Sets the _authKey of the <see cref="T:ImageVault.Common.Lib.Web.AuthKeyValidator"/>
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.AuthKeyValidator.#ctor(System.Collections.Generic.IEnumerable{ImageVault.Common.Lib.Web.IAuthKeyReader})">
            <summary>
            Initializes a new instance of the <b>AuthKeyValidator</b> class.
            </summary>
            <param name="readers"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.AuthKeyValidator.Validate(System.String)">
            <summary>
            
            </summary>
            <param name="keyToTest"></param>
            <exception cref="T:System.Exception">If authKey validation failed: 
             or if authKey validation failed: .</exception>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.ConfigFileAuthKeyReader">
            <summary>
            Reads app config for auth key
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.ConfigFileAuthKeyReader.ReadAuthKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Common.Lib.Web.ConfigFileAuthKeyReader.CanChange">
            <summary>
            Gets the CanChange of the ConfigFileAuthKeyReader
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.HttpContextBaseFactory">
            <summary>
            Implements the IHttpContextBaseFactory for the normal HttpContext class
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:ImageVault.Common.Lib.Web.HttpContextBaseFactory.Instance">
            <summary>
            Get/Sets the Instance of the <see cref="T:ImageVault.Common.Lib.Web.HttpContextBaseFactory"/>
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Web.HttpContextBaseFactory.Current">
            <summary>
            Gets the Current of the httpContextBaseFactory
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpContextBaseFactory.#ctor">
            <summary>
            Initializes a new instance of the <b>httpContextBaseFactory</b> class.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.HttpHandlerBase">
            <summary>
            Base implementation of a Reusable IHttpHandler
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Web.HttpHandlerBase.Log">
            <summary>
            Gets the Log instance used to log messages
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Web.HttpHandlerBase.IsReusable">
            <summary>
            Gets the IsReusable of the EditorService
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Web.HttpHandlerBase.DenyAnonymous">
            <summary>
            Get/Sets the DenyAnonymous of the RouteHandlerBase
            </summary>
            <value>If true, will raise a Access denied response if the current user isn't logged in</value>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpHandlerBase.#ctor">
            <summary>
            Initializes a new instance of the <b>HttpHandlerBase</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpHandlerBase.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
            <summary>
            Handles processing and error handling
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpHandlerBase.IsAccessAllowed(System.Web.HttpContextBase)">
            <summary>
            Determines if the current request is allowed access
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpHandlerBase.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpHandlerBase.WriteToResponse(System.Web.HttpContextBase,System.String)">
            <summary>
            Writes the supplied string as an ASCII response
            </summary>
            <param name="context"></param>
            <param name="response"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpHandlerBase.SendInternalServerError(System.Exception,System.Web.HttpContextBase)">
            <summary>
            Sends an internal server error message
            </summary>
            <param name="ex"></param>
            <param name="context"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpHandlerBase.SendFileNotFoundResponse(System.Web.HttpContextBase,System.String)">
            <summary>
            Sends a file not found message to the client
            </summary>
            <param name="context"></param>
            <param name="description"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpHandlerBase.SendAccessDeniedResponse(System.Web.HttpContextBase)">
            <summary>
            Sends an access denied response to the client
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.IAuthKeyReader">
            <summary>
            The IAuthKeyReader interface 
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.IAuthKeyReader.ReadAuthKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageVault.Common.Lib.Web.IAuthKeyReader.CanChange">
            <summary>
            Gets the CanChange of the IAuthKeyReader
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.IAuthKeyValidator">
            <summary>
            The IAuthKeyGenerator interface 
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.IAuthKeyValidator.Validate(System.String)">
            <summary>
            
            </summary>
            <param name="keyToTest"></param>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.IdentityHandler">
            <summary>
            Summary description for IdentityController.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:ImageVault.Common.Lib.Web.IdentityHandler.PathFolderName">
            <summary>
            The name of the folder where the handler should be initiated
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Web.IdentityHandler._identityLookup">
            <summary>
            Gets the _identityLookup of the <see cref="T:ImageVault.Common.Lib.Web.IdentityHandler"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Web.IdentityHandler._authKeyValidator">
            <summary>
            Gets the _authKeyValidator of the <see cref="T:ImageVault.Common.Lib.Web.IdentityHandler"/>
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.IdentityHandler.#ctor(ImageVault.Common.Lib.Web.IAuthKeyValidator)">
            <summary>
            Initializes a new instance of the <b>IdentityHandler</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.IdentityHandler.#ctor(System.String,ImageVault.Common.Lib.Web.IAuthKeyValidator)">
            <summary>
            Initializes a new instance of the <b>IdentityHandler</b> class.
            </summary>
            <param name="path"></param>
            <param name="authKeyValidator"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.IdentityHandler.ProcessRequest(System.Web.HttpContextBase)">
            <summary>
            Processes the IdentityHandler request
            </summary>
            <param name="context"></param>
            <exception cref="T:System.ArgumentException">If missing argument username.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.IdentityLookupService.GetAllRoles">
            <summary>
            Get all roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.IdentityLookupService.GetRolesForUser(System.String)">
            <summary>
            Get the roles for the supplied user
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.IdentityLookupService.FindUsersByName(System.String,System.Int32,System.Int32)">
            <summary>
            Finds the users by the supplied name
            </summary>
            <param name="usernameToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.IdentityLookupService.GetUser(System.String,System.Boolean)">
            <summary>
            Get the users by the supplied name
            </summary>
            <param name="username"></param>
            <param name="userIsOnline"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.IdentityLookupService.ValidateUser(System.String,System.String)">
            <summary>
            Verify credentials
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.IHttpContextBaseFactory">
            <summary>
            The IHttpContextBaseFactory interface. Used to abstract the HttpContext static class. 
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Web.IHttpContextBaseFactory.Current">
            <summary>
            Gets the Current of the ScriptHelperBase
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.MacAuthKeyReader">
            <summary>
            Reads computers MAC address as auth key
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Lib.Web.MacAuthKeyReader.CanChange">
            <summary>
            Gets the CanChange of the MacAuthKeyReader
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.MacAuthKeyReader.ReadAuthKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.NonMappingRoute">
            <summary>
            Creates a one way route that only maps from an url to a handler.
            Never from  route values to an url.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Web.NonMappingRoute.Path">
            <summary>
            Gets the Path of the NonMappingRoute
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.NonMappingRoute.#ctor(System.String,System.Web.Routing.IRouteHandler)">
            <summary>
            Initializes a new instance of the <b>NonMappingRoute</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.NonMappingRoute.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.Range">
            <summary>
            Summary description for Range.
            </summary>
            <remarks>
            2011-08-11 dan: Created
            </remarks>
            <summary>
            Contains range information about a request
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Web.Range.All">
            <summary>
            Gets the All of the <see cref="T:ImageVault.Common.Lib.Web.Range"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Web.Range.Offset">
            <summary>
            Gets the Offset of the <see cref="T:ImageVault.Common.Lib.Web.Range"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Lib.Web.Range.Length">
            <summary>
            Gets the Length of the <see cref="T:ImageVault.Common.Lib.Web.Range"/>
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.Range.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <b>Range</b> class.
            </summary>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.Range.Parse(System.String)">
            <summary>
            Parses the supplied range header
            </summary>
            <param name="range">The range to parse</param>
            <returns>The parsed range</returns>
            <exception cref="T:System.ApplicationException">If only supports byte ranges
             or if cannot parse byte range .</exception>
            <remarks>don't support multiple range requests. http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.RouteHandlerBase">
            <summary>
            Defines a base implementation for a reuseable IHttpHandler and an IRouteHandler
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Web.RouteHandlerBase.HandlerPath">
            <summary>
            Gets the HandlerPath of the RouteHandlerBase
            </summary>
            <value>Will contain the name supplied to the constructor with a trailing / (if not already supplied)</value>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.RouteHandlerBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>RestHandler</b> class.
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If the supplied path cannot start with any of the following characters: /,~ or if the path includes one of the following characters: ? </exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.RouteHandlerBase.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            
            </summary>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.RouteHandlerBase.CreateRoute">
            <summary>
            Creates a wildcard route that captures all routes for the requested path
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.RouteHandlerBase.GetLocalPath(System.String)">
            <summary>
            Gets the local path relative to our handler
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.RouteHandlerBase.GetHandlerBaseUrl(System.String)">
            <summary>
            Gets the base url to the handler for the supplied url (including the trailing / for the handler)
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.UriUtil">
            <summary>
            Utility functions for Uris and Uri strings
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.UriUtil.FixRelativeApplicationUrlPath(System.String,System.String)">
            <summary>
            Fixes the current url to be a real url (absoulte or absolute relative, ie http://site.com/path or /path)
            input url can be 
              http://site.com (absolute)
              /mypath (absolute relative)
              ~/mypath (application absolute relative)
              mypath (application absolute relative)
            </summary>
            <param name="url"></param>
            <param name="appDomainAppVirtualPath"></param>
            <returns></returns>
            <remarks>Will return a suitable url. If url is an absolute url, then use it.
            ~/ marks an app relative url
            / marks an absolute virtual path
            if a relative url, make it absolute.
            All returned urls will end with a /</remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.UriUtil.IsSameSchemeHostAndPort(System.Uri,System.Uri)">
            <summary>
            Compares two uri and returns true if they share the same scheme host and port
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.UriUtil.GetServiceUri(System.String,System.String)">
            <summary>
            Gets the uri for the supplied service
            </summary>
            <param name="baseUri">The base uri to the service (with or without trailing slash)</param>
            <param name="servicePath">the relative path from the base uri</param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.WebApplicationUtil">
            <summary>
            Summary description for WebApplicationUtil.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.WebApplicationUtil.GetCurrentApplicationUri(System.String)">
            <summary>
            Gets the current uri of the request to the site with the supplied path as a relative
            </summary>
            <param name="path">The relative path (to the application) that the uri should go to</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.WebApplicationUtil.GetCurrentApplicationUri(System.Web.HttpContextBase,System.String)">
            <summary>
            Gets the current uri of the request to the site with the supplied path as a relative
            </summary>
            <param name="current">The current <see cref="T:System.Web.HttpContextBase"/> for the request</param>
            <param name="path">The relative path (to the application) that the uri should go to</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.WebApplicationUtil.GetCurrentApplicationUri(System.Web.HttpContextBase,System.Uri,System.String)">
            <summary>
            Gets the current uri of the request to the site with the supplied path as a relative
            </summary>
            <param name="current">The current <see cref="T:System.Web.HttpContextBase"/> for the request</param>
            <param name="fallbackApplicationUri">Indicates the fallback uri if the current context is not present</param>
            <param name="path">The relative path (to the application) that the uri should go to</param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.HttpDateParse">
            <summary>
            Summary description for HttpDateParse.
            </summary>
            <remarks>
            2011-09-15 dan: Created
            Ripped from the .net 4 framework class
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpDateParse.ParseHttpDate(System.String,System.DateTime@)">
            <summary>
            
            </summary>
            <param name="dateString"></param>
            <param name="dtOut"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpDateParse.MapDayMonthToDword(System.Char[],System.Int32)">
            <summary>
            Makes a month/weekday name into a number
            </summary>
            <param name="lpszDay"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpDateParse.MakeUpper(System.Char)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Web.HttpRequestBaseExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Web.HttpRequestBaseExtensions.IfModifiedSince(System.Web.HttpRequestBase)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Xml.Serialization.XmlReaderReferenceObjectComparer">
            <summary>
            Compares two objects if they are XmlReaders and checks if they are based on the same base reader
            </summary>
            <remarks>
            2010-09-28 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlReaderReferenceObjectComparer.AreSameReferenceObject(System.Object,System.Object)">
            <summary>
            Compares two objects and compares if they are based on the same reference object.
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>True if they originates from the same instance, false otherwize.</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Xml.Serialization.XmlTextWriterReferenceObjectComparer">
            <summary>
            Compares two objects if they are XmlTextWriters and checks if they are based on the same base writer
            </summary>
            <remarks>
            2010-09-28 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlTextWriterReferenceObjectComparer.AreSameReferenceObject(System.Object,System.Object)">
            <summary>
            Compares two objects and compares if they are based on the same reference object.
            </summary>
            <param name="a">The first object to compare</param>
            <param name="b">The second object to compare</param>
            <returns>True if they originates from the same instance, false otherwize.</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Xml.Serialization.IXmlSerializerMemberInfo">
            <summary>
            The IXmlSerializerMemberInfo interface 
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Xml.Serialization.IXmlSerializerMemberInfo.Name">
            <summary>
            Gets the Name of the IXmlSerializerMemberInfo
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Xml.Serialization.IXmlSerializerMemberInfo.Type">
            <summary>
            Gets the Type of the IXmlSerializerMemberInfo
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.IXmlSerializerMemberInfo.GetValue(System.Object)">
            <summary>
            Gets the value from the member
            </summary>
            <param name="obj">The object to get the value from.</param>
            <returns>The value retrieved from the object</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.IXmlSerializerMemberInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the member
            </summary>
            <param name="obj">The object to set the value on </param>
            <param name="value">The value to set</param>
        </member>
        <member name="T:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache">
            <summary>
            Summary description for XmlSerializerCache.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache.StartItem">
            <summary>
            Gets the StartItem of the XmlSerializerCache
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache.Disposed">
            <summary>
            Returns true if the property is disposed or not
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache.#ctor(System.Object,System.Boolean)">
            <summary>
            Creates an instance of the XmlSerializerCache class.
            </summary>
            <param name="startItem">The object that started the serialization</param>
            <param name="forSerialization">If the cache is for serialization or deserialization.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before 
            the <b>XmlSerializerCache</b> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache.EnsureInCache(System.Object,System.Int32@)">
            <summary>
            Ensures that the supplied item is contained in the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to check/add.</param>
            <param name="id">The id that the object has in the cache.</param>
            <returns>True if the object already existed in the cache, false if it was added.</returns>
            <exception cref="T:System.ApplicationException">If the cache is created for serialization</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache.GetId(System.Object)">
            <summary>
            Gets the associated id of the object
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to get the id for</param>
            <returns>The found id</returns>
            <exception cref="T:System.ApplicationException">If the cache is created for deserialization</exception>
            <exception cref="T:System.ApplicationException">If the object wasn't found in the cache</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache.Add(System.Object)">
            <summary>
            Adds an object to the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to add</param>
            <returns>The id of the object that was added.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache.GetObject(System.Int32)">
            <summary>
            Gets an object from the cache with the supplied id.
            </summary>
            <param name="id">The id of the object</param>
            <returns>The found object</returns>
            <exception cref="T:System.ApplicationException">If the cache is created for serialization</exception>
            <exception cref="T:System.ApplicationException">If the object wasn't found in the cache</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache.IsInCache(System.Object)">
            <summary>
            Checks if an object exists in the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to check.</param>
            <returns>True if it exists, false otherwize</returns>
            <exception cref="T:System.ApplicationException">If the cache is created for deserialization</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache.Dispose">
            <summary>
            Releases all resources used by the object.
            </summary>
            <remarks>
            Calling Dispose allows the resources used by the object to be reallocated for 
            other purposes. For more information about Dispose, see Cleaning Up Unmanaged Resources.
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the object and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.</param>
            <remarks>
            This method is called by the public Dispose() method and the Finalize method. 
            Dispose() invokes the protected Dispose(Boolean) method with the disposing parameter set 
            to true. Finalize invokes Dispose with disposing set to false.
            When the disposing parameter is true, this method releases all resources held by any managed 
            objects that this object references. This method invokes the Dispose() method of each 
            referenced object.
            		Notes to Inheritors:   Dispose can be called multiple times by other objects. 
            When overriding Dispose(Boolean), be careful not to reference objects that have 
            been previously disposed of in an earlier call to Dispose. For more information 
            about how to implement Dispose(Boolean), see Implementing a Dispose Method.
            For more information about Dispose and Finalize, see Cleaning Up Unmanaged Resources 
            and Overriding the Finalize Method.
            </remarks>
        </member>
        <member name="T:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil">
            <summary>
            Summary description for XmlSerializerUtil.
            </summary>
            <remarks>
            2010-09-28 dan: Created
            </remarks>
            <summary>
            The XmlSerializerUtil provides utility methods for serializing and deserializing
            objects. It also caches created Serializers for faster access.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.ReferenceComparer">
            <summary>
            The reference comparer compares the two reference
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.AddItemReference(System.Object,System.Object)">
            <summary>
            Adds the supplied object to the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to add.</param>
            <param name="cacheReference">The reference object that is used to create the cache</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.GetItemReference(System.Xml.XmlReader)">
            <summary>
            Gets the referred object of the current element.
            </summary>
            <param name="reader"></param>
            <returns>The referred object or null if there isn't any refered object.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.StoreItemReference(System.Object,System.Xml.XmlWriter)">
            <summary>
            Writes the reference id to the current node and ensures that the supplied object is 
            contained in the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to check/add.</param>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> used for serialization</param>
            <returns>True if the object has already been added to the cache, false otherwize.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.ItemReferenceDone(System.Object)">
            <summary>
            Removes the cache if the supplied object is the same as the one that initialized the cache.
            </summary>
            <param name="o">The object to check.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.GetCache(System.Object,System.Boolean,System.Object)">
            <summary>
            Gets the Cache from the thread storage
            </summary>
            <param name="o">The current object to add to the cache, will not be added but in case
            the cache is not existent, we need a reference object for calculating where the cache should 
            be ended.</param>
            <param name="forSerialization">If the cache is for serialization or deserialization.</param>
            <param name="cacheReference">The reference object that is used to create the cache</param>
            <returns>The <see cref="T:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerCache"/></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="o"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.CreateCache(System.Object,System.Object,System.Boolean)">
            <summary>
            Creates an assigns the Cache for the Util
            </summary>
            <param name="forSerialization">If the cache is for serialization or deserialization.</param>
            <param name="cacheReference">The reference object that is used to create the cache</param>
            <param name="o">The base object for the cache (can be null)</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="cacheReference"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.DeleteCache">
            <summary>
            Deletes the current cache
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.GetItemByReference(System.Int32)">
            <summary>
            Gets a cached object by its reference id
            </summary>
            <param name="id">The cache id of the object</param>
            <returns>The cached <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.EnsureInCache(System.Object,System.Int32@,System.Object)">
            <summary>
            Ensures that the supplied item is contained in the cache.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to check/add.</param>
            <param name="id">The id that the object has in the cache.</param>
            <param name="cacheReference">The reference object that is used to create the cache</param>
            <returns>True if the object already existed in the cache, false if it was added.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.InitCacheForReading(System.Object)">
            <summary>
            Initiates a XmlSerializerCache for a deserialize operation.
            </summary>
            <param name="refObject"></param>
            <exception cref="T:System.ApplicationException">If a XmlSerializerCache already exists in the thread.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="refObject"/> is null.</exception>
            <remarks>When the deserialize operation is completed, don't forget to do a <see cref="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.DeleteCache"/> call to enable
            other serialize/deserialize methods to work.</remarks>
        </member>
        <member name="P:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.DecimalNumberFormatInfo">
            <summary>
            Gets the DecimalNumberFormatInfo of the XmlSerializerUtil
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.SerializerCache">
            <summary>
            Gets the serializer cache for the ViewState
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.#ctor">
            <summary>
            Creates an instance of the XmlSerializerUtil class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.GetSerializer(System.Type)">
            <summary>
            Gets the serializer for the supplied type 
            </summary>
            <param name="type">The type to get the serializer for</param>
            <returns>The Types serializer</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.GetSerializer(System.Type,System.Type)">
            <summary>
            Gets the XmlSerializer for the specified type
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the XmlSerializer for</param>
            <param name="extraType">An extra <see cref="T:System.Type"/> that the XmlSerializer can handle.</param>
            <returns>The <see cref="T:System.Xml.Serialization.XmlSerializer"/> </returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.SerializeObject(System.Object)">
            <summary>
            Serializes the object 
            </summary>
            <param name="obj">The object to serialize</param>
            <returns>The Serialized object</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.SerializeSimpleObjectsToString(System.Object)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the supplied object.
            </summary>
            <param name="obj"></param>
            <returns>A <see cref="T:System.String"/> that represents the supplied object or null if the supplied object couldn't be serialized in a simple way.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.SerializeObject(System.Xml.XmlWriter,System.Object)">
            <summary>
            Serializes the supplied object to the writer.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to serialize the object to</param>
            <param name="o">The <see cref="T:System.Object"/>  to serialize.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.SerializeObject(System.Xml.XmlWriter,System.Object,System.Type)">
            <summary>
            Serializes the supplied object to the writer.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to serialize the object to</param>
            <param name="obj">The <see cref="T:System.Object"/>  to serialize.</param>
            <param name="baseType">The base <see cref="T:System.Type"/> to serialize</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeObject(System.Type,System.String)">
            <summary>
            Deserializes an object from a string to the object value 
            </summary>
            <param name="type">The type to deserialize to</param>
            <param name="data">The data used for deserialization</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeObject(System.Type,System.Xml.XmlReader)">
            <summary>
            Deserializes an object of the specific type by reading data from the supplied reader.
            </summary>
            <remarks>Uses the <see cref="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeObject(System.Type,System.Xml.XmlReader,System.Boolean)"/> where expectWrapperElement is set to true.</remarks>
            <param name="type">The <see cref="T:System.Type"/> to deserialize to</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to use as an input for the deserialization</param>
            <returns>The deserialized obejct</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeObject(System.Type,System.Xml.XmlReader,System.Boolean)">
            <summary>
            Deserializes an object of the specific type by reading data from the supplied reader.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to deserialize to</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to use as an input for the deserialization</param>
            <param name="expectWrapperElement">True if the object to be serialized is inside the current reader node, false if the reader node
            is positioined on the start element of the item</param>
            <returns>The deserialized obejct</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="type"/> is null
             or if <paramref name="reader"/> is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">If error in Deserialization data. Can't assign null to a ValueType.(.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.FindTypeByXsiType(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="xsiType"></param>
            <param name="baseType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="xsiType"/> is null.</exception>
            <exception cref="T:System.Exception">If cannot find type by xsiType. Multiple types matches the xsiType .</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.ReadToNextElement(System.Xml.XmlReader)">
            <summary>
            Moves the reader to the next element.(or end element)
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from.</param>
            <returns>True if we was able to reach the next element, false otherwize. </returns>
            <remarks>If the reader already is placed on an end element, no advancement is done and false is returned.</remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.RetrieveItem(System.Xml.XmlReader,System.Type,System.String)">
            <summary>
            Reads an item from the supplied xml reader of the supplied type and name
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from</param>
            <param name="type">The <see cref="T:System.Type"/> of object to read.</param>
            <param name="name">The name of the element to read, if null comparison will not occur (any name is ok)</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.RetrieveItem(System.Xml.XmlReader,ImageVault.Common.Lib.Xml.Serialization.IXmlSerializerMemberInfo)">
            <summary>
            Reads an item from the supplied xml reader of the supplied type and name
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from</param>
            <param name="member">The <see cref="T:ImageVault.Common.Lib.Xml.Serialization.IXmlSerializerMemberInfo"/> defining the property
            that should recieve the item.</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.WriteItem(System.Xml.XmlWriter,System.Object,System.String)">
            <summary>
            Writes an item to the supplied writer
            </summary>
            <param name="writer">The <see cref="T:System.Object"/> to write to</param>
            <param name="o">The <see cref="T:System.Xml.XmlWriter"/> to write</param>
            <param name="name">The name of the element</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.WriteItem(System.Xml.XmlWriter,System.Object,ImageVault.Common.Lib.Xml.Serialization.IXmlSerializerMemberInfo)">
            <summary>
            Writes an item to the supplied writer
            </summary>
            <param name="writer">The <see cref="T:System.Object"/> to write to</param>
            <param name="o">The <see cref="T:System.Xml.XmlWriter"/> to write</param>
            <param name="member">The <see cref="T:ImageVault.Common.Lib.Xml.Serialization.IXmlSerializerMemberInfo"/> containing information
            on how to write the data.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.WriteItem(System.Xml.XmlWriter,System.Object,System.String,System.Type)">
            <summary>
            Writes an item to the supplied writer
            </summary>
            <param name="writer">The <see cref="T:System.Object"/> to write to</param>
            <param name="o">The <see cref="T:System.Xml.XmlWriter"/> to write</param>
            <param name="name">The name of the element</param>
            <param name="baseType">The type of object that is the base type</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.WriteItem(System.Xml.XmlWriter,System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes an item to the supplied writer
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write to</param>
            <param name="o">The <see cref="T:System.Object"/> to write</param>
            <param name="name">The name of the element</param>
            <param name="attributes">The attributes to write to the element.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.WriteItem(System.Xml.XmlWriter,System.Object,System.String,System.Type,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Writes an item to the supplied writer
            </summary>
            <param name="writer">The <see cref="T:System.Object"/> to write to</param>
            <param name="o">The <see cref="T:System.Xml.XmlWriter"/> to write</param>
            <param name="name">The name of the element</param>
            <param name="baseType">The type of object that is the base type</param>
            <param name="attributes">The attributes to write to the element.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.WriteAttribute(System.Xml.XmlWriter,System.Object,System.String)">
            <summary>
            Writes the supplied value as an attribute
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write to</param>
            <param name="value">The value to write</param>
            <param name="name">The name of the attribute to write</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is null
             or if <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.ReadAttribute``1(System.Xml.XmlReader,System.String)">
            <summary>
            Reads an attribute from the current XmlReader
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from </param>
            <param name="name">The name of the attribute to read</param>
            <typeparam name="T">The type of value to read</typeparam>
            <returns>The read attribute value</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="reader"/> is null.</exception>
            <exception cref="T:System.Xml.XmlException">If no attribute with the supplied name was found .</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXml(System.Object)">
            <summary>
            Serializes an object to Xml
            </summary>
            <param name="obj">The object to serialize</param>
            <returns>The serialized xml</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXml(System.Object,System.Xml.Serialization.XmlSerializer)">
            <summary>
            Serializes an object to Xml
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="xser">The <see cref="T:System.Xml.Serialization.XmlSerializer"/> to use or null if the default should be used</param>
            <returns>The serialized xml</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXml(System.Object,System.Xml.Serialization.XmlSerializer,System.Text.Encoding)">
            <summary>
            Serializes an object to Xml
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="xser">The <see cref="T:System.Xml.Serialization.XmlSerializer"/> to use or null if the default should be used</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use for the xml serialized string</param>
            <returns>The serialized xml</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="obj"/> is null.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXml(System.Object,System.Text.Encoding)">
            <summary>
            Serializes an object to Xml
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use for the xml serialized string</param>
            <returns>The serialized xml</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeFromXml``1(System.String)">
            <summary>
            Deserializes an xml text to an object.
            </summary>
            <param name="xml">The xml to deserialize</param>
            <typeparam name="T">The type to serialize the xml to</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeFromXml``1(System.String,System.Xml.Serialization.XmlSerializer)">
            <summary>
            Deserializes an xml text to an object.
            </summary>
            <param name="xml">The xml to deserialize</param>
            <param name="xser">The <see cref="T:System.Xml.Serialization.XmlSerializer"/> to use or null if the default serializer for the type should be used</param>
            <typeparam name="T">The type to serialize the xml to</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXmlFile(System.Object,System.String)">
            <summary>
            Serializes an object to Xml and stores it in a file
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="path">The path to the file to write to. If it exists, it will be overwritten.</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.SerializeToXmlFile(System.Object,System.String,System.Text.Encoding)">
            <summary>
            Serializes an object to Xml and stores it in a file
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="path">The path to the file to write to. If it exists, it will be overwritten.</param>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to use</param>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.DeserializeFromXmlFile``1(System.String)">
            <summary>
             Deserializes a file (xml) to an object.
            </summary>
            <param name="path">The path to the file to deserialize.</param>
            <returns>The deserialized <typeparamref name="T"/></returns>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.WriteTypeInfo(System.Object,System.Xml.XmlWriter)">
            <summary>
            Writes the type info on the current node (as an argument
            </summary>
            <param name="obj">The object to write the type for</param>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write to.</param>
            <exception cref="T:System.ArgumentNullException">If obj is null</exception>
            <exception cref="T:System.ArgumentNullException">If writer is null</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.ReadTypeInfo(System.Xml.XmlReader)">
            <summary>
            Reads the type information from the reader.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to read from</param>
            <returns>The found type</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">If the type attribute was not found.</exception>
            <exception cref="T:System.TypeLoadException">If the type was not found.</exception>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.Serialization.XmlSerializerUtil.Clone``1(``0)">
            <summary>
            Clones the supplied item by serializing it to xml and back.
            </summary>
            <param name="obj"></param>
            <typeparam name="T"></typeparam>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ImageVault.Common.Lib.Xml.XmlAttributeExtensions">
            <summary>
            Summary description for XmlAttributeExtensions.
            </summary>
            <remarks>
            2011-10-07 dan: Created
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Lib.Xml.XmlAttributeExtensions.IsNamespaceDeclaration(System.Xml.XmlAttribute)">
            <summary>
            Checks the XmlAttribute if it is a xmlns declaration or not.
            </summary>
            <param name="att"></param>
            <returns>True if namespace is declaration, otherwise false.</returns>
        </member>
        <member name="T:ImageVault.Common.License.LicenseException">
            <summary>
            Represents errors that occur when validating the ImageVault License.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.License.LicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>LicenseException</b> class.
            </summary>
            <param name="message">The error message associated with the exception thrown</param>
        </member>
        <member name="M:ImageVault.Common.License.LicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <b>LicenseException</b> class.
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:ImageVault.Common.P3PUtil">
             <summary>
             P3P is (was) a standard for describing policies for websites http://www.w3.org/P3P/details.html
             IE 6-8? uses those headers for determining if cookies should be accepted when a page is loaded inside an iframe (depending on security level)
             This class tries to address this problem by inserting an acceptable header that allows ie to accept headers.
             </summary>
             <remarks>
             The standard seems to not be in use anymore, a report states many sites that has incorrect policies or missing policies.
             http://www.cylab.cmu.edu/files/pdfs/tech_reports/CMUCyLab10014.pdf
             More information can also be found 
             http://stackoverflow.com/questions/389456/cookie-blocked-not-saved-in-iframe-in-internet-explorer
             http://www.p3pwriter.com/LRN_111.asp
            
             <p>2013-10-16 dan: Created</p>
             </remarks>
        </member>
        <member name="M:ImageVault.Common.P3PUtil.AddP3PHeader(System.Web.HttpResponse,System.String)">
            <summary>
            Adds a P3P header suitable for ImageVault
            </summary>
            <remarks>This is needed to allow IE keep cookies in iframes</remarks>
            <param name="response">The response to add the header to</param>
            <param name="policyRef">The relative url for the policy ref document. If omitted /w3c/p3p.xml will be used.</param>
        </member>
        <member name="T:ImageVault.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.CannotCreatePublishedMediaContentReference">
            <summary>
              Looks up a localized string similar to Cannot create a DbPublishedMediaContentReference when PublishedMediaContentReferenceId already is set.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.GlobalRoles_Administrator">
            <summary>
              Looks up a localized string similar to Administrator.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.GlobalRoles_CategoryAdministrator">
            <summary>
              Looks up a localized string similar to Category administrator.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.GlobalRoles_MediaFormatAdministrator">
            <summary>
              Looks up a localized string similar to Media format administrator.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaConversionTypes_Generic">
            <summary>
              Looks up a localized string similar to Generic.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaConversionTypes_Image">
            <summary>
              Looks up a localized string similar to Image.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaConversionTypes_Original">
            <summary>
              Looks up a localized string similar to Original.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Eps">
            <summary>
              Looks up a localized string similar to Eps.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Gif">
            <summary>
              Looks up a localized string similar to Gif.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Jpeg">
            <summary>
              Looks up a localized string similar to Jpeg.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Original">
            <summary>
              Looks up a localized string similar to Original.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Png">
            <summary>
              Looks up a localized string similar to Png.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Tiff">
            <summary>
              Looks up a localized string similar to Tiff.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_Unknown">
            <summary>
              Looks up a localized string similar to Unknown format.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MediaFormatOutputTypes_WebSafe">
            <summary>
              Looks up a localized string similar to Websafe.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_Boolean">
            <summary>
              Looks up a localized string similar to True/False.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_DateTime">
            <summary>
              Looks up a localized string similar to Date and Time.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_Decimal">
            <summary>
              Looks up a localized string similar to Decimal.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_Integer">
            <summary>
              Looks up a localized string similar to Number.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_LongString">
            <summary>
              Looks up a localized string similar to Long text.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_String">
            <summary>
              Looks up a localized string similar to Text.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.MetadataTypes_Undefined">
            <summary>
              Looks up a localized string similar to Undefined.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.ResizeMode_ScaleToFill">
            <summary>
              Looks up a localized string similar to Scale to fill.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.ResizeMode_ScaleToFit">
            <summary>
              Looks up a localized string similar to Scale to fit.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Properties.Resources.ResizeMode_Skew">
            <summary>
              Looks up a localized string similar to Scale to skew.
            </summary>
        </member>
        <member name="T:ImageVault.Common.ScheduledJob">
            <summary>
            Defines a scheduled job
            </summary>
        </member>
        <member name="P:ImageVault.Common.ScheduledJob.ScheduledJobId">
            <summary>
            Get/Sets the ScheduledJobId of the ScheduledJob
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.ScheduledJob.Type">
            <summary>
            Get/Sets the Type of the ScheduledJob
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.ScheduledJob.Name">
            <summary>
            Get/Sets the Name of the ScheduledJob
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.ScheduledJob.Interval">
            <summary>
            Get/Sets the Interval of the ScheduledJob
            </summary>
            <value>The number of minutes between each run</value>
        </member>
        <member name="P:ImageVault.Common.ScheduledJob.LastRun">
            <summary>
            Get/Sets the LastRun of the ScheduledJob
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Security.AccessToken">
            <summary>
            Defines an access token that is returned from the oauth/token call
            </summary>
        </member>
        <member name="P:ImageVault.Common.Security.AccessToken.Token">
            <summary>
            Get/Sets the Token of the AccessToken
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Security.AccessToken.TokenType">
            <summary>
            Get/Sets the TokenType of the AccessToken
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Security.AccessToken.ExpiresIn">
            <summary>
            Get/Sets the ExpiresIn of the AccessToken
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Security.AccessToken.RefreshToken">
            <summary>
            Get/Sets the RefreshToken of the AccessToken
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Security.AuthToken">
            <summary>
            Summary description for AuthToken.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Security.AuthToken.Username">
            <summary>
            Get/Sets the Username of the AuthToken
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Security.AuthToken.Password">
            <summary>
            Get/Sets the Password of the AuthToken
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Security.AuthToken.ActAs">
            <summary>
            Get/Sets the ActAs of the AuthToken
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Security.AuthToken.TimeStamp">
            <summary>
            Get/Sets the TimeStamp of the AuthToken
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Security.AuthToken.#ctor">
            <summary>
            Initializes a new instance of the <b>AuthToken</b> class.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Security.AuthTokenUtil">
            <summary>
            Utility class for Encoding and decoding Authtokens
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.AuthTokenUtil.Log">
            <summary>
            Gets the Log of the <see cref="T:ImageVault.Common.Security.AuthTokenUtil"/>
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.AuthTokenUtil.Encrypt(ImageVault.Common.Security.AuthToken,System.String,System.String)">
            <summary>
            Encrypts the supplied token using the secret and salt
            </summary>
            <param name="token"></param>
            <param name="secret"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.AuthTokenUtil.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypts the supplied message using the secret and salt
            </summary>
            <param name="message"></param>
            <param name="secret"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.AuthTokenUtil.TokenToString(ImageVault.Common.Security.AuthToken)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Security.AuthTokenUtil"/>.
            </summary>
            <param name="token"></param>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:ImageVault.Common.Security.AuthTokenUtil"/>.</returns>
        </member>
        <member name="M:ImageVault.Common.Security.AuthTokenUtil.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypts the supplied message
            </summary>
            <param name="message"></param>
            <param name="secret"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.AuthTokenUtil.GetCrypto(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="secret"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.AuthTokenUtil.ReadByteArray(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.SystemException">If stream did not contain properly formatted byte array
             or if did not read byte array properly.</exception>
        </member>
        <member name="M:ImageVault.Common.Security.AuthTokenUtil.Encrypt(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.AuthTokenUtil.Decrypt(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Decrypts a text
            </summary>
            <param name="chiper"></param>
            <param name="certificate"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.AuthTokenUtil.HttpGet(System.Uri,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs an Http Get request for the supplied uri and querystring parameters and returns the response body
            </summary>
            <param name="uri"></param>
            <param name="parameters"></param>
            <returns></returns>
            <exception cref="T:System.ApplicationException">If cannot create request for the supplied parameters.</exception>
        </member>
        <member name="M:ImageVault.Common.Security.AuthTokenUtil.CreateQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Security.ClaimsUtil">
            <summary>
            Summary description for ClaimsUtil.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.ClaimsUtil.GroupClaimType">
            <summary>
            A constant for the Group claim type (http://schemas.microsoft.com/ws/2008/06/identity/claims/groups)
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.ClaimsUtil.AdfsGroupClaimType">
            <summary>
            A constant for the Group claim type used by adfs (http://schemas.xmlsoap.org/claims/Group)
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.ClaimsUtil.ImpersonatingClientClaimType">
            <summary>
            A constant for a Impersonating Client claim type (http://schemas.imagevault.se/ws/2016/identity/claims/impersonatingclient)
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetClaims(System.Security.Principal.IPrincipal)">
            <summary>
            
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetClaims(System.Security.Principal.IIdentity)">
            <summary>
            Gets the claims from the supplied <see cref="T:System.Security.Principal.IIdentity"/>
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetRoles(System.Security.Principal.IIdentity)">
            <summary>
            Gets the roles in the supplied identity
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetRoles(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the roles in the supplied principal
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetRoles(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)">
            <summary>
            Gets the roles in the supplied claims
            </summary>
            <param name="claims"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetClaimValues(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)">
            <summary>
            Get the claim values from the supplied claims that matches the claim type
            </summary>
            <param name="claims"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetClaimVaule(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)">
            <summary>
            Gets the claim vaule for a specified type
            </summary>
            <remarks>Will return the first found claim and return it's value</remarks>
            <param name="claims"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetImpersonatingClient(System.Security.Principal.IIdentity)">
            <summary>
            Gets the impersonating client claim value if the identity has one.
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetImpersonatingClient(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the impersonating client claim value if the principal has one.
            </summary>
            <param name="principal"></param>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetImpersonatingClient(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            
            </summary>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.CreatePrincipal(System.String,System.String,System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Creates a principal
            </summary>
            <param name="authenticationType">The authentication type to use. If null is supplied, the <see cref="P:System.Security.Principal.IIdentity.IsAuthenticated"/> will return null.</param>
            <param name="name"></param>
            <param name="roles"></param>
            <param name="impersonatingClient"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetNameIdentifier(System.Security.Principal.IPrincipal)">
            <summary>
            
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.CreateClaims(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates claims of a specific type
            </summary>
            <param name="type"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.ClaimsUtil.GetClaimVaule(System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Gets the claim vaule for a specified type
            </summary>
            <remarks>Will return the first found claim and return it's value</remarks>
            <param name="principal"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Security.ClientSecurityManagerFactory">
            <summary>
            Factory class for retrieving <see cref="T:ImageVault.Common.Security.IClientSecurityManager"/> instances.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Security.ClientSecurityManagerFactory.Instance">
            <summary>
            Returns the singleton instance of the <see cref="T:ImageVault.Common.Security.ClientSecurityManagerFactory"/> class.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Security.ClientSecurityManagerFactory.ClientSecurityManager">
            <summary>
            Get/Sets the ClientSecurityManager of the ClientSecurityManagerFactory
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Security.ClientSecurityManagerFactory.#ctor">
            <summary>
            Initializes a new instance of the <b>ClientSecurityManagerFactory</b> class.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Security.HttpBasicAuthUtil">
            <summary>
            Summary description for HttpBasicAuthUtil.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Security.HttpBasicAuthUtil.BasicAuthEncoding">
            <summary>
            The encoding used for encrypting the basic auth data. RFC is kind of blurry in this matter.
            Normally RFC states iso-8859-1 but this does not cover all needs. Utf-8 is used by firefox and chrome so we stick with that
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Security.HttpBasicAuthUtil.ParseBasicAuthHeader(System.String)">
            <summary>
            Parses the auth header value for a basic auth request
            </summary>
            <param name="authHeader">The header to parse</param>
            <returns>An array containing the username and password or null if the supplied header value is not a valid</returns>
        </member>
        <member name="M:ImageVault.Common.Security.HttpBasicAuthUtil.CreateBasicAuthHeaderValue(System.String,System.String)">
            <summary>
            Creates a Basic authentication header value
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Security.HttpHeaders">
            <summary>
            A list of custom HttpHeaders that are used in IV
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.HttpHeaders.IVAuthorization">
            <summary>
            This header is used for supplying the Authorization token/ticket
            </summary>
        </member>
        <member name="T:ImageVault.Common.Security.QueryStringKeys">
            <summary>
            A list of custom QueryString parameters that are used in IV
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.QueryStringKeys.IVAuthorization">
            <summary>
            Used for oauth rest requests as an alternative method to pass the authorization header
            </summary>
        </member>
        <member name="T:ImageVault.Common.Security.IVAuthorizationSchemes">
            <summary>
            Defines the different Authorization schemes that can be used in IVAuthorization
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:ImageVault.Common.Security.IVAuthorizationSchemes.IVAuthTicket">
            <summary>
            Defines that the whole ticket is supplied
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.IVAuthorizationSchemes.IVAuthToken">
            <summary>
            Defines that a registered token is supplied
            </summary>
        </member>
        <member name="T:ImageVault.Common.Security.IClientSecurityManager">
            <summary>
            An interface for extracting user and role identities
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.IClientSecurityManager.GetRoleIdentities(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the role identities for the supplied principal
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.IClientSecurityManager.GetUserIdentity(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the user identity for the principal
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Security.IIdentityLookupService">
            <summary>
            Summary description for IIdentityLookupService.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.IIdentityLookupService.GetAllRoles">
            <summary>
            Get all roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.IIdentityLookupService.GetRolesForUser(System.String)">
            <summary>
            Gets all roles for a specific user
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.IIdentityLookupService.FindUsersByName(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="usernameToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.IIdentityLookupService.ValidateUser(System.String,System.String)">
            <summary>
            Validates the supplied username/password
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.IIdentityLookupService.GetUser(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="userIsOnline"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Security.FindUsersByNameResult">
            <summary>
            
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:ImageVault.Common.Security.FindUsersByNameResult.Users">
            <summary>
            Get/Sets the Users of the <see cref="T:ImageVault.Common.Security.FindUsersByNameResult"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.FindUsersByNameResult.TotalRecords">
            <summary>
            Get/Sets the TotalRecords of the <see cref="T:ImageVault.Common.Security.FindUsersByNameResult"/>
            </summary>
        </member>
        <member name="T:ImageVault.Common.Security.IImpersonatingPrincipal">
            <summary>
            Indicates that a IPrincipal can be
            </summary>
        </member>
        <member name="P:ImageVault.Common.Security.IImpersonatingPrincipal.ImpersonatingClient">
            <summary>
            Get/Sets the ImpersonatingClient of the IvPrincipal
            </summary>
            <value>If impersonating, the client that allowed the impersonate is contained here</value>
        </member>
        <member name="T:ImageVault.Common.Security.ImageVaultForbiddenException">
            <summary>
            Summary description for ImageVaultForbiddenException.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.ImageVaultForbiddenException.#ctor">
            <summary>
            Initializes a new instance of the <b>ImageVaultForbiddenException</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.ImageVaultForbiddenException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>ImageVaultForbiddenException</b> class with a specified error message.
            </summary>
            <param name="message">a message that describes the exception</param>
        </member>
        <member name="M:ImageVault.Common.Security.ImageVaultForbiddenException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <b>ImageVaultForbiddenException</b> class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">a message that describes the exception</param>
            <param name="innerException">The exception that caused this exception</param>
        </member>
        <member name="M:ImageVault.Common.Security.ImageVaultForbiddenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>ImageVaultForbiddenException</b> class with serialized data. 		
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination.</param>
        </member>
        <member name="M:ImageVault.Common.Security.ImageVaultForbiddenException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <b>ImageVaultForbiddenException</b> class with a specified formatted error message.		/// </summary>
            <param name="format">A <see cref="T:System.String"/> containing zero or more format items. </param>
            <param name="args">An <see cref="T:System.Object"/> array containing zero or more objects to format.</param>
        </member>
        <member name="M:ImageVault.Common.Security.ImageVaultForbiddenException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the SerializationInfo with information about the 
            exception. 
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination.</param>
        </member>
        <member name="T:ImageVault.Common.Security.DefaultClientSecurityManager">
            <summary>
            A client security manager that supports claims and role providers
            </summary>
            <remarks>
            <p>It supports the following claims</p>
            <ul>
              <li>Role ("http://schemas.microsoft.com/ws/2008/06/identity/claims/role")</li>
              <li>Group ("http://schemas.microsoft.com/ws/2008/06/identity/claims/groups")</li>
              <li>GroupSid (will be translated) ("http://schemas.microsoft.com/ws/2008/06/identity/claims/groupsid")</li>
              <li>Object identifier ("http://schemas.microsoft.com/identity/claims/objectidentifier")</li>
            </ul>
            <p>You can also specify a prefix to be added to each identity by setting the following app setting.</p>
            <pre>ImageVault.Common.Security.DefaultClientSecurityManager.IdentityPrefix</pre>
            </remarks>
            <example></example>
        </member>
        <member name="M:ImageVault.Common.Security.DefaultClientSecurityManager.GetRoleIdentities(System.Security.Principal.IPrincipal)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Security.DefaultClientSecurityManager.GetRoleIdentityList(System.Security.Principal.IPrincipal)">
            <summary>
            Gets a list of all role identities that is found for the user.
            </summary>
            <param name="principal"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.DefaultClientSecurityManager.GetUserIdentity(System.Security.Principal.IPrincipal)">
            <inheritdoc/>
        </member>
        <member name="M:ImageVault.Common.Security.DefaultClientSecurityManager.GetMembershipProviderUserKey">
            <summary>
            Gets the user ProviderUserKey from the membership user key
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.DefaultClientSecurityManager.CreateIdentity(System.String)">
            <summary>
            Adjusts a identity key according to the configuration
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Security.MembershipExtensions">
            <summary>
            Extension methods for Membership providers
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.MembershipExtensions.GetMembershipProviderWildCard(System.Web.Security.MembershipProvider)">
            <summary>
            Gets the provider-specific wildcard-character
            </summary>
            <param name="provider">The provider</param>
            <returns>The providers wildcard-character</returns>
        </member>
        <member name="T:ImageVault.Common.Security.OAuth.OAuthErrorCodes">
            <summary>
            Defines the different types of error codes stated by the oauth2 rfc.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthErrorCodes.InvalidRequest">
            <summary>
            The request is missing a required parameter, includes an
            unsupported parameter value (other than grant type),
            repeats a parameter, includes multiple credentials,
            utilizes more than one mechanism for authenticating the
            client, or is otherwise malformed.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthErrorCodes.InvalidClient">
            <summary>
            Client authentication failed (e.g., unknown client, no
            client authentication included, or unsupported
            authentication method).  The authorization server MAY
            return an HTTP 401 (Unauthorized) status code to indicate
            which HTTP authentication schemes are supported.  If the
            client attempted to authenticate via the "Authorization"
            request header field, the authorization server MUST
            respond with an HTTP 401 (Unauthorized) status code and
            include the "WWW-Authenticate" response header field
            matching the authentication scheme used by the client.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthErrorCodes.InvalidGrant">
            <summary>
            The provided authorization grant (e.g., authorization
            code, resource owner credentials) or refresh token is
            invalid, expired, revoked, does not match the redirection
            URI used in the authorization request, or was issued to
            another client.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthErrorCodes.UnauthorizedClient">
            <summary>
            The authenticated client is not authorized to use this
            authorization grant type.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthErrorCodes.UnsupportedGrantType">
            <summary>
            The authorization grant type is not supported by the
            authorization server.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthErrorCodes.InvalidScope">
            <summary>
            The requested scope is invalid, unknown, malformed, or
            exceeds the scope granted by the resource owner.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthErrorCodes.UnsupportedResponseType">
            <summary>
            The authorization server does not support obtaining an 
            authorization code using this method.
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthErrorCodes.AccessDenied">
            <summary>
            The resource owner or authorization server denied the 
            request.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Security.OAuth.OAuthErrorData">
            <summary>
            
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Security.OAuth.OAuthErrorData.Error">
            <summary>
            Get/Sets the OAuthErrorCode of the OAuthException
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Security.OAuth.OAuthErrorData.ErrorDescription">
            <summary>
            Gets the Message of the OAuthException
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Security.OAuth.OAuthErrorData.ErrorUri">
            <summary>
            Get/Sets the ErrorUri of the OAuthException
            </summary>
            <value></value>
        </member>
        <member name="T:ImageVault.Common.Security.OAuth.OAuthException">
            <summary>
            A generic OAuthException to be serialized to json for correct oauth handling
            </summary>
        </member>
        <member name="P:ImageVault.Common.Security.OAuth.OAuthException.OAuthErrorData">
            <summary>
            Get/Sets the OAuthErrorData of the OAuthException
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Security.OAuth.OAuthException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>OAuthException</b> class.
            </summary>
            <param name="errorCode"></param>
            <param name="message"></param>
        </member>
        <member name="M:ImageVault.Common.Security.OAuth.OAuthException.ToJsonResponse">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Security.OAuth.OAuthGrantTypes">
            <summary>
            Defines the supported OAuth grant types
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthGrantTypes.Password">
            <summary>
            Gets the Password of the <see cref="T:ImageVault.Common.Security.OAuth.OAuthGrantTypes"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthGrantTypes.ClientCredentials">
            <summary>
            Gets the ClientCredentials of the <see cref="T:ImageVault.Common.Security.OAuth.OAuthGrantTypes"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthGrantTypes.RefreshToken">
            <summary>
            Gets the RefreshToken of the <see cref="T:ImageVault.Common.Security.OAuth.OAuthGrantTypes"/>
            </summary>
        </member>
        <member name="F:ImageVault.Common.Security.OAuth.OAuthGrantTypes.AuthorizationCode">
            <summary>
            Authorization code grant type
            </summary>
        </member>
        <member name="T:ImageVault.Common.Security.OAuth.OAuthInvalidClientException">
            <summary>
            A specific Exception that is thrown when:
            Client authentication failed (e.g., unknown client, no
            client authentication included, or unsupported
            authentication method).  The authorization server MAY
            return an HTTP 401 (Unauthorized) status code to indicate
            which HTTP authentication schemes are supported.  If the
            client attempted to authenticate via the "Authorization"
            request header field, the authorization server MUST
            respond with an HTTP 401 (Unauthorized) status code and
            include the "WWW-Authenticate" response header field
            matching the authentication scheme used by the client.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.OAuth.OAuthInvalidClientException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>OAuthInvalidClientException</b> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ImageVault.Common.Security.OAuth.OAuthInvalidGrantException">
            <summary>
            A specific Exception that is thrown when:
            The provided authorization grant (e.g., authorization
            code, resource owner credentials) or refresh token is
            invalid, expired, revoked, does not match the redirection
            URI used in the authorization request, or was issued to
            another client.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.OAuth.OAuthInvalidGrantException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>OAuthInvalidGrantException</b> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ImageVault.Common.Security.OAuth.OAuthInvalidRequestException">
            <summary>
            A specific Exception that is thrown when:
            The request is missing a required parameter, includes an
            unsupported parameter value (other than grant type),
            repeats a parameter, includes multiple credentials,
            utilizes more than one mechanism for authenticating the
            client, or is otherwise malformed.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.OAuth.OAuthInvalidRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>OAuthInvalidRequestException</b> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ImageVault.Common.Security.OAuth.OAuthUnsupportedGrantTypeException">
            <summary>
            A specific Exception that is thrown when:
            The authorization grant type is not supported by the
            authorization server.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.OAuth.OAuthUnsupportedGrantTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>OAuthUnsupportedGrantTypeException</b> class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ImageVault.Common.Security.OAuth.OAuthUnsupportedResponseTypeException">
            <summary>
            A specific Exception that is thrown when:
            The authorization server does not support obtaining an 
            authorization code using this method.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.OAuth.OAuthUnsupportedResponseTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>OAuthUnsupportedResponseTypeException</b> class.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Security.ServicePointManagerHelper">
            <summary>
            Setup a disposable ServerCertificateValidationCallback
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.ServicePointManagerHelper.#ctor(System.Func{System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.Boolean})">
            <summary>
            Setup <see cref="P:System.Net.ServicePointManager.ServerCertificateValidationCallback"/> to allow all valid certificates
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:ImageVault.Common.Security.ServicePointManagerHelper.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before 
            the <b>ServicePointManagerHelper</b> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.ServicePointManagerHelper.Dispose">
            <summary>
            Releases the resources used by the <b>ServicePointManagerHelper</b>.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.ServicePointManagerHelper.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the <b>ServicePointManagerHelper</b>.
            </summary>
            <param name="disposing">Set to <b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:ImageVault.Common.Security.ServicePointManagerHelper.SetSecurityProtocolFromConfiguration">
            <summary>
            Sets the <see cref="P:System.Net.ServicePointManager.SecurityProtocol"/> to the configured value
            </summary>
        </member>
        <member name="T:ImageVault.Common.Security.TicketEntry">
            <summary>
            Defines a cached Authentication ticket entry for the TicketRepository
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="P:ImageVault.Common.Security.TicketEntry.AuthTicket">
            <summary>
            Get/Sets the AuthTicket of the TicketEntry
            </summary>
            <value></value>
        </member>
        <member name="P:ImageVault.Common.Security.TicketEntry.Expires">
            <summary>
            Get/Sets the Expires of the TicketEntry
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Security.TicketEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>TicketEntry</b> class.
            </summary>
            <param name="authTicket"></param>
        </member>
        <member name="M:ImageVault.Common.Security.TicketEntry.#ctor(System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <b>TicketEntry</b> class.
            </summary>
            <param name="authTicket"></param>
            <param name="expiresIn"></param>
        </member>
        <member name="M:ImageVault.Common.Security.TicketEntry.Equals(ImageVault.Common.Security.TicketEntry)">
            <summary>
            Determines whether the specified <see cref="T:ImageVault.Common.Security.TicketEntry"/> is equal to the current 
            <b>TicketEntry</b>.
            </summary>
            <param name="other">The <see cref="T:ImageVault.Common.Security.TicketEntry"/> to compare with the current <see cref="T:ImageVault.Common.Security.TicketEntry"/>.</param>
            <returns>true if the specified <see cref="T:ImageVault.Common.Security.TicketEntry"/> is equal to the current <b>TicketEntry</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Security.TicketEntry.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current 
            <b>TicketEntry</b>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:ImageVault.Common.Security.TicketEntry"/>.</param>
            <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <b>TicketEntry</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:ImageVault.Common.Security.TicketEntry.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current <see cref="T:ImageVault.Common.Security.TicketEntry"/>.</returns>
        </member>
        <member name="T:ImageVault.Common.Security.TicketStore">
            <summary>
            A ticket store keeps track of authentication tickets
            </summary>
            <remarks></remarks>
            <example></example>
            TODO:Move to Core? Why is it in Common anyway?
        </member>
        <member name="M:ImageVault.Common.Security.TicketStore.AddTicket(ImageVault.Common.Security.TicketEntry)">
            <summary>
            Adds a new ticket that don't have a sessiontoken assigned
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.TicketStore.RemoveExpiredEntries">
            <summary>
            Removes all expored entries
            </summary>
        </member>
        <member name="M:ImageVault.Common.Security.TicketStore.GetTicket(System.String)">
            <summary>
            Gets a ticket entry by it's sessiontoken
            </summary>
            <param name="sessionToken"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Security.TicketStore.RemoveTicket(System.String)">
            <summary>
            Removes a ticket with the supplied sessionToken
            </summary>
            <param name="sessionToken"></param>
            <returns>true if the session token was found and the authentication ticket was removed. False if the sessionToken was not present.</returns>
        </member>
        <member name="M:ImageVault.Common.Security.TicketStore.AddTicket(System.String,ImageVault.Common.Security.TicketEntry)">
            <summary>
            Adds a sessionToken/ticket pair
            </summary>
            <param name="sessionToken"></param>
            <param name="ticketEntry"></param>
        </member>
        <member name="M:ImageVault.Common.Security.TicketStore.GetAllTickets">
            <summary>
            Returns a list of the current entries in the store
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Serialization.JsonConverter">
            <summary>
            Wraps JsonConvert methods with the settings
            </summary>
        </member>
        <member name="M:ImageVault.Common.Serialization.JsonConverter.#cctor">
            <summary>
            Initializes a new instance of the <b>JsonConverter</b> class.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Serialization.JsonConverter.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string using a collection of JsonConverter. 
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Serialization.JsonConverter.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type. 
            </summary>
            <param name="data"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Serialization.JsonConverter.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Serialization.JsonConverter.SerializeByBaseClass``1(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Serialization.JsonConverter.DeserializeObjectByBaseClass``1(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Services.IClientIdentityService">
            <summary>
            Summary description for IClientIdentityService.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IClientIdentityService.CurrentUserInfo">
            <summary>
            Gets User information about the current user 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IClientIdentityService.GetClient(System.String)">
            <summary>
            Gets a client by the specified id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IClientIdentityService.GetAll">
            <summary>
            Gets all registered clients
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IClientIdentityService.Create(ImageVault.Common.Data.ClientIdentity)">
            <summary>
            Creates a client identity
            </summary>
            <param name="clientIdentity"></param>
        </member>
        <member name="M:ImageVault.Common.Services.IClientIdentityService.Update(ImageVault.Common.Data.ClientIdentity)">
            <summary>
            Updates an existing client identity
            </summary>
            <param name="clientIdentity"></param>
        </member>
        <member name="M:ImageVault.Common.Services.IClientIdentityService.Delete(System.String)">
            <summary>
            Deletes a client identity by it's id
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:ImageVault.Common.Services.IGlobalRoleIdentityService">
            <summary>
            The IGlobalRoleIdentityService interface 
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IGlobalRoleIdentityService.Find(ImageVault.Common.Data.Query.GlobalRoleIdentityQuery)">
            <summary>
            Finds one or more Identities objects based on the supplied query
            </summary>
            <param name="query">The <see cref="T:ImageVault.Common.Data.Query.GlobalRoleIdentityQuery"/> describing what data to find</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IGlobalRoleIdentityService.Store(ImageVault.Common.Data.GlobalRoleIdentity)">
            <summary>
            Stores the supplied identity object to the database
            </summary>
            <param name="identity">The <see cref="T:ImageVault.Common.Data.GlobalRoleIdentity"/> to store</param>
            <returns></returns>
            <remarks>This will only store the Roles property of the identity. All other properties are read only</remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IGlobalRoleIdentityService.IsUserInRole(ImageVault.Common.Data.GlobalRoles)">
            <summary>
            Checks if the user matches the supplied role(s). If multiple roles are supplied, every role must be assigned to the current user
            </summary>
            <param name="roles">The <see cref="T:ImageVault.Common.Data.GlobalRoles"/> the user must be member of</param>
            <returns>True if user in is role, otherwise false.</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IGlobalRoleIdentityService.GetRolesForCurrentUser">
            <summary>
            Gets all global roles for the current user as a bit coded value.
            Use bitwise and to check if the user has a role.
            if (GetRolesForCurrentUser() &amp; GlobalRoles.Administrator) { ... }
            </summary>
            <returns>The <see cref="T:ImageVault.Common.Data.GlobalRoles"/> containing all roles that the current user belongs to</returns>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaAnalyserService">
            <summary>
            Summary description for IMediaAnalyserService.
            </summary>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaFormatService">
            <summary>
            Summary description for IMediaFormatService.
            </summary>
        </member>
        <member name="P:ImageVault.Common.Services.IMediaFormatService.OriginalFormat">
            <summary>
            Gets the OriginalFormat of the MediaFormatService
            </summary>
            <value></value>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaFormatService.Find(ImageVault.Common.Data.Query.MediaFormatQuery)">
            <summary>
            Finds mediaformats based on the supplied query
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaFormatService.Store(ImageVault.Common.Data.MediaFormatBase)">
            <summary>
            Stores the supplied format
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaFormatService.Delete(System.Int32)">
            <summary>
            Deletes a conversion format by it's id
            </summary>
            <param name="formatId">The id of the conversion format to delete</param>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaShareService">
            <summary>
            The IMediaShareService defines the methods used for working with <see cref="T:ImageVault.Common.Data.MediaShare"/> instances.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaShareService.Save(ImageVault.Common.Data.MediaShare)">
            <summary>
            Saves the supplied mediaShare
            </summary>
            <param name="mediaShare"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaShareService.Get(System.String,ImageVault.Common.Data.Query.MediaItemQuery)">
            <summary>
            Gets the media share with the supplied id using extra formats and information from the supplied query
            </summary>
            <param name="id">The id of the Media share to get</param>
            <param name="query">The query to use to retrieve extra information. Filter.Id, Populate.PublishIdentifier, Populate.MediaFormats[0] will be set as stated 
            for the share. Is optional.</param>
            <returns>The found <see cref="T:ImageVault.Common.Data.MediaShare"/> or null if no matching share is found.</returns>
            <remarks>If you specify MediaFormats in the MediaItemQuery, these will be found in the MediaItem from MediaConversions[1] and forwards. MediaConversions[0]
            will contain the conversion for the format specified in the <see cref="T:ImageVault.Common.Data.MediaShare"/>.</remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaShareService.GetShares(System.Collections.Generic.IList{System.String})">
            <summary>
            Gets a list of media shares with the supplied ids
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaShareService.FindShareByMediaItemId(System.Int32)">
            <summary>
            Find all shares, containing the given mediaItemId.
            </summary>
            <param name="mediaItemId">The Id to search for</param>
            <returns>Enumerable set of MediaShares</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaShareService.Delete(System.String)">
            <summary>
            Deletes the share with the given id.
            </summary>
            <param name="shareId">Id of share to delete</param>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaVersionService">
            <summary>
            Service for using media versions
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaVersionService.Delete(System.Int32)">
            <summary>
            Deletes the supplied version
            </summary>
            <param name="versionId">The id of the version to delete</param>
            <remarks>
            To be able to delete a specific version, the user must have 
            Contribute access to the vault where the media item resides.
            
            Further more, the media item cannot have it's current version set to the version to be deleted, 
            it needs to be reassigned first.
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaVersionService.SaveComment(System.Int32,System.String)">
            <summary>
            Saves the supplied comment and optionally, sets the version as the current version
            </summary>
            <param name="versionId">The id of the version to modify</param>
            <param name="comment">The comment to set on the version</param>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaVersionService.SetCurrent(System.Int32)">
            <summary>
            Sets the supplied version as the current version
            </summary>
            <param name="versionId">The id of the version that should be set as the current version.</param>
        </member>
        <member name="T:ImageVault.Common.Services.IOAuthService">
            <summary>
            Defines common methods for the oauth service
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IOAuthService.RegisterAuthorizationToken(ImageVault.Common.Data.OAuthAuthorizationToken)">
            <summary>
            Registers the supplied authorization token
            </summary>
            <param name="authToken"></param>
            <returns>The authorization code to use to access the registered authorization token</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IOAuthService.HasUserAllowedClientAccess(System.String,System.String)">
            <summary>
            Checks if a user has allowed access for a client
            </summary>
            <param name="username">The identity name of the user</param>
            <param name="clientId">The id of the client</param>
            <returns>True if the user has allowed access for the client. False otherwize.</returns>
        </member>
        <member name="T:ImageVault.Common.Services.IScheduledJobService">
            <summary>
            
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IScheduledJobService.GetJobs">
            <summary>
            Gets all registered Scheduled Jobs.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Services.IService">
            <summary>
            Defines a ImageVault api service
            </summary>
        </member>
        <member name="T:ImageVault.Common.Services.IServiceFactory">
            <summary>
            Defines an interface for requesting service instances
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IServiceFactory.GetService``1">
            <summary>
            Gets a service instance of the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IServiceFactory.GetService(System.Type)">
            <summary>
            Gets a service instance of the specified type
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Services.ICategoryService">
            <summary>
            The Category service provides methods for using categories
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.ICategoryService.GetCategories">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.ICategoryService.Find(ImageVault.Common.Data.Query.CategoryQuery)">
            <summary>
            Find categorys from a query
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.ICategoryService.Save(ImageVault.Common.Data.Category)">
            <summary>
            Creates och update a category
            </summary>
            <param name="category"></param>
            <returns>the id of category</returns>
        </member>
        <member name="M:ImageVault.Common.Services.ICategoryService.Delete(System.Int32)">
            <summary>
            Delete a category (and all child categories)
            </summary>
            <param name="categoryId">The id of the category to delete</param>
            <exception cref="T:System.UnauthorizedAccessException">If the user lacks access for the operation</exception>
        </member>
        <member name="T:ImageVault.Common.Services.ILanguageService">
            <summary>
            Contains methods for working with languages
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.ILanguageService.GetAllLanguages">
            <summary>
            Get all registered languages
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of all registered languages</returns>
        </member>
        <member name="M:ImageVault.Common.Services.ILanguageService.Create(System.String)">
            <summary>
            Creates a language with the supplied languageCode
            </summary>
            <param name="languageCode">The languageCode of the language to create</param>
            <returns>The created <see cref="T:ImageVault.Common.Data.Language"/> . If the language already exists, the existing <see cref="T:ImageVault.Common.Data.Language"/> is reused</returns>
            <exception cref="T:System.ArgumentNullException">If languageCode is null or an empty string.</exception>
        </member>
        <member name="M:ImageVault.Common.Services.ILanguageService.Delete(System.Int32)">
            <summary>
            Deletes a language by it's id
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaContentService">
            <summary>
            Summary description for IMediaContentService.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaContentService.CreateZipArchive(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Creates a zip archive for the supplied items
            </summary>
            <param name="mediaItemIds">The id of items to include in the archive</param>
            <param name="mediaFormatId">The id of the mediaFormatId to get them in</param>
            <returns>The key to use to retrieve the archive</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaContentService.StoreContentInVault(System.String,System.String,System.String,System.Int32)">
            <summary>
            Finalizes the upload by indicating that the uploaded file is completed and are ready to be analyzed
            </summary>
            <param name="uploadFileId">The id of the file that was uploaded</param>
            <param name="filename">The original filename</param>
            <param name="contentType">The contentType of the file or pass null to let the content type be deternmined by ImageVault</param>
            <param name="vaultId">The id of the vault to store it in.</param>
            <returns>The <see cref="T:ImageVault.Common.Data.MediaItem"/> for the uploaded item</returns>
            <exception cref="T:System.Security.Authentication.AuthenticationException">If you need to be authenticated to create media items.</exception>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaContentService.StoreContentAsNewVersion(System.String,System.String,System.String,System.Int32)">
            <summary>
            Stores the uploaded content as a new version for the supplied media item
            </summary>
            <remarks>The new version will not be marked as current version</remarks>
            <param name="uploadFileId">The id of the file that was uploaded</param>
            <param name="filename">The original filename</param>
            <param name="contentType">The contentType of the file or pass null to let the content type be deternmined by ImageVault</param>
            <param name="mediaItemId">The media item id that the uploaded content should be a new version for</param>
            <returns>The <see cref="T:ImageVault.Common.Data.MediaVersion"/> that was created</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaContentService.PublishMedia(System.String,System.String)">
            <summary>
            Publishes the supplied media using the identifier and returns the published key
            </summary>
            <param name="mediaContentReferenceId">The id of the mediaContentreference to publish</param>
            <param name="publishIdentifier">The publish identifier to use</param>
            <returns>The id of the publishedMediaContentReference</returns>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaConversionService">
            <summary>
            This service handles Conversions for the media items.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaConversionService.GetMediaContentReferences(System.Int32)">
            <summary>
            Gets a list of media content references for a specific media item
            </summary>
            <param name="mediaItemId">The id of the media item which media content references should be retrieved.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:ImageVault.Common.Data.MediaContentReference"/> for all items</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaConversionService.InvalidateConversion(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Invalidates a performed conversion, causing it to be reconverted next time it is requested
            </summary>
            <param name="mediaItemId">The id of the media item</param>
            <param name="mediaFormats">The list of media formats to affect or null if all formats of a media item should be affected</param>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaConversionService.ClearMediaInformation(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes media information, causing it to be reconstructed next time it is requested
            </summary>
            <param name="mediaItemId">The id of the media item</param>
            <param name="mediaFormats">The list of media formats to affect or null if all formats of a media item should be affected</param>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaService">
            <summary>
            Summary description for IMediaService.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaService.Find(ImageVault.Common.Data.Query.MediaItemQuery)">
            <summary>
            Finds one or more media items based on the supplied query
            </summary>
            <param name="query">The <see cref="T:ImageVault.Common.Data.Query.MediaItemQuery"/> containing filter and population data</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/> that matches the query</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaService.Save(System.Collections.Generic.IList{ImageVault.Common.Data.MediaItem},ImageVault.Common.Data.MediaServiceSaveOptions)">
            <summary>
            Saves the changes to the mediaitem data
            </summary>
            <param name="mediaItems">The <see cref="T:System.Collections.Generic.IList`1"/> to save</param>
            <param name="saveOptions">The <see cref="T:ImageVault.Common.Data.MediaServiceSaveOptions"/> telling what data to save</param>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaService.DeleteMediaItem(System.Int32)">
            <summary>
            Deletes a media item with all its metadata, content, conversions and copies
            </summary>
            <param name="mediaItemId">The id of the media item to delete</param>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaService.PreparePopulateQuery(ImageVault.Common.Data.Query.MediaItemPopulationQuery)">
            <summary>
            Prepares the populate query and creates an id based query
            </summary>
            <param name="q">The <see cref="T:ImageVault.Common.Data.Query.MediaItemPopulationQuery"/> to populate</param>
            <returns>The <see cref="T:ImageVault.Common.Data.Query.MediaItemPopulationQuery"/> that is populated with id:n</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaService.EnsurePublishingSource(System.String)">
            <summary>
            Ensures that the supplied publishing source identifier is registered.
            If not, it is registered
            </summary>
            <param name="publishingSourceIdentifier">The name of the publishing source identifier</param>
            <exception cref="T:ImageVault.Common.License.LicenseException">If the license don't permit more publishing sources than already registered.</exception>
        </member>
        <member name="T:ImageVault.Common.Services.IMediaStorageService">
            <summary>
            Summary description for IMediaStorageService.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaStorageService.GetActiveStorageLicenseAgreement">
            <summary>
            Retrieves all license agreements for the active storages.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/> containing the active storages license agreements</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMediaStorageService.GetStorageInfo(System.Int32)">
            <summary>
            Gets storage infomation for the current media item
            </summary>
            <param name="mediaItemId"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Services.IMetadataDefinitionService">
            <summary>
            Contains methods for working with metadata definitions
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IMetadataDefinitionService.Find(ImageVault.Common.Data.Query.MetadataDefinitionQuery)">
            <summary>
            Find and populate metadata definitions
            </summary>
            <param name="q">Query for filtering and populating</param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMetadataDefinitionService.Save(ImageVault.Common.Data.MetadataDefinition)">
            <summary>
            Create or update a metadata definition
            </summary>
            <param name="metadataDefinition"></param>
            <returns>The id of metadata definition</returns>
        </member>
        <member name="M:ImageVault.Common.Services.IMetadataDefinitionService.Delete(System.Int32)">
            <summary>
            Delete a metadata definition
            </summary>
            <param name="id">The metadata definition id</param>
        </member>
        <member name="M:ImageVault.Common.Services.IMetadataDefinitionService.IsInUse(System.Int32)">
            <summary>
            Check if a metadata definition is in use
            </summary>
            <param name="metadataDefinitionId"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Services.IUploadService">
            <summary>
            Operations for uploading content 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:ImageVault.Common.Services.IUploadService.UploadFileContent(System.IO.Stream,System.String)">
            <summary>
            Uploads a part of (or whole) the file
            </summary>
            <param name="content">The content to upload</param>
            <param name="uploadFileId">The uploadFileId of a file to append to or null if we are creating a new file</param>
            <returns>The uploadFileId of the file</returns>
            <remarks>Use this to upload a file. Upload the whole file in one call or by parts. The returned uploadFileId is used to upload parts.
            When the whole file is uploaded, call <see cref="M:ImageVault.Common.Services.IMediaContentService.StoreContentInVault(System.String,System.String,System.String,System.Int32)"/> to finalize the upload and register it in ImageVault.</remarks>
        </member>
        <member name="T:ImageVault.Common.Services.IVaultService">
            <summary>
            This service supplies methods for working with Vaults
            </summary>
        </member>
        <member name="M:ImageVault.Common.Services.IVaultService.Find(ImageVault.Common.Data.Query.VaultQuery)">
            <summary>
            Find all vaults matching the query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IVaultService.Delete(System.Int32)">
            <summary>
            Deletes an empty vault by its id
            </summary>
            <param name="vaultId"></param>
        </member>
        <member name="M:ImageVault.Common.Services.IVaultService.Save(ImageVault.Common.Data.Vault,ImageVault.Common.Data.VaultServiceSaveOptions)">
            <summary>
            Creates or updates a vault
            </summary>
            <param name="vault"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:ImageVault.Common.Services.IVaultService.FindStatistics(ImageVault.Common.Data.Query.VaultStatisticsQuery)">
            <summary>
            Finds all statistics matching the query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:ImageVault.Common.Web.Modules.P3PModule">
            <summary>
            This module will add P3P headers on every response, allowing ie to accept cookies in iframes
            </summary>
        </member>
        <member name="M:ImageVault.Common.Web.Modules.P3PModule.Dispose">
            <summary>
            Releases the resources used by the <b>P3PModule</b>.
            </summary>
        </member>
        <member name="M:ImageVault.Common.Web.Modules.P3PModule.Init(System.Web.HttpApplication)">
            <summary>
            
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:ImageVault.Common.Web.Modules.P3PModule.app_PreSendRequestHeaders(System.Object,System.EventArgs)">
            <summary>
            This method is called when the app's PreSendRequestHeaders event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> of the event.</param>
        </member>
    </members>
</doc>
